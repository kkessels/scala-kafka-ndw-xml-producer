// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package nu.ndw

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[nu.ndw.Foo](node)
val document = scalaxb.toXML[nu.ndw.Foo](obj, "foo", nu.ndw.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "http://datex2.eu/schema/2/2_0",
    Some("D2LogicalModel") -> "http://datex2.eu/schema/2/2_0",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Nundw__AreaExtensionTypeFormat: scalaxb.XMLFormat[nu.ndw._AreaExtensionType] = new DefaultNundw__AreaExtensionTypeFormat {}
  implicit lazy val Nundw__ChargeBandVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._ChargeBandVersionedReference] = new DefaultNundw__ChargeBandVersionedReferenceFormat {}
  implicit lazy val Nundw__ContactDetailsVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._ContactDetailsVersionedReference] = new DefaultNundw__ContactDetailsVersionedReferenceFormat {}
  implicit lazy val Nundw__ExtensionTypeFormat: scalaxb.XMLFormat[nu.ndw._ExtensionType] = new DefaultNundw__ExtensionTypeFormat {}
  implicit lazy val Nundw__GenericPublicationExtensionTypeFormat: scalaxb.XMLFormat[nu.ndw._GenericPublicationExtensionType] = new DefaultNundw__GenericPublicationExtensionTypeFormat {}
  implicit lazy val Nundw__GroupOfParkingSpacesFormat: scalaxb.XMLFormat[nu.ndw._GroupOfParkingSpaces] = new DefaultNundw__GroupOfParkingSpacesFormat {}
  implicit lazy val Nundw__GroupOfParkingSpacesParkingSpaceIndexParkingSpaceFormat: scalaxb.XMLFormat[nu.ndw._GroupOfParkingSpacesParkingSpaceIndexParkingSpace] = new DefaultNundw__GroupOfParkingSpacesParkingSpaceIndexParkingSpaceFormat {}
  implicit lazy val Nundw__IntermediatePointOnLinearElementFormat: scalaxb.XMLFormat[nu.ndw._IntermediatePointOnLinearElement] = new DefaultNundw__IntermediatePointOnLinearElementFormat {}
  implicit lazy val Nundw__LinearExtensionTypeFormat: scalaxb.XMLFormat[nu.ndw._LinearExtensionType] = new DefaultNundw__LinearExtensionTypeFormat {}
  implicit lazy val Nundw__LocationContainedInItineraryFormat: scalaxb.XMLFormat[nu.ndw._LocationContainedInItinerary] = new DefaultNundw__LocationContainedInItineraryFormat {}
  implicit lazy val Nundw__MeasurementSiteRecordIndexMeasurementSpecificCharacteristicsFormat: scalaxb.XMLFormat[nu.ndw._MeasurementSiteRecordIndexMeasurementSpecificCharacteristics] = new DefaultNundw__MeasurementSiteRecordIndexMeasurementSpecificCharacteristicsFormat {}
  implicit lazy val Nundw__MeasurementSiteRecordVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._MeasurementSiteRecordVersionedReference] = new DefaultNundw__MeasurementSiteRecordVersionedReferenceFormat {}
  implicit lazy val Nundw__MeasurementSiteTableVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._MeasurementSiteTableVersionedReference] = new DefaultNundw__MeasurementSiteTableVersionedReferenceFormat {}
  implicit lazy val Nundw__ParkingAccessReferenceFormat: scalaxb.XMLFormat[nu.ndw._ParkingAccessReference] = new DefaultNundw__ParkingAccessReferenceFormat {}
  implicit lazy val Nundw__ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityFormat: scalaxb.XMLFormat[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility] = new DefaultNundw__ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityFormat {}
  implicit lazy val Nundw__ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatusFormat: scalaxb.XMLFormat[nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus] = new DefaultNundw__ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatusFormat {}
  implicit lazy val Nundw__ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatusFormat: scalaxb.XMLFormat[nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus] = new DefaultNundw__ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatusFormat {}
  implicit lazy val Nundw__ParkingRecordStatusParkingSpaceIndexParkingSpaceStatusFormat: scalaxb.XMLFormat[nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus] = new DefaultNundw__ParkingRecordStatusParkingSpaceIndexParkingSpaceStatusFormat {}
  implicit lazy val Nundw__ParkingRecordStatusScenarioIndexParkingUsageScenarioStatusFormat: scalaxb.XMLFormat[nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus] = new DefaultNundw__ParkingRecordStatusScenarioIndexParkingUsageScenarioStatusFormat {}
  implicit lazy val Nundw__ParkingRecordVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._ParkingRecordVersionedReference] = new DefaultNundw__ParkingRecordVersionedReferenceFormat {}
  implicit lazy val Nundw__ParkingRouteDetailsVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._ParkingRouteDetailsVersionedReference] = new DefaultNundw__ParkingRouteDetailsVersionedReferenceFormat {}
  implicit lazy val Nundw__ParkingSiteScenarioIndexParkingUsageScenarioFormat: scalaxb.XMLFormat[nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario] = new DefaultNundw__ParkingSiteScenarioIndexParkingUsageScenarioFormat {}
  implicit lazy val Nundw__ParkingSpaceFormat: scalaxb.XMLFormat[nu.ndw._ParkingSpace] = new DefaultNundw__ParkingSpaceFormat {}
  implicit lazy val Nundw__ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityFormat: scalaxb.XMLFormat[nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility] = new DefaultNundw__ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityFormat {}
  implicit lazy val Nundw__ParkingSpaceBasicsScenarioIndexParkingUsageScenarioFormat: scalaxb.XMLFormat[nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario] = new DefaultNundw__ParkingSpaceBasicsScenarioIndexParkingUsageScenarioFormat {}
  implicit lazy val Nundw__ParkingTableVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._ParkingTableVersionedReference] = new DefaultNundw__ParkingTableVersionedReferenceFormat {}
  implicit lazy val Nundw__PeriodExtensionTypeFormat: scalaxb.XMLFormat[nu.ndw._PeriodExtensionType] = new DefaultNundw__PeriodExtensionTypeFormat {}
  implicit lazy val Nundw__PointExtensionTypeFormat: scalaxb.XMLFormat[nu.ndw._PointExtensionType] = new DefaultNundw__PointExtensionTypeFormat {}
  implicit lazy val Nundw__PolygonAreaIndexPointCoordinatesFormat: scalaxb.XMLFormat[nu.ndw._PolygonAreaIndexPointCoordinates] = new DefaultNundw__PolygonAreaIndexPointCoordinatesFormat {}
  implicit lazy val Nundw__PredefinedItineraryIndexPredefinedLocationFormat: scalaxb.XMLFormat[nu.ndw._PredefinedItineraryIndexPredefinedLocation] = new DefaultNundw__PredefinedItineraryIndexPredefinedLocationFormat {}
  implicit lazy val Nundw__PredefinedItineraryVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._PredefinedItineraryVersionedReference] = new DefaultNundw__PredefinedItineraryVersionedReferenceFormat {}
  implicit lazy val Nundw__PredefinedLocationVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._PredefinedLocationVersionedReference] = new DefaultNundw__PredefinedLocationVersionedReferenceFormat {}
  implicit lazy val Nundw__PredefinedNonOrderedLocationGroupVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference] = new DefaultNundw__PredefinedNonOrderedLocationGroupVersionedReferenceFormat {}
  implicit lazy val Nundw__SiteMeasurementsIndexMeasuredValueFormat: scalaxb.XMLFormat[nu.ndw._SiteMeasurementsIndexMeasuredValue] = new DefaultNundw__SiteMeasurementsIndexMeasuredValueFormat {}
  implicit lazy val Nundw__SituationRecordExtensionTypeFormat: scalaxb.XMLFormat[nu.ndw._SituationRecordExtensionType] = new DefaultNundw__SituationRecordExtensionTypeFormat {}
  implicit lazy val Nundw__SituationRecordVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._SituationRecordVersionedReference] = new DefaultNundw__SituationRecordVersionedReferenceFormat {}
  implicit lazy val Nundw__SituationVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._SituationVersionedReference] = new DefaultNundw__SituationVersionedReferenceFormat {}
  implicit lazy val Nundw__TextPageFormat: scalaxb.XMLFormat[nu.ndw._TextPage] = new DefaultNundw__TextPageFormat {}
  implicit lazy val Nundw__VehicleCharacteristicsExtensionTypeFormat: scalaxb.XMLFormat[nu.ndw._VehicleCharacteristicsExtensionType] = new DefaultNundw__VehicleCharacteristicsExtensionTypeFormat {}
  implicit lazy val Nundw__VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristicsFormat: scalaxb.XMLFormat[nu.ndw._VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics] = new DefaultNundw__VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristicsFormat {}
  implicit lazy val Nundw__VmsMessageIndexVmsMessageFormat: scalaxb.XMLFormat[nu.ndw._VmsMessageIndexVmsMessage] = new DefaultNundw__VmsMessageIndexVmsMessageFormat {}
  implicit lazy val Nundw__VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayAreaFormat: scalaxb.XMLFormat[nu.ndw._VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea] = new DefaultNundw__VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayAreaFormat {}
  implicit lazy val Nundw__VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettingsFormat: scalaxb.XMLFormat[nu.ndw._VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings] = new DefaultNundw__VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettingsFormat {}
  implicit lazy val Nundw__VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogramFormat: scalaxb.XMLFormat[nu.ndw._VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram] = new DefaultNundw__VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogramFormat {}
  implicit lazy val Nundw__VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristicsFormat: scalaxb.XMLFormat[nu.ndw._VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics] = new DefaultNundw__VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristicsFormat {}
  implicit lazy val Nundw__VmsTextLineIndexVmsTextLineFormat: scalaxb.XMLFormat[nu.ndw._VmsTextLineIndexVmsTextLine] = new DefaultNundw__VmsTextLineIndexVmsTextLineFormat {}
  implicit lazy val Nundw__VmsUnitRecordVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._VmsUnitRecordVersionedReference] = new DefaultNundw__VmsUnitRecordVersionedReferenceFormat {}
  implicit lazy val Nundw__VmsUnitRecordVmsIndexVmsRecordFormat: scalaxb.XMLFormat[nu.ndw._VmsUnitRecordVmsIndexVmsRecord] = new DefaultNundw__VmsUnitRecordVmsIndexVmsRecordFormat {}
  implicit lazy val Nundw__VmsUnitTableVersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw._VmsUnitTableVersionedReference] = new DefaultNundw__VmsUnitTableVersionedReferenceFormat {}
  implicit lazy val Nundw__VmsUnitVmsIndexVmsFormat: scalaxb.XMLFormat[nu.ndw._VmsUnitVmsIndexVms] = new DefaultNundw__VmsUnitVmsIndexVmsFormat {}
  implicit lazy val Nundw_AbnormalTrafficFormat: scalaxb.XMLFormat[nu.ndw.AbnormalTraffic] = new DefaultNundw_AbnormalTrafficFormat {}
  implicit lazy val Nundw_AbnormalTrafficTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.AbnormalTrafficTypeEnum] = new DefaultNundw_AbnormalTrafficTypeEnumFormat {}
  implicit lazy val Nundw_AcceptedPaymentCardsFormat: scalaxb.XMLFormat[nu.ndw.AcceptedPaymentCards] = new DefaultNundw_AcceptedPaymentCardsFormat {}
  implicit lazy val Nundw_AccessCategoryEnumFormat: scalaxb.XMLFormat[nu.ndw.AccessCategoryEnum] = new DefaultNundw_AccessCategoryEnumFormat {}
  implicit lazy val Nundw_AccessEquipmentEnumFormat: scalaxb.XMLFormat[nu.ndw.AccessEquipmentEnum] = new DefaultNundw_AccessEquipmentEnumFormat {}
  implicit lazy val Nundw_AccessibilityEnumFormat: scalaxb.XMLFormat[nu.ndw.AccessibilityEnum] = new DefaultNundw_AccessibilityEnumFormat {}
  implicit lazy val Nundw_AccidentTypeFormat: scalaxb.XMLFormat[nu.ndw.AccidentType] = new DefaultNundw_AccidentTypeFormat {}
  implicit lazy val Nundw_AccidentCauseEnumFormat: scalaxb.XMLFormat[nu.ndw.AccidentCauseEnum] = new DefaultNundw_AccidentCauseEnumFormat {}
  implicit lazy val Nundw_AccidentTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.AccidentTypeEnum] = new DefaultNundw_AccidentTypeEnumFormat {}
  implicit lazy val Nundw_ActivityFormat: scalaxb.XMLFormat[nu.ndw.Activity] = new DefaultNundw_ActivityFormat {}
  implicit lazy val Nundw_AffectedCarriagewayAndLanesFormat: scalaxb.XMLFormat[nu.ndw.AffectedCarriagewayAndLanes] = new DefaultNundw_AffectedCarriagewayAndLanesFormat {}
  implicit lazy val Nundw_AlertCAreaFormat: scalaxb.XMLFormat[nu.ndw.AlertCArea] = new DefaultNundw_AlertCAreaFormat {}
  implicit lazy val Nundw_AlertCDirectionFormat: scalaxb.XMLFormat[nu.ndw.AlertCDirection] = new DefaultNundw_AlertCDirectionFormat {}
  implicit lazy val Nundw_AlertCDirectionEnumFormat: scalaxb.XMLFormat[nu.ndw.AlertCDirectionEnum] = new DefaultNundw_AlertCDirectionEnumFormat {}
  implicit lazy val Nundw_AlertCLinearFormat: scalaxb.XMLFormat[nu.ndw.AlertCLinear] = new DefaultNundw_AlertCLinearFormat {}
  implicit lazy val Nundw_AlertCLinearByCodeFormat: scalaxb.XMLFormat[nu.ndw.AlertCLinearByCode] = new DefaultNundw_AlertCLinearByCodeFormat {}
  implicit lazy val Nundw_AlertCLocationFormat: scalaxb.XMLFormat[nu.ndw.AlertCLocation] = new DefaultNundw_AlertCLocationFormat {}
  implicit lazy val Nundw_AlertCMethod2LinearFormat: scalaxb.XMLFormat[nu.ndw.AlertCMethod2Linear] = new DefaultNundw_AlertCMethod2LinearFormat {}
  implicit lazy val Nundw_AlertCMethod2PointFormat: scalaxb.XMLFormat[nu.ndw.AlertCMethod2Point] = new DefaultNundw_AlertCMethod2PointFormat {}
  implicit lazy val Nundw_AlertCMethod2PrimaryPointLocationFormat: scalaxb.XMLFormat[nu.ndw.AlertCMethod2PrimaryPointLocation] = new DefaultNundw_AlertCMethod2PrimaryPointLocationFormat {}
  implicit lazy val Nundw_AlertCMethod2SecondaryPointLocationFormat: scalaxb.XMLFormat[nu.ndw.AlertCMethod2SecondaryPointLocation] = new DefaultNundw_AlertCMethod2SecondaryPointLocationFormat {}
  implicit lazy val Nundw_AlertCMethod4LinearFormat: scalaxb.XMLFormat[nu.ndw.AlertCMethod4Linear] = new DefaultNundw_AlertCMethod4LinearFormat {}
  implicit lazy val Nundw_AlertCMethod4PointFormat: scalaxb.XMLFormat[nu.ndw.AlertCMethod4Point] = new DefaultNundw_AlertCMethod4PointFormat {}
  implicit lazy val Nundw_AlertCMethod4PrimaryPointLocationFormat: scalaxb.XMLFormat[nu.ndw.AlertCMethod4PrimaryPointLocation] = new DefaultNundw_AlertCMethod4PrimaryPointLocationFormat {}
  implicit lazy val Nundw_AlertCMethod4SecondaryPointLocationFormat: scalaxb.XMLFormat[nu.ndw.AlertCMethod4SecondaryPointLocation] = new DefaultNundw_AlertCMethod4SecondaryPointLocationFormat {}
  implicit lazy val Nundw_AlertCPointFormat: scalaxb.XMLFormat[nu.ndw.AlertCPoint] = new DefaultNundw_AlertCPointFormat {}
  implicit lazy val Nundw_AnimalPresenceObstructionFormat: scalaxb.XMLFormat[nu.ndw.AnimalPresenceObstruction] = new DefaultNundw_AnimalPresenceObstructionFormat {}
  implicit lazy val Nundw_AnimalPresenceTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.AnimalPresenceTypeEnum] = new DefaultNundw_AnimalPresenceTypeEnumFormat {}
  implicit lazy val Nundw_ApplicationRateValueFormat: scalaxb.XMLFormat[nu.ndw.ApplicationRateValue] = new DefaultNundw_ApplicationRateValueFormat {}
  implicit lazy val Nundw_AreaFormat: scalaxb.XMLFormat[nu.ndw.Area] = new DefaultNundw_AreaFormat {}
  implicit lazy val Nundw_AreaDestinationFormat: scalaxb.XMLFormat[nu.ndw.AreaDestination] = new DefaultNundw_AreaDestinationFormat {}
  implicit lazy val Nundw_AreaExtendedFormat: scalaxb.XMLFormat[nu.ndw.AreaExtended] = new DefaultNundw_AreaExtendedFormat {}
  implicit lazy val Nundw_AreaOfInterestEnumFormat: scalaxb.XMLFormat[nu.ndw.AreaOfInterestEnum] = new DefaultNundw_AreaOfInterestEnumFormat {}
  implicit lazy val Nundw_AuthorityOperationFormat: scalaxb.XMLFormat[nu.ndw.AuthorityOperation] = new DefaultNundw_AuthorityOperationFormat {}
  implicit lazy val Nundw_AuthorityOperationTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.AuthorityOperationTypeEnum] = new DefaultNundw_AuthorityOperationTypeEnumFormat {}
  implicit lazy val Nundw_AvailabilityEnumFormat: scalaxb.XMLFormat[nu.ndw.AvailabilityEnum] = new DefaultNundw_AvailabilityEnumFormat {}
  implicit lazy val Nundw_AxleFlowValueFormat: scalaxb.XMLFormat[nu.ndw.AxleFlowValue] = new DefaultNundw_AxleFlowValueFormat {}
  implicit lazy val Nundw_AxleSpacingFormat: scalaxb.XMLFormat[nu.ndw.AxleSpacing] = new DefaultNundw_AxleSpacingFormat {}
  implicit lazy val Nundw_AxleWeightFormat: scalaxb.XMLFormat[nu.ndw.AxleWeight] = new DefaultNundw_AxleWeightFormat {}
  implicit lazy val Nundw_BasicDataFormat: scalaxb.XMLFormat[nu.ndw.BasicData] = new DefaultNundw_BasicDataFormat {}
  implicit lazy val Nundw_CarParkConfigurationEnumFormat: scalaxb.XMLFormat[nu.ndw.CarParkConfigurationEnum] = new DefaultNundw_CarParkConfigurationEnumFormat {}
  implicit lazy val Nundw_CarParksFormat: scalaxb.XMLFormat[nu.ndw.CarParks] = new DefaultNundw_CarParksFormat {}
  implicit lazy val Nundw_CarParkStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.CarParkStatusEnum] = new DefaultNundw_CarParkStatusEnumFormat {}
  implicit lazy val Nundw_CarriagewayEnumFormat: scalaxb.XMLFormat[nu.ndw.CarriagewayEnum] = new DefaultNundw_CarriagewayEnumFormat {}
  implicit lazy val Nundw_CatalogueReferenceFormat: scalaxb.XMLFormat[nu.ndw.CatalogueReference] = new DefaultNundw_CatalogueReferenceFormat {}
  implicit lazy val Nundw_CauseFormat: scalaxb.XMLFormat[nu.ndw.Cause] = new DefaultNundw_CauseFormat {}
  implicit lazy val Nundw_CauseTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.CauseTypeEnum] = new DefaultNundw_CauseTypeEnumFormat {}
  implicit lazy val Nundw_ChangedFlagEnumFormat: scalaxb.XMLFormat[nu.ndw.ChangedFlagEnum] = new DefaultNundw_ChangedFlagEnumFormat {}
  implicit lazy val Nundw_ChargeFormat: scalaxb.XMLFormat[nu.ndw.Charge] = new DefaultNundw_ChargeFormat {}
  implicit lazy val Nundw_ChargeBandFormat: scalaxb.XMLFormat[nu.ndw.ChargeBand] = new DefaultNundw_ChargeBandFormat {}
  implicit lazy val Nundw_ChargeBandByReferenceFormat: scalaxb.XMLFormat[nu.ndw.ChargeBandByReference] = new DefaultNundw_ChargeBandByReferenceFormat {}
  implicit lazy val Nundw_ChargeTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.ChargeTypeEnum] = new DefaultNundw_ChargeTypeEnumFormat {}
  implicit lazy val Nundw_ChargingStationUsageTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.ChargingStationUsageTypeEnum] = new DefaultNundw_ChargingStationUsageTypeEnumFormat {}
  implicit lazy val Nundw_CodedReasonForSettingMessageEnumFormat: scalaxb.XMLFormat[nu.ndw.CodedReasonForSettingMessageEnum] = new DefaultNundw_CodedReasonForSettingMessageEnumFormat {}
  implicit lazy val Nundw_ColourEnumFormat: scalaxb.XMLFormat[nu.ndw.ColourEnum] = new DefaultNundw_ColourEnumFormat {}
  implicit lazy val Nundw_CommentFormat: scalaxb.XMLFormat[nu.ndw.Comment] = new DefaultNundw_CommentFormat {}
  implicit lazy val Nundw_CommentTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.CommentTypeEnum] = new DefaultNundw_CommentTypeEnumFormat {}
  implicit lazy val Nundw_ComparisonOperatorEnumFormat: scalaxb.XMLFormat[nu.ndw.ComparisonOperatorEnum] = new DefaultNundw_ComparisonOperatorEnumFormat {}
  implicit lazy val Nundw_ComplianceOptionEnumFormat: scalaxb.XMLFormat[nu.ndw.ComplianceOptionEnum] = new DefaultNundw_ComplianceOptionEnumFormat {}
  implicit lazy val Nundw_ComputationMethodEnumFormat: scalaxb.XMLFormat[nu.ndw.ComputationMethodEnum] = new DefaultNundw_ComputationMethodEnumFormat {}
  implicit lazy val Nundw_ConcentrationOfVehiclesValueFormat: scalaxb.XMLFormat[nu.ndw.ConcentrationOfVehiclesValue] = new DefaultNundw_ConcentrationOfVehiclesValueFormat {}
  implicit lazy val Nundw_ConditionsableFormat: scalaxb.XMLFormat[nu.ndw.Conditionsable] = new DefaultNundw_ConditionsableFormat {}
  implicit lazy val Nundw_ConditionsFormat: scalaxb.XMLFormat[nu.ndw.Conditions] = new DefaultNundw_ConditionsFormat {}
  implicit lazy val Nundw_ConfidentialityValueEnumFormat: scalaxb.XMLFormat[nu.ndw.ConfidentialityValueEnum] = new DefaultNundw_ConfidentialityValueEnumFormat {}
  implicit lazy val Nundw_ConstructionWorksFormat: scalaxb.XMLFormat[nu.ndw.ConstructionWorks] = new DefaultNundw_ConstructionWorksFormat {}
  implicit lazy val Nundw_ConstructionWorkTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.ConstructionWorkTypeEnum] = new DefaultNundw_ConstructionWorkTypeEnumFormat {}
  implicit lazy val Nundw_ContactableFormat: scalaxb.XMLFormat[nu.ndw.Contactable] = new DefaultNundw_ContactableFormat {}
  implicit lazy val Nundw_ContactFormat: scalaxb.XMLFormat[nu.ndw.Contact] = new DefaultNundw_ContactFormat {}
  implicit lazy val Nundw_ContactByReferenceFormat: scalaxb.XMLFormat[nu.ndw.ContactByReference] = new DefaultNundw_ContactByReferenceFormat {}
  implicit lazy val Nundw_ContactDetailsFormat: scalaxb.XMLFormat[nu.ndw.ContactDetails] = new DefaultNundw_ContactDetailsFormat {}
  implicit lazy val Nundw_CountryEnumFormat: scalaxb.XMLFormat[nu.ndw.CountryEnum] = new DefaultNundw_CountryEnumFormat {}
  implicit lazy val Nundw_CurrencyEnumFormat: scalaxb.XMLFormat[nu.ndw.CurrencyEnum] = new DefaultNundw_CurrencyEnumFormat {}
  implicit lazy val Nundw_D2LogicalModelFormat: scalaxb.XMLFormat[nu.ndw.D2LogicalModel] = new DefaultNundw_D2LogicalModelFormat {}
  implicit lazy val Nundw_DangerousGoodsRegulationsEnumFormat: scalaxb.XMLFormat[nu.ndw.DangerousGoodsRegulationsEnum] = new DefaultNundw_DangerousGoodsRegulationsEnumFormat {}
  implicit lazy val Nundw_DataValueFormat: scalaxb.XMLFormat[nu.ndw.DataValue] = new DefaultNundw_DataValueFormat {}
  implicit lazy val Nundw_DateTimeValueFormat: scalaxb.XMLFormat[nu.ndw.DateTimeValue] = new DefaultNundw_DateTimeValueFormat {}
  implicit lazy val Nundw_DayEnumFormat: scalaxb.XMLFormat[nu.ndw.DayEnum] = new DefaultNundw_DayEnumFormat {}
  implicit lazy val Nundw_DayWeekMonthFormat: scalaxb.XMLFormat[nu.ndw.DayWeekMonth] = new DefaultNundw_DayWeekMonthFormat {}
  implicit lazy val Nundw_DedicatedAccessFormat: scalaxb.XMLFormat[nu.ndw.DedicatedAccess] = new DefaultNundw_DedicatedAccessFormat {}
  implicit lazy val Nundw_DelayBandEnumFormat: scalaxb.XMLFormat[nu.ndw.DelayBandEnum] = new DefaultNundw_DelayBandEnumFormat {}
  implicit lazy val Nundw_DelaysFormat: scalaxb.XMLFormat[nu.ndw.Delays] = new DefaultNundw_DelaysFormat {}
  implicit lazy val Nundw_DelaysTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.DelaysTypeEnum] = new DefaultNundw_DelaysTypeEnumFormat {}
  implicit lazy val Nundw_DenyReasonEnumFormat: scalaxb.XMLFormat[nu.ndw.DenyReasonEnum] = new DefaultNundw_DenyReasonEnumFormat {}
  implicit lazy val Nundw_DestinationFormat: scalaxb.XMLFormat[nu.ndw.Destination] = new DefaultNundw_DestinationFormat {}
  implicit lazy val Nundw_DimensionFormat: scalaxb.XMLFormat[nu.ndw.Dimension] = new DefaultNundw_DimensionFormat {}
  implicit lazy val Nundw_DirectionBearingValueFormat: scalaxb.XMLFormat[nu.ndw.DirectionBearingValue] = new DefaultNundw_DirectionBearingValueFormat {}
  implicit lazy val Nundw_DirectionCompassEnumFormat: scalaxb.XMLFormat[nu.ndw.DirectionCompassEnum] = new DefaultNundw_DirectionCompassEnumFormat {}
  implicit lazy val Nundw_DirectionCompassValueFormat: scalaxb.XMLFormat[nu.ndw.DirectionCompassValue] = new DefaultNundw_DirectionCompassValueFormat {}
  implicit lazy val Nundw_DirectionEnumFormat: scalaxb.XMLFormat[nu.ndw.DirectionEnum] = new DefaultNundw_DirectionEnumFormat {}
  implicit lazy val Nundw_DistanceAlongLinearElementFormat: scalaxb.XMLFormat[nu.ndw.DistanceAlongLinearElement] = new DefaultNundw_DistanceAlongLinearElementFormat {}
  implicit lazy val Nundw_DistanceFromLinearElementReferentFormat: scalaxb.XMLFormat[nu.ndw.DistanceFromLinearElementReferent] = new DefaultNundw_DistanceFromLinearElementReferentFormat {}
  implicit lazy val Nundw_DistanceFromLinearElementStartFormat: scalaxb.XMLFormat[nu.ndw.DistanceFromLinearElementStart] = new DefaultNundw_DistanceFromLinearElementStartFormat {}
  implicit lazy val Nundw_DisturbanceActivityFormat: scalaxb.XMLFormat[nu.ndw.DisturbanceActivity] = new DefaultNundw_DisturbanceActivityFormat {}
  implicit lazy val Nundw_DisturbanceActivityTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.DisturbanceActivityTypeEnum] = new DefaultNundw_DisturbanceActivityTypeEnumFormat {}
  implicit lazy val Nundw_DrivingConditionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.DrivingConditionTypeEnum] = new DefaultNundw_DrivingConditionTypeEnumFormat {}
  implicit lazy val Nundw_DurationValueFormat: scalaxb.XMLFormat[nu.ndw.DurationValue] = new DefaultNundw_DurationValueFormat {}
  implicit lazy val Nundw_ElaboratedDataFormat: scalaxb.XMLFormat[nu.ndw.ElaboratedData] = new DefaultNundw_ElaboratedDataFormat {}
  implicit lazy val Nundw_ElaboratedDataFaultFormat: scalaxb.XMLFormat[nu.ndw.ElaboratedDataFault] = new DefaultNundw_ElaboratedDataFaultFormat {}
  implicit lazy val Nundw_ElaboratedDataFaultEnumFormat: scalaxb.XMLFormat[nu.ndw.ElaboratedDataFaultEnum] = new DefaultNundw_ElaboratedDataFaultEnumFormat {}
  implicit lazy val Nundw_ElaboratedDataPublicationFormat: scalaxb.XMLFormat[nu.ndw.ElaboratedDataPublication] = new DefaultNundw_ElaboratedDataPublicationFormat {}
  implicit lazy val Nundw_ElectricChargingFormat: scalaxb.XMLFormat[nu.ndw.ElectricCharging] = new DefaultNundw_ElectricChargingFormat {}
  implicit lazy val Nundw_EnvironmentalObstructionFormat: scalaxb.XMLFormat[nu.ndw.EnvironmentalObstruction] = new DefaultNundw_EnvironmentalObstructionFormat {}
  implicit lazy val Nundw_EnvironmentalObstructionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.EnvironmentalObstructionTypeEnum] = new DefaultNundw_EnvironmentalObstructionTypeEnumFormat {}
  implicit lazy val Nundw_EquipmentFormat: scalaxb.XMLFormat[nu.ndw.Equipment] = new DefaultNundw_EquipmentFormat {}
  implicit lazy val Nundw_EquipmentOrSystemFaultFormat: scalaxb.XMLFormat[nu.ndw.EquipmentOrSystemFault] = new DefaultNundw_EquipmentOrSystemFaultFormat {}
  implicit lazy val Nundw_EquipmentOrSystemFaultTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.EquipmentOrSystemFaultTypeEnum] = new DefaultNundw_EquipmentOrSystemFaultTypeEnumFormat {}
  implicit lazy val Nundw_EquipmentOrSystemTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.EquipmentOrSystemTypeEnum] = new DefaultNundw_EquipmentOrSystemTypeEnumFormat {}
  implicit lazy val Nundw_EquipmentTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.EquipmentTypeEnum] = new DefaultNundw_EquipmentTypeEnumFormat {}
  implicit lazy val Nundw_ExchangeFormat: scalaxb.XMLFormat[nu.ndw.Exchange] = new DefaultNundw_ExchangeFormat {}
  implicit lazy val Nundw_ExternalReferencingFormat: scalaxb.XMLFormat[nu.ndw.ExternalReferencing] = new DefaultNundw_ExternalReferencingFormat {}
  implicit lazy val Nundw_FaultableFormat: scalaxb.XMLFormat[nu.ndw.Faultable] = new DefaultNundw_FaultableFormat {}
  implicit lazy val Nundw_FaultFormat: scalaxb.XMLFormat[nu.ndw.Fault] = new DefaultNundw_FaultFormat {}
  implicit lazy val Nundw_FaultSeverityEnumFormat: scalaxb.XMLFormat[nu.ndw.FaultSeverityEnum] = new DefaultNundw_FaultSeverityEnumFormat {}
  implicit lazy val Nundw_FilterExitManagementFormat: scalaxb.XMLFormat[nu.ndw.FilterExitManagement] = new DefaultNundw_FilterExitManagementFormat {}
  implicit lazy val Nundw_FilterReferenceFormat: scalaxb.XMLFormat[nu.ndw.FilterReference] = new DefaultNundw_FilterReferenceFormat {}
  implicit lazy val Nundw_FloatingPointMetreDistanceValueFormat: scalaxb.XMLFormat[nu.ndw.FloatingPointMetreDistanceValue] = new DefaultNundw_FloatingPointMetreDistanceValueFormat {}
  implicit lazy val Nundw_FuelType2EnumFormat: scalaxb.XMLFormat[nu.ndw.FuelType2Enum] = new DefaultNundw_FuelType2EnumFormat {}
  implicit lazy val Nundw_FuelTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.FuelTypeEnum] = new DefaultNundw_FuelTypeEnumFormat {}
  implicit lazy val Nundw_GeneralInstructionOrMessageToRoadUsersFormat: scalaxb.XMLFormat[nu.ndw.GeneralInstructionOrMessageToRoadUsers] = new DefaultNundw_GeneralInstructionOrMessageToRoadUsersFormat {}
  implicit lazy val Nundw_GeneralInstructionToRoadUsersTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.GeneralInstructionToRoadUsersTypeEnum] = new DefaultNundw_GeneralInstructionToRoadUsersTypeEnumFormat {}
  implicit lazy val Nundw_GeneralNetworkManagementFormat: scalaxb.XMLFormat[nu.ndw.GeneralNetworkManagement] = new DefaultNundw_GeneralNetworkManagementFormat {}
  implicit lazy val Nundw_GeneralNetworkManagementTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.GeneralNetworkManagementTypeEnum] = new DefaultNundw_GeneralNetworkManagementTypeEnumFormat {}
  implicit lazy val Nundw_GeneralObstructionFormat: scalaxb.XMLFormat[nu.ndw.GeneralObstruction] = new DefaultNundw_GeneralObstructionFormat {}
  implicit lazy val Nundw_GenericPublicationFormat: scalaxb.XMLFormat[nu.ndw.GenericPublication] = new DefaultNundw_GenericPublicationFormat {}
  implicit lazy val Nundw_GenericSituationRecordFormat: scalaxb.XMLFormat[nu.ndw.GenericSituationRecord] = new DefaultNundw_GenericSituationRecordFormat {}
  implicit lazy val Nundw_GrossWeightCharacteristicFormat: scalaxb.XMLFormat[nu.ndw.GrossWeightCharacteristic] = new DefaultNundw_GrossWeightCharacteristicFormat {}
  implicit lazy val Nundw_GroupOfLocationsFormat: scalaxb.XMLFormat[nu.ndw.GroupOfLocations] = new DefaultNundw_GroupOfLocationsFormat {}
  implicit lazy val Nundw_GroupOfParkingSitesFormat: scalaxb.XMLFormat[nu.ndw.GroupOfParkingSites] = new DefaultNundw_GroupOfParkingSitesFormat {}
  implicit lazy val Nundw_GroupOfParkingSitesStatusFormat: scalaxb.XMLFormat[nu.ndw.GroupOfParkingSitesStatus] = new DefaultNundw_GroupOfParkingSitesStatusFormat {}
  implicit lazy val Nundw_GroupOfParkingSitesStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.GroupOfParkingSitesStatusEnum] = new DefaultNundw_GroupOfParkingSitesStatusEnumFormat {}
  implicit lazy val Nundw_GroupOfParkingSitesTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.GroupOfParkingSitesTypeEnum] = new DefaultNundw_GroupOfParkingSitesTypeEnumFormat {}
  implicit lazy val Nundw_GroupOfParkingSpacesFormat: scalaxb.XMLFormat[nu.ndw.GroupOfParkingSpaces] = new DefaultNundw_GroupOfParkingSpacesFormat {}
  implicit lazy val Nundw_GroupOfParkingSpacesStatusFormat: scalaxb.XMLFormat[nu.ndw.GroupOfParkingSpacesStatus] = new DefaultNundw_GroupOfParkingSpacesStatusFormat {}
  implicit lazy val Nundw_GroupOfPeopleInvolvedFormat: scalaxb.XMLFormat[nu.ndw.GroupOfPeopleInvolved] = new DefaultNundw_GroupOfPeopleInvolvedFormat {}
  implicit lazy val Nundw_GroupOfVehiclesInvolvedFormat: scalaxb.XMLFormat[nu.ndw.GroupOfVehiclesInvolved] = new DefaultNundw_GroupOfVehiclesInvolvedFormat {}
  implicit lazy val Nundw_HazardousMaterialsTypeFormat: scalaxb.XMLFormat[nu.ndw.HazardousMaterialsType] = new DefaultNundw_HazardousMaterialsTypeFormat {}
  implicit lazy val Nundw_HeaderInformationFormat: scalaxb.XMLFormat[nu.ndw.HeaderInformation] = new DefaultNundw_HeaderInformationFormat {}
  implicit lazy val Nundw_HeaviestAxleWeightCharacteristicFormat: scalaxb.XMLFormat[nu.ndw.HeaviestAxleWeightCharacteristic] = new DefaultNundw_HeaviestAxleWeightCharacteristicFormat {}
  implicit lazy val Nundw_HeightCharacteristicFormat: scalaxb.XMLFormat[nu.ndw.HeightCharacteristic] = new DefaultNundw_HeightCharacteristicFormat {}
  implicit lazy val Nundw_HeightGradeEnumFormat: scalaxb.XMLFormat[nu.ndw.HeightGradeEnum] = new DefaultNundw_HeightGradeEnumFormat {}
  implicit lazy val Nundw_HumidityFormat: scalaxb.XMLFormat[nu.ndw.Humidity] = new DefaultNundw_HumidityFormat {}
  implicit lazy val Nundw_HumidityInformationTypeFormat: scalaxb.XMLFormat[nu.ndw.HumidityInformationType] = new DefaultNundw_HumidityInformationTypeFormat {}
  implicit lazy val Nundw_ImpactFormat: scalaxb.XMLFormat[nu.ndw.Impact] = new DefaultNundw_ImpactFormat {}
  implicit lazy val Nundw_IndividualChargeFormat: scalaxb.XMLFormat[nu.ndw.IndividualCharge] = new DefaultNundw_IndividualChargeFormat {}
  implicit lazy val Nundw_IndividualVehicleDataValuesFormat: scalaxb.XMLFormat[nu.ndw.IndividualVehicleDataValues] = new DefaultNundw_IndividualVehicleDataValuesFormat {}
  implicit lazy val Nundw_InformationStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.InformationStatusEnum] = new DefaultNundw_InformationStatusEnumFormat {}
  implicit lazy val Nundw_InfrastructureDamageObstructionFormat: scalaxb.XMLFormat[nu.ndw.InfrastructureDamageObstruction] = new DefaultNundw_InfrastructureDamageObstructionFormat {}
  implicit lazy val Nundw_InfrastructureDamageTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.InfrastructureDamageTypeEnum] = new DefaultNundw_InfrastructureDamageTypeEnumFormat {}
  implicit lazy val Nundw_InjuryStatusTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.InjuryStatusTypeEnum] = new DefaultNundw_InjuryStatusTypeEnumFormat {}
  implicit lazy val Nundw_IntegerMetreDistanceValueFormat: scalaxb.XMLFormat[nu.ndw.IntegerMetreDistanceValue] = new DefaultNundw_IntegerMetreDistanceValueFormat {}
  implicit lazy val Nundw_InternationalIdentifierFormat: scalaxb.XMLFormat[nu.ndw.InternationalIdentifier] = new DefaultNundw_InternationalIdentifierFormat {}
  implicit lazy val Nundw_InterUrbanParkingSiteFormat: scalaxb.XMLFormat[nu.ndw.InterUrbanParkingSite] = new DefaultNundw_InterUrbanParkingSiteFormat {}
  implicit lazy val Nundw_InterUrbanParkingSiteLocationEnumFormat: scalaxb.XMLFormat[nu.ndw.InterUrbanParkingSiteLocationEnum] = new DefaultNundw_InterUrbanParkingSiteLocationEnumFormat {}
  implicit lazy val Nundw_InvolvementRolesEnumFormat: scalaxb.XMLFormat[nu.ndw.InvolvementRolesEnum] = new DefaultNundw_InvolvementRolesEnumFormat {}
  implicit lazy val Nundw_ItineraryFormat: scalaxb.XMLFormat[nu.ndw.Itinerary] = new DefaultNundw_ItineraryFormat {}
  implicit lazy val Nundw_ItineraryByIndexedLocationsFormat: scalaxb.XMLFormat[nu.ndw.ItineraryByIndexedLocations] = new DefaultNundw_ItineraryByIndexedLocationsFormat {}
  implicit lazy val Nundw_ItineraryByReferenceFormat: scalaxb.XMLFormat[nu.ndw.ItineraryByReference] = new DefaultNundw_ItineraryByReferenceFormat {}
  implicit lazy val Nundw_JunctionTypeFormat: scalaxb.XMLFormat[nu.ndw.JunctionType] = new DefaultNundw_JunctionTypeFormat {}
  implicit lazy val Nundw_JunctionClassificationEnumFormat: scalaxb.XMLFormat[nu.ndw.JunctionClassificationEnum] = new DefaultNundw_JunctionClassificationEnumFormat {}
  implicit lazy val Nundw_KilogramsConcentrationValueFormat: scalaxb.XMLFormat[nu.ndw.KilogramsConcentrationValue] = new DefaultNundw_KilogramsConcentrationValueFormat {}
  implicit lazy val Nundw_LABELSecurityLevelEnumFormat: scalaxb.XMLFormat[nu.ndw.LABELSecurityLevelEnum] = new DefaultNundw_LABELSecurityLevelEnumFormat {}
  implicit lazy val Nundw_LABELServiceLevelEnumFormat: scalaxb.XMLFormat[nu.ndw.LABELServiceLevelEnum] = new DefaultNundw_LABELServiceLevelEnumFormat {}
  implicit lazy val Nundw_LaneEnumFormat: scalaxb.XMLFormat[nu.ndw.LaneEnum] = new DefaultNundw_LaneEnumFormat {}
  implicit lazy val Nundw_LengthCharacteristicFormat: scalaxb.XMLFormat[nu.ndw.LengthCharacteristic] = new DefaultNundw_LengthCharacteristicFormat {}
  implicit lazy val Nundw_LifeCycleManagementFormat: scalaxb.XMLFormat[nu.ndw.LifeCycleManagement] = new DefaultNundw_LifeCycleManagementFormat {}
  implicit lazy val Nundw_LinearFormat: scalaxb.XMLFormat[nu.ndw.Linear] = new DefaultNundw_LinearFormat {}
  implicit lazy val Nundw_LinearElementableFormat: scalaxb.XMLFormat[nu.ndw.LinearElementable] = new DefaultNundw_LinearElementableFormat {}
  implicit lazy val Nundw_LinearElementFormat: scalaxb.XMLFormat[nu.ndw.LinearElement] = new DefaultNundw_LinearElementFormat {}
  implicit lazy val Nundw_LinearElementByCodeFormat: scalaxb.XMLFormat[nu.ndw.LinearElementByCode] = new DefaultNundw_LinearElementByCodeFormat {}
  implicit lazy val Nundw_LinearElementByPointsFormat: scalaxb.XMLFormat[nu.ndw.LinearElementByPoints] = new DefaultNundw_LinearElementByPointsFormat {}
  implicit lazy val Nundw_LinearElementNatureEnumFormat: scalaxb.XMLFormat[nu.ndw.LinearElementNatureEnum] = new DefaultNundw_LinearElementNatureEnumFormat {}
  implicit lazy val Nundw_LinearReferencingDirectionEnumFormat: scalaxb.XMLFormat[nu.ndw.LinearReferencingDirectionEnum] = new DefaultNundw_LinearReferencingDirectionEnumFormat {}
  implicit lazy val Nundw_LinearTrafficViewFormat: scalaxb.XMLFormat[nu.ndw.LinearTrafficView] = new DefaultNundw_LinearTrafficViewFormat {}
  implicit lazy val Nundw_LinearWithinLinearElementFormat: scalaxb.XMLFormat[nu.ndw.LinearWithinLinearElement] = new DefaultNundw_LinearWithinLinearElementFormat {}
  implicit lazy val Nundw_LoadType2EnumFormat: scalaxb.XMLFormat[nu.ndw.LoadType2Enum] = new DefaultNundw_LoadType2EnumFormat {}
  implicit lazy val Nundw_LoadTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.LoadTypeEnum] = new DefaultNundw_LoadTypeEnumFormat {}
  implicit lazy val Nundw_LocationFormat: scalaxb.XMLFormat[nu.ndw.Location] = new DefaultNundw_LocationFormat {}
  implicit lazy val Nundw_LocationByReferenceFormat: scalaxb.XMLFormat[nu.ndw.LocationByReference] = new DefaultNundw_LocationByReferenceFormat {}
  implicit lazy val Nundw_LocationCharacteristicsOverrideFormat: scalaxb.XMLFormat[nu.ndw.LocationCharacteristicsOverride] = new DefaultNundw_LocationCharacteristicsOverrideFormat {}
  implicit lazy val Nundw_LocationDescriptorEnumFormat: scalaxb.XMLFormat[nu.ndw.LocationDescriptorEnum] = new DefaultNundw_LocationDescriptorEnumFormat {}
  implicit lazy val Nundw_MaintenanceVehicleActionsEnumFormat: scalaxb.XMLFormat[nu.ndw.MaintenanceVehicleActionsEnum] = new DefaultNundw_MaintenanceVehicleActionsEnumFormat {}
  implicit lazy val Nundw_MaintenanceVehiclesFormat: scalaxb.XMLFormat[nu.ndw.MaintenanceVehicles] = new DefaultNundw_MaintenanceVehiclesFormat {}
  implicit lazy val Nundw_MaintenanceWorksFormat: scalaxb.XMLFormat[nu.ndw.MaintenanceWorks] = new DefaultNundw_MaintenanceWorksFormat {}
  implicit lazy val Nundw_ManagedCauseFormat: scalaxb.XMLFormat[nu.ndw.ManagedCause] = new DefaultNundw_ManagedCauseFormat {}
  implicit lazy val Nundw_ManagementFormat: scalaxb.XMLFormat[nu.ndw.Management] = new DefaultNundw_ManagementFormat {}
  implicit lazy val Nundw_MeansOfPaymentEnumFormat: scalaxb.XMLFormat[nu.ndw.MeansOfPaymentEnum] = new DefaultNundw_MeansOfPaymentEnumFormat {}
  implicit lazy val Nundw_MeasuredDataPublicationFormat: scalaxb.XMLFormat[nu.ndw.MeasuredDataPublication] = new DefaultNundw_MeasuredDataPublicationFormat {}
  implicit lazy val Nundw_MeasuredOrDerivedDataTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.MeasuredOrDerivedDataTypeEnum] = new DefaultNundw_MeasuredOrDerivedDataTypeEnumFormat {}
  implicit lazy val Nundw_MeasuredValueFormat: scalaxb.XMLFormat[nu.ndw.MeasuredValue] = new DefaultNundw_MeasuredValueFormat {}
  implicit lazy val Nundw_MeasurementEquipmentFaultFormat: scalaxb.XMLFormat[nu.ndw.MeasurementEquipmentFault] = new DefaultNundw_MeasurementEquipmentFaultFormat {}
  implicit lazy val Nundw_MeasurementEquipmentFaultEnumFormat: scalaxb.XMLFormat[nu.ndw.MeasurementEquipmentFaultEnum] = new DefaultNundw_MeasurementEquipmentFaultEnumFormat {}
  implicit lazy val Nundw_MeasurementSiteRecordFormat: scalaxb.XMLFormat[nu.ndw.MeasurementSiteRecord] = new DefaultNundw_MeasurementSiteRecordFormat {}
  implicit lazy val Nundw_MeasurementSiteTableFormat: scalaxb.XMLFormat[nu.ndw.MeasurementSiteTable] = new DefaultNundw_MeasurementSiteTableFormat {}
  implicit lazy val Nundw_MeasurementSiteTablePublicationFormat: scalaxb.XMLFormat[nu.ndw.MeasurementSiteTablePublication] = new DefaultNundw_MeasurementSiteTablePublicationFormat {}
  implicit lazy val Nundw_MeasurementSpecificCharacteristicsFormat: scalaxb.XMLFormat[nu.ndw.MeasurementSpecificCharacteristics] = new DefaultNundw_MeasurementSpecificCharacteristicsFormat {}
  implicit lazy val Nundw_MicrogramsConcentrationValueFormat: scalaxb.XMLFormat[nu.ndw.MicrogramsConcentrationValue] = new DefaultNundw_MicrogramsConcentrationValueFormat {}
  implicit lazy val Nundw_MobilityFormat: scalaxb.XMLFormat[nu.ndw.Mobility] = new DefaultNundw_MobilityFormat {}
  implicit lazy val Nundw_MobilityEnumFormat: scalaxb.XMLFormat[nu.ndw.MobilityEnum] = new DefaultNundw_MobilityEnumFormat {}
  implicit lazy val Nundw_MonthOfYearEnumFormat: scalaxb.XMLFormat[nu.ndw.MonthOfYearEnum] = new DefaultNundw_MonthOfYearEnumFormat {}
  implicit lazy val Nundw_ValuesFormat: scalaxb.XMLFormat[nu.ndw.Values] = new DefaultNundw_ValuesFormat {}
  implicit lazy val Nundw_MultilingualStringFormat: scalaxb.XMLFormat[nu.ndw.MultilingualString] = new DefaultNundw_MultilingualStringFormat {}
  implicit lazy val Nundw_MultilingualStringValueFormat: scalaxb.XMLFormat[nu.ndw.MultilingualStringValue] = new DefaultNundw_MultilingualStringValueFormat {}
  implicit lazy val Nundw_NamedAreaFormat: scalaxb.XMLFormat[nu.ndw.NamedArea] = new DefaultNundw_NamedAreaFormat {}
  implicit lazy val Nundw_NetworkLocationFormat: scalaxb.XMLFormat[nu.ndw.NetworkLocation] = new DefaultNundw_NetworkLocationFormat {}
  implicit lazy val Nundw_NetworkManagementFormat: scalaxb.XMLFormat[nu.ndw.NetworkManagement] = new DefaultNundw_NetworkManagementFormat {}
  implicit lazy val Nundw_NonManagedCauseFormat: scalaxb.XMLFormat[nu.ndw.NonManagedCause] = new DefaultNundw_NonManagedCauseFormat {}
  implicit lazy val Nundw_NonOrderedLocationGroupByListFormat: scalaxb.XMLFormat[nu.ndw.NonOrderedLocationGroupByList] = new DefaultNundw_NonOrderedLocationGroupByListFormat {}
  implicit lazy val Nundw_NonOrderedLocationGroupByReferenceFormat: scalaxb.XMLFormat[nu.ndw.NonOrderedLocationGroupByReference] = new DefaultNundw_NonOrderedLocationGroupByReferenceFormat {}
  implicit lazy val Nundw_NonOrderedLocationsFormat: scalaxb.XMLFormat[nu.ndw.NonOrderedLocations] = new DefaultNundw_NonOrderedLocationsFormat {}
  implicit lazy val Nundw_NonRoadEventInformationFormat: scalaxb.XMLFormat[nu.ndw.NonRoadEventInformation] = new DefaultNundw_NonRoadEventInformationFormat {}
  implicit lazy val Nundw_NonWeatherRelatedRoadConditionsFormat: scalaxb.XMLFormat[nu.ndw.NonWeatherRelatedRoadConditions] = new DefaultNundw_NonWeatherRelatedRoadConditionsFormat {}
  implicit lazy val Nundw_NonWeatherRelatedRoadConditionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.NonWeatherRelatedRoadConditionTypeEnum] = new DefaultNundw_NonWeatherRelatedRoadConditionTypeEnumFormat {}
  implicit lazy val Nundw_NumberOfAxlesCharacteristicFormat: scalaxb.XMLFormat[nu.ndw.NumberOfAxlesCharacteristic] = new DefaultNundw_NumberOfAxlesCharacteristicFormat {}
  implicit lazy val Nundw_ObstructionTypeFormat: scalaxb.XMLFormat[nu.ndw.ObstructionType] = new DefaultNundw_ObstructionTypeFormat {}
  implicit lazy val Nundw_ObstructionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.ObstructionTypeEnum] = new DefaultNundw_ObstructionTypeEnumFormat {}
  implicit lazy val Nundw_OccupancyChangeValueFormat: scalaxb.XMLFormat[nu.ndw.OccupancyChangeValue] = new DefaultNundw_OccupancyChangeValueFormat {}
  implicit lazy val Nundw_OccupancyDetectionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.OccupancyDetectionTypeEnum] = new DefaultNundw_OccupancyDetectionTypeEnumFormat {}
  implicit lazy val Nundw_OffsetDistanceFormat: scalaxb.XMLFormat[nu.ndw.OffsetDistance] = new DefaultNundw_OffsetDistanceFormat {}
  implicit lazy val Nundw_OpeningStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.OpeningStatusEnum] = new DefaultNundw_OpeningStatusEnumFormat {}
  implicit lazy val Nundw_OpeningTimesFormat: scalaxb.XMLFormat[nu.ndw.OpeningTimes] = new DefaultNundw_OpeningTimesFormat {}
  implicit lazy val Nundw_OpenlrAreaLocationReferencableFormat: scalaxb.XMLFormat[nu.ndw.OpenlrAreaLocationReferencable] = new DefaultNundw_OpenlrAreaLocationReferencableFormat {}
  implicit lazy val Nundw_OpenlrAreaLocationReferenceFormat: scalaxb.XMLFormat[nu.ndw.OpenlrAreaLocationReference] = new DefaultNundw_OpenlrAreaLocationReferenceFormat {}
  implicit lazy val Nundw_OpenlrBaseLocationReferencePointFormat: scalaxb.XMLFormat[nu.ndw.OpenlrBaseLocationReferencePoint] = new DefaultNundw_OpenlrBaseLocationReferencePointFormat {}
  implicit lazy val Nundw_OpenlrBasePointLocationFormat: scalaxb.XMLFormat[nu.ndw.OpenlrBasePointLocation] = new DefaultNundw_OpenlrBasePointLocationFormat {}
  implicit lazy val Nundw_OpenlrCircleLocationReferenceFormat: scalaxb.XMLFormat[nu.ndw.OpenlrCircleLocationReference] = new DefaultNundw_OpenlrCircleLocationReferenceFormat {}
  implicit lazy val Nundw_OpenlrClosedLineLocationReferenceFormat: scalaxb.XMLFormat[nu.ndw.OpenlrClosedLineLocationReference] = new DefaultNundw_OpenlrClosedLineLocationReferenceFormat {}
  implicit lazy val Nundw_OpenlrExtendedAreaFormat: scalaxb.XMLFormat[nu.ndw.OpenlrExtendedArea] = new DefaultNundw_OpenlrExtendedAreaFormat {}
  implicit lazy val Nundw_OpenlrExtendedLinearFormat: scalaxb.XMLFormat[nu.ndw.OpenlrExtendedLinear] = new DefaultNundw_OpenlrExtendedLinearFormat {}
  implicit lazy val Nundw_OpenlrExtendedPointFormat: scalaxb.XMLFormat[nu.ndw.OpenlrExtendedPoint] = new DefaultNundw_OpenlrExtendedPointFormat {}
  implicit lazy val Nundw_OpenlrFormOfWayEnumFormat: scalaxb.XMLFormat[nu.ndw.OpenlrFormOfWayEnum] = new DefaultNundw_OpenlrFormOfWayEnumFormat {}
  implicit lazy val Nundw_OpenlrFunctionalRoadClassEnumFormat: scalaxb.XMLFormat[nu.ndw.OpenlrFunctionalRoadClassEnum] = new DefaultNundw_OpenlrFunctionalRoadClassEnumFormat {}
  implicit lazy val Nundw_OpenlrGeoCoordinateFormat: scalaxb.XMLFormat[nu.ndw.OpenlrGeoCoordinate] = new DefaultNundw_OpenlrGeoCoordinateFormat {}
  implicit lazy val Nundw_OpenlrGridAttributesFormat: scalaxb.XMLFormat[nu.ndw.OpenlrGridAttributes] = new DefaultNundw_OpenlrGridAttributesFormat {}
  implicit lazy val Nundw_OpenlrGridLocationReferenceFormat: scalaxb.XMLFormat[nu.ndw.OpenlrGridLocationReference] = new DefaultNundw_OpenlrGridLocationReferenceFormat {}
  implicit lazy val Nundw_OpenlrLastLocationReferencePointFormat: scalaxb.XMLFormat[nu.ndw.OpenlrLastLocationReferencePoint] = new DefaultNundw_OpenlrLastLocationReferencePointFormat {}
  implicit lazy val Nundw_OpenlrLineAttributesFormat: scalaxb.XMLFormat[nu.ndw.OpenlrLineAttributes] = new DefaultNundw_OpenlrLineAttributesFormat {}
  implicit lazy val Nundw_OpenlrLineLocationReferenceFormat: scalaxb.XMLFormat[nu.ndw.OpenlrLineLocationReference] = new DefaultNundw_OpenlrLineLocationReferenceFormat {}
  implicit lazy val Nundw_OpenlrLocationReferencePointFormat: scalaxb.XMLFormat[nu.ndw.OpenlrLocationReferencePoint] = new DefaultNundw_OpenlrLocationReferencePointFormat {}
  implicit lazy val Nundw_OpenlrOffsetsFormat: scalaxb.XMLFormat[nu.ndw.OpenlrOffsets] = new DefaultNundw_OpenlrOffsetsFormat {}
  implicit lazy val Nundw_OpenlrOrientationEnumFormat: scalaxb.XMLFormat[nu.ndw.OpenlrOrientationEnum] = new DefaultNundw_OpenlrOrientationEnumFormat {}
  implicit lazy val Nundw_OpenlrPathAttributesFormat: scalaxb.XMLFormat[nu.ndw.OpenlrPathAttributes] = new DefaultNundw_OpenlrPathAttributesFormat {}
  implicit lazy val Nundw_OpenlrPointAlongLineFormat: scalaxb.XMLFormat[nu.ndw.OpenlrPointAlongLine] = new DefaultNundw_OpenlrPointAlongLineFormat {}
  implicit lazy val Nundw_OpenlrPointLocationReferenceFormat: scalaxb.XMLFormat[nu.ndw.OpenlrPointLocationReference] = new DefaultNundw_OpenlrPointLocationReferenceFormat {}
  implicit lazy val Nundw_OpenlrPoiWithAccessPointFormat: scalaxb.XMLFormat[nu.ndw.OpenlrPoiWithAccessPoint] = new DefaultNundw_OpenlrPoiWithAccessPointFormat {}
  implicit lazy val Nundw_OpenlrPolygonCornersFormat: scalaxb.XMLFormat[nu.ndw.OpenlrPolygonCorners] = new DefaultNundw_OpenlrPolygonCornersFormat {}
  implicit lazy val Nundw_OpenlrPolygonLocationReferenceFormat: scalaxb.XMLFormat[nu.ndw.OpenlrPolygonLocationReference] = new DefaultNundw_OpenlrPolygonLocationReferenceFormat {}
  implicit lazy val Nundw_OpenlrRectangleFormat: scalaxb.XMLFormat[nu.ndw.OpenlrRectangle] = new DefaultNundw_OpenlrRectangleFormat {}
  implicit lazy val Nundw_OpenlrRectangleLocationReferenceFormat: scalaxb.XMLFormat[nu.ndw.OpenlrRectangleLocationReference] = new DefaultNundw_OpenlrRectangleLocationReferenceFormat {}
  implicit lazy val Nundw_OpenlrSideOfRoadEnumFormat: scalaxb.XMLFormat[nu.ndw.OpenlrSideOfRoadEnum] = new DefaultNundw_OpenlrSideOfRoadEnumFormat {}
  implicit lazy val Nundw_OperatingModeEnumFormat: scalaxb.XMLFormat[nu.ndw.OperatingModeEnum] = new DefaultNundw_OperatingModeEnumFormat {}
  implicit lazy val Nundw_OperationStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.OperationStatusEnum] = new DefaultNundw_OperationStatusEnumFormat {}
  implicit lazy val Nundw_OperatorActionableFormat: scalaxb.XMLFormat[nu.ndw.OperatorActionable] = new DefaultNundw_OperatorActionableFormat {}
  implicit lazy val Nundw_OperatorActionFormat: scalaxb.XMLFormat[nu.ndw.OperatorAction] = new DefaultNundw_OperatorActionFormat {}
  implicit lazy val Nundw_OperatorActionOriginEnumFormat: scalaxb.XMLFormat[nu.ndw.OperatorActionOriginEnum] = new DefaultNundw_OperatorActionOriginEnumFormat {}
  implicit lazy val Nundw_OperatorActionStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.OperatorActionStatusEnum] = new DefaultNundw_OperatorActionStatusEnumFormat {}
  implicit lazy val Nundw_OverallPeriodFormat: scalaxb.XMLFormat[nu.ndw.OverallPeriod] = new DefaultNundw_OverallPeriodFormat {}
  implicit lazy val Nundw_OwnershipTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.OwnershipTypeEnum] = new DefaultNundw_OwnershipTypeEnumFormat {}
  implicit lazy val Nundw_ParkingAccessFormat: scalaxb.XMLFormat[nu.ndw.ParkingAccess] = new DefaultNundw_ParkingAccessFormat {}
  implicit lazy val Nundw_ParkingAccessStatusFormat: scalaxb.XMLFormat[nu.ndw.ParkingAccessStatus] = new DefaultNundw_ParkingAccessStatusFormat {}
  implicit lazy val Nundw_ParkingAssignmentFormat: scalaxb.XMLFormat[nu.ndw.ParkingAssignment] = new DefaultNundw_ParkingAssignmentFormat {}
  implicit lazy val Nundw_ParkingConditionsEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingConditionsEnum] = new DefaultNundw_ParkingConditionsEnumFormat {}
  implicit lazy val Nundw_ParkingDurationEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingDurationEnum] = new DefaultNundw_ParkingDurationEnumFormat {}
  implicit lazy val Nundw_ParkingEquipmentOrServiceFacilityFormat: scalaxb.XMLFormat[nu.ndw.ParkingEquipmentOrServiceFacility] = new DefaultNundw_ParkingEquipmentOrServiceFacilityFormat {}
  implicit lazy val Nundw_ParkingEquipmentOrServiceFacilityStatusFormat: scalaxb.XMLFormat[nu.ndw.ParkingEquipmentOrServiceFacilityStatus] = new DefaultNundw_ParkingEquipmentOrServiceFacilityStatusFormat {}
  implicit lazy val Nundw_ParkingFaultEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingFaultEnum] = new DefaultNundw_ParkingFaultEnumFormat {}
  implicit lazy val Nundw_ParkingLayoutEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingLayoutEnum] = new DefaultNundw_ParkingLayoutEnumFormat {}
  implicit lazy val Nundw_ParkingModeEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingModeEnum] = new DefaultNundw_ParkingModeEnumFormat {}
  implicit lazy val Nundw_ParkingOccupancyableFormat: scalaxb.XMLFormat[nu.ndw.ParkingOccupancyable] = new DefaultNundw_ParkingOccupancyableFormat {}
  implicit lazy val Nundw_ParkingOccupancyFormat: scalaxb.XMLFormat[nu.ndw.ParkingOccupancy] = new DefaultNundw_ParkingOccupancyFormat {}
  implicit lazy val Nundw_ParkingOccupancyEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingOccupancyEnum] = new DefaultNundw_ParkingOccupancyEnumFormat {}
  implicit lazy val Nundw_ParkingOccupancyTrendEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingOccupancyTrendEnum] = new DefaultNundw_ParkingOccupancyTrendEnumFormat {}
  implicit lazy val Nundw_ParkingPaymentModeEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingPaymentModeEnum] = new DefaultNundw_ParkingPaymentModeEnumFormat {}
  implicit lazy val Nundw_ParkingPermitFormat: scalaxb.XMLFormat[nu.ndw.ParkingPermit] = new DefaultNundw_ParkingPermitFormat {}
  implicit lazy val Nundw_ParkingRecordFormat: scalaxb.XMLFormat[nu.ndw.ParkingRecord] = new DefaultNundw_ParkingRecordFormat {}
  implicit lazy val Nundw_ParkingRecordStatusFormat: scalaxb.XMLFormat[nu.ndw.ParkingRecordStatus] = new DefaultNundw_ParkingRecordStatusFormat {}
  implicit lazy val Nundw_ParkingRouteFormat: scalaxb.XMLFormat[nu.ndw.ParkingRoute] = new DefaultNundw_ParkingRouteFormat {}
  implicit lazy val Nundw_ParkingRouteByReferenceFormat: scalaxb.XMLFormat[nu.ndw.ParkingRouteByReference] = new DefaultNundw_ParkingRouteByReferenceFormat {}
  implicit lazy val Nundw_ParkingRouteDetailsFormat: scalaxb.XMLFormat[nu.ndw.ParkingRouteDetails] = new DefaultNundw_ParkingRouteDetailsFormat {}
  implicit lazy val Nundw_ParkingRouteDirectionEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingRouteDirectionEnum] = new DefaultNundw_ParkingRouteDirectionEnumFormat {}
  implicit lazy val Nundw_ParkingRouteStatusFormat: scalaxb.XMLFormat[nu.ndw.ParkingRouteStatus] = new DefaultNundw_ParkingRouteStatusFormat {}
  implicit lazy val Nundw_ParkingRouteTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingRouteTypeEnum] = new DefaultNundw_ParkingRouteTypeEnumFormat {}
  implicit lazy val Nundw_ParkingSecurityEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingSecurityEnum] = new DefaultNundw_ParkingSecurityEnumFormat {}
  implicit lazy val Nundw_ParkingSiteFormat: scalaxb.XMLFormat[nu.ndw.ParkingSite] = new DefaultNundw_ParkingSiteFormat {}
  implicit lazy val Nundw_ParkingSiteOvercrowdingStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingSiteOvercrowdingStatusEnum] = new DefaultNundw_ParkingSiteOvercrowdingStatusEnumFormat {}
  implicit lazy val Nundw_ParkingSiteStatusFormat: scalaxb.XMLFormat[nu.ndw.ParkingSiteStatus] = new DefaultNundw_ParkingSiteStatusFormat {}
  implicit lazy val Nundw_ParkingSiteStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingSiteStatusEnum] = new DefaultNundw_ParkingSiteStatusEnumFormat {}
  implicit lazy val Nundw_ParkingSpaceFormat: scalaxb.XMLFormat[nu.ndw.ParkingSpace] = new DefaultNundw_ParkingSpaceFormat {}
  implicit lazy val Nundw_ParkingSpaceAccessibilityEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingSpaceAccessibilityEnum] = new DefaultNundw_ParkingSpaceAccessibilityEnumFormat {}
  implicit lazy val Nundw_ParkingSpaceBasicsFormat: scalaxb.XMLFormat[nu.ndw.ParkingSpaceBasics] = new DefaultNundw_ParkingSpaceBasicsFormat {}
  implicit lazy val Nundw_ParkingSpacePhysicsEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingSpacePhysicsEnum] = new DefaultNundw_ParkingSpacePhysicsEnumFormat {}
  implicit lazy val Nundw_ParkingSpaceStatusFormat: scalaxb.XMLFormat[nu.ndw.ParkingSpaceStatus] = new DefaultNundw_ParkingSpaceStatusFormat {}
  implicit lazy val Nundw_ParkingSpecialLocationEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingSpecialLocationEnum] = new DefaultNundw_ParkingSpecialLocationEnumFormat {}
  implicit lazy val Nundw_ParkingStandardsAndSecurityFormat: scalaxb.XMLFormat[nu.ndw.ParkingStandardsAndSecurity] = new DefaultNundw_ParkingStandardsAndSecurityFormat {}
  implicit lazy val Nundw_ParkingStatusColourMappingFormat: scalaxb.XMLFormat[nu.ndw.ParkingStatusColourMapping] = new DefaultNundw_ParkingStatusColourMappingFormat {}
  implicit lazy val Nundw_ParkingStatusPublicationFormat: scalaxb.XMLFormat[nu.ndw.ParkingStatusPublication] = new DefaultNundw_ParkingStatusPublicationFormat {}
  implicit lazy val Nundw_ParkingStatusValidityFormat: scalaxb.XMLFormat[nu.ndw.ParkingStatusValidity] = new DefaultNundw_ParkingStatusValidityFormat {}
  implicit lazy val Nundw_ParkingSupervisionEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingSupervisionEnum] = new DefaultNundw_ParkingSupervisionEnumFormat {}
  implicit lazy val Nundw_ParkingTableFormat: scalaxb.XMLFormat[nu.ndw.ParkingTable] = new DefaultNundw_ParkingTableFormat {}
  implicit lazy val Nundw_ParkingTablePublicationFormat: scalaxb.XMLFormat[nu.ndw.ParkingTablePublication] = new DefaultNundw_ParkingTablePublicationFormat {}
  implicit lazy val Nundw_ParkingThresholdsFormat: scalaxb.XMLFormat[nu.ndw.ParkingThresholds] = new DefaultNundw_ParkingThresholdsFormat {}
  implicit lazy val Nundw_ParkingTypeOfGroupFormat: scalaxb.XMLFormat[nu.ndw.ParkingTypeOfGroup] = new DefaultNundw_ParkingTypeOfGroupFormat {}
  implicit lazy val Nundw_ParkingUsageScenarioFormat: scalaxb.XMLFormat[nu.ndw.ParkingUsageScenario] = new DefaultNundw_ParkingUsageScenarioFormat {}
  implicit lazy val Nundw_ParkingUsageScenarioEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingUsageScenarioEnum] = new DefaultNundw_ParkingUsageScenarioEnumFormat {}
  implicit lazy val Nundw_ParkingUsageScenarioStatusFormat: scalaxb.XMLFormat[nu.ndw.ParkingUsageScenarioStatus] = new DefaultNundw_ParkingUsageScenarioStatusFormat {}
  implicit lazy val Nundw_ParkingVacantSpacesEnumFormat: scalaxb.XMLFormat[nu.ndw.ParkingVacantSpacesEnum] = new DefaultNundw_ParkingVacantSpacesEnumFormat {}
  implicit lazy val Nundw_ParkingVehicleFormat: scalaxb.XMLFormat[nu.ndw.ParkingVehicle] = new DefaultNundw_ParkingVehicleFormat {}
  implicit lazy val Nundw_ParkingVehiclesPublicationFormat: scalaxb.XMLFormat[nu.ndw.ParkingVehiclesPublication] = new DefaultNundw_ParkingVehiclesPublicationFormat {}
  implicit lazy val Nundw_ParkingVMSFormat: scalaxb.XMLFormat[nu.ndw.ParkingVMS] = new DefaultNundw_ParkingVMSFormat {}
  implicit lazy val Nundw_PayloadPublicationFormat: scalaxb.XMLFormat[nu.ndw.PayloadPublication] = new DefaultNundw_PayloadPublicationFormat {}
  implicit lazy val Nundw_PaymentCardBrandsEnumFormat: scalaxb.XMLFormat[nu.ndw.PaymentCardBrandsEnum] = new DefaultNundw_PaymentCardBrandsEnumFormat {}
  implicit lazy val Nundw_PaymentCardTypesEnumFormat: scalaxb.XMLFormat[nu.ndw.PaymentCardTypesEnum] = new DefaultNundw_PaymentCardTypesEnumFormat {}
  implicit lazy val Nundw_PcuFlowValueFormat: scalaxb.XMLFormat[nu.ndw.PcuFlowValue] = new DefaultNundw_PcuFlowValueFormat {}
  implicit lazy val Nundw_PercentageDistanceAlongLinearElementFormat: scalaxb.XMLFormat[nu.ndw.PercentageDistanceAlongLinearElement] = new DefaultNundw_PercentageDistanceAlongLinearElementFormat {}
  implicit lazy val Nundw_PercentageValueFormat: scalaxb.XMLFormat[nu.ndw.PercentageValue] = new DefaultNundw_PercentageValueFormat {}
  implicit lazy val Nundw_PeriodFormat: scalaxb.XMLFormat[nu.ndw.Period] = new DefaultNundw_PeriodFormat {}
  implicit lazy val Nundw_PeriodExtendedFormat: scalaxb.XMLFormat[nu.ndw.PeriodExtended] = new DefaultNundw_PeriodExtendedFormat {}
  implicit lazy val Nundw_PermitsAndProhibitionsFormat: scalaxb.XMLFormat[nu.ndw.PermitsAndProhibitions] = new DefaultNundw_PermitsAndProhibitionsFormat {}
  implicit lazy val Nundw_PermitTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.PermitTypeEnum] = new DefaultNundw_PermitTypeEnumFormat {}
  implicit lazy val Nundw_PersonCategoryEnumFormat: scalaxb.XMLFormat[nu.ndw.PersonCategoryEnum] = new DefaultNundw_PersonCategoryEnumFormat {}
  implicit lazy val Nundw_PhysicalMountingEnumFormat: scalaxb.XMLFormat[nu.ndw.PhysicalMountingEnum] = new DefaultNundw_PhysicalMountingEnumFormat {}
  implicit lazy val Nundw_PictogramDisplayAreaSettingsFormat: scalaxb.XMLFormat[nu.ndw.PictogramDisplayAreaSettings] = new DefaultNundw_PictogramDisplayAreaSettingsFormat {}
  implicit lazy val Nundw_PlacesEnumFormat: scalaxb.XMLFormat[nu.ndw.PlacesEnum] = new DefaultNundw_PlacesEnumFormat {}
  implicit lazy val Nundw_PointFormat: scalaxb.XMLFormat[nu.ndw.Point] = new DefaultNundw_PointFormat {}
  implicit lazy val Nundw_PointAlongLinearElementFormat: scalaxb.XMLFormat[nu.ndw.PointAlongLinearElement] = new DefaultNundw_PointAlongLinearElementFormat {}
  implicit lazy val Nundw_PointByCoordinatesFormat: scalaxb.XMLFormat[nu.ndw.PointByCoordinates] = new DefaultNundw_PointByCoordinatesFormat {}
  implicit lazy val Nundw_PointCoordinatesFormat: scalaxb.XMLFormat[nu.ndw.PointCoordinates] = new DefaultNundw_PointCoordinatesFormat {}
  implicit lazy val Nundw_PointDestinationFormat: scalaxb.XMLFormat[nu.ndw.PointDestination] = new DefaultNundw_PointDestinationFormat {}
  implicit lazy val Nundw_PointExtendedFormat: scalaxb.XMLFormat[nu.ndw.PointExtended] = new DefaultNundw_PointExtendedFormat {}
  implicit lazy val Nundw_PollutantTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.PollutantTypeEnum] = new DefaultNundw_PollutantTypeEnumFormat {}
  implicit lazy val Nundw_PollutionTypeFormat: scalaxb.XMLFormat[nu.ndw.PollutionType] = new DefaultNundw_PollutionTypeFormat {}
  implicit lazy val Nundw_PollutionInformationTypeFormat: scalaxb.XMLFormat[nu.ndw.PollutionInformationType] = new DefaultNundw_PollutionInformationTypeFormat {}
  implicit lazy val Nundw_PolygonAreaFormat: scalaxb.XMLFormat[nu.ndw.PolygonArea] = new DefaultNundw_PolygonAreaFormat {}
  implicit lazy val Nundw_PoorEnvironmentConditionsFormat: scalaxb.XMLFormat[nu.ndw.PoorEnvironmentConditions] = new DefaultNundw_PoorEnvironmentConditionsFormat {}
  implicit lazy val Nundw_PoorEnvironmentTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.PoorEnvironmentTypeEnum] = new DefaultNundw_PoorEnvironmentTypeEnumFormat {}
  implicit lazy val Nundw_PositionAbsoluteEnumFormat: scalaxb.XMLFormat[nu.ndw.PositionAbsoluteEnum] = new DefaultNundw_PositionAbsoluteEnumFormat {}
  implicit lazy val Nundw_PositionRelativeEnumFormat: scalaxb.XMLFormat[nu.ndw.PositionRelativeEnum] = new DefaultNundw_PositionRelativeEnumFormat {}
  implicit lazy val Nundw_PrecipitationDetailFormat: scalaxb.XMLFormat[nu.ndw.PrecipitationDetail] = new DefaultNundw_PrecipitationDetailFormat {}
  implicit lazy val Nundw_PrecipitationInformationFormat: scalaxb.XMLFormat[nu.ndw.PrecipitationInformation] = new DefaultNundw_PrecipitationInformationFormat {}
  implicit lazy val Nundw_PrecipitationIntensityValueFormat: scalaxb.XMLFormat[nu.ndw.PrecipitationIntensityValue] = new DefaultNundw_PrecipitationIntensityValueFormat {}
  implicit lazy val Nundw_PrecipitationTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.PrecipitationTypeEnum] = new DefaultNundw_PrecipitationTypeEnumFormat {}
  implicit lazy val Nundw_PredefinedItineraryFormat: scalaxb.XMLFormat[nu.ndw.PredefinedItinerary] = new DefaultNundw_PredefinedItineraryFormat {}
  implicit lazy val Nundw_PredefinedLocationFormat: scalaxb.XMLFormat[nu.ndw.PredefinedLocation] = new DefaultNundw_PredefinedLocationFormat {}
  implicit lazy val Nundw_PredefinedLocationContainerFormat: scalaxb.XMLFormat[nu.ndw.PredefinedLocationContainer] = new DefaultNundw_PredefinedLocationContainerFormat {}
  implicit lazy val Nundw_PredefinedLocationsPublicationFormat: scalaxb.XMLFormat[nu.ndw.PredefinedLocationsPublication] = new DefaultNundw_PredefinedLocationsPublicationFormat {}
  implicit lazy val Nundw_PredefinedNonOrderedLocationGroupFormat: scalaxb.XMLFormat[nu.ndw.PredefinedNonOrderedLocationGroup] = new DefaultNundw_PredefinedNonOrderedLocationGroupFormat {}
  implicit lazy val Nundw_ProbabilityOfOccurrenceEnumFormat: scalaxb.XMLFormat[nu.ndw.ProbabilityOfOccurrenceEnum] = new DefaultNundw_ProbabilityOfOccurrenceEnumFormat {}
  implicit lazy val Nundw_PublicEventFormat: scalaxb.XMLFormat[nu.ndw.PublicEvent] = new DefaultNundw_PublicEventFormat {}
  implicit lazy val Nundw_PublicEventType2EnumFormat: scalaxb.XMLFormat[nu.ndw.PublicEventType2Enum] = new DefaultNundw_PublicEventType2EnumFormat {}
  implicit lazy val Nundw_PublicEventTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.PublicEventTypeEnum] = new DefaultNundw_PublicEventTypeEnumFormat {}
  implicit lazy val Nundw_PublicHolidayTypeFormat: scalaxb.XMLFormat[nu.ndw.PublicHolidayType] = new DefaultNundw_PublicHolidayTypeFormat {}
  implicit lazy val Nundw_PublicHolidayTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.PublicHolidayTypeEnum] = new DefaultNundw_PublicHolidayTypeEnumFormat {}
  implicit lazy val Nundw_ReferencableFormat: scalaxb.XMLFormat[nu.ndw.Referencable] = new DefaultNundw_ReferencableFormat {}
  implicit lazy val Nundw_ReferenceFormat: scalaxb.XMLFormat[nu.ndw.Reference] = new DefaultNundw_ReferenceFormat {}
  implicit lazy val Nundw_ReferenceSettingsFormat: scalaxb.XMLFormat[nu.ndw.ReferenceSettings] = new DefaultNundw_ReferenceSettingsFormat {}
  implicit lazy val Nundw_ReferentFormat: scalaxb.XMLFormat[nu.ndw.Referent] = new DefaultNundw_ReferentFormat {}
  implicit lazy val Nundw_ReferentTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.ReferentTypeEnum] = new DefaultNundw_ReferentTypeEnumFormat {}
  implicit lazy val Nundw_RegulationEnumFormat: scalaxb.XMLFormat[nu.ndw.RegulationEnum] = new DefaultNundw_RegulationEnumFormat {}
  implicit lazy val Nundw_RelativeTrafficFlowEnumFormat: scalaxb.XMLFormat[nu.ndw.RelativeTrafficFlowEnum] = new DefaultNundw_RelativeTrafficFlowEnumFormat {}
  implicit lazy val Nundw_RequestTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.RequestTypeEnum] = new DefaultNundw_RequestTypeEnumFormat {}
  implicit lazy val Nundw_ReroutingManagementFormat: scalaxb.XMLFormat[nu.ndw.ReroutingManagement] = new DefaultNundw_ReroutingManagementFormat {}
  implicit lazy val Nundw_ReroutingManagementTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.ReroutingManagementTypeEnum] = new DefaultNundw_ReroutingManagementTypeEnumFormat {}
  implicit lazy val Nundw_ReservationTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.ReservationTypeEnum] = new DefaultNundw_ReservationTypeEnumFormat {}
  implicit lazy val Nundw_ResponseEnumFormat: scalaxb.XMLFormat[nu.ndw.ResponseEnum] = new DefaultNundw_ResponseEnumFormat {}
  implicit lazy val Nundw_RestAreaActivityEnumFormat: scalaxb.XMLFormat[nu.ndw.RestAreaActivityEnum] = new DefaultNundw_RestAreaActivityEnumFormat {}
  implicit lazy val Nundw_RGBColourFormat: scalaxb.XMLFormat[nu.ndw.RGBColour] = new DefaultNundw_RGBColourFormat {}
  implicit lazy val Nundw_RoadableFormat: scalaxb.XMLFormat[nu.ndw.Roadable] = new DefaultNundw_RoadableFormat {}
  implicit lazy val Nundw_RoadTypeFormat: scalaxb.XMLFormat[nu.ndw.RoadType] = new DefaultNundw_RoadTypeFormat {}
  implicit lazy val Nundw_RoadConditionsFormat: scalaxb.XMLFormat[nu.ndw.RoadConditions] = new DefaultNundw_RoadConditionsFormat {}
  implicit lazy val Nundw_RoadMaintenanceTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.RoadMaintenanceTypeEnum] = new DefaultNundw_RoadMaintenanceTypeEnumFormat {}
  implicit lazy val Nundw_RoadNodeFormat: scalaxb.XMLFormat[nu.ndw.RoadNode] = new DefaultNundw_RoadNodeFormat {}
  implicit lazy val Nundw_RoadOperatorServiceDisruptionFormat: scalaxb.XMLFormat[nu.ndw.RoadOperatorServiceDisruption] = new DefaultNundw_RoadOperatorServiceDisruptionFormat {}
  implicit lazy val Nundw_RoadOperatorServiceDisruptionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.RoadOperatorServiceDisruptionTypeEnum] = new DefaultNundw_RoadOperatorServiceDisruptionTypeEnumFormat {}
  implicit lazy val Nundw_RoadOrCarriagewayOrLaneManagementFormat: scalaxb.XMLFormat[nu.ndw.RoadOrCarriagewayOrLaneManagement] = new DefaultNundw_RoadOrCarriagewayOrLaneManagementFormat {}
  implicit lazy val Nundw_RoadOrCarriagewayOrLaneManagementTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.RoadOrCarriagewayOrLaneManagementTypeEnum] = new DefaultNundw_RoadOrCarriagewayOrLaneManagementTypeEnumFormat {}
  implicit lazy val Nundw_RoadsideAssistanceFormat: scalaxb.XMLFormat[nu.ndw.RoadsideAssistance] = new DefaultNundw_RoadsideAssistanceFormat {}
  implicit lazy val Nundw_RoadsideAssistanceTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.RoadsideAssistanceTypeEnum] = new DefaultNundw_RoadsideAssistanceTypeEnumFormat {}
  implicit lazy val Nundw_RoadsideServiceDisruptionFormat: scalaxb.XMLFormat[nu.ndw.RoadsideServiceDisruption] = new DefaultNundw_RoadsideServiceDisruptionFormat {}
  implicit lazy val Nundw_RoadsideServiceDisruptionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.RoadsideServiceDisruptionTypeEnum] = new DefaultNundw_RoadsideServiceDisruptionTypeEnumFormat {}
  implicit lazy val Nundw_RoadSurfaceConditionInformationTypeFormat: scalaxb.XMLFormat[nu.ndw.RoadSurfaceConditionInformationType] = new DefaultNundw_RoadSurfaceConditionInformationTypeFormat {}
  implicit lazy val Nundw_RoadSurfaceConditionMeasurementsFormat: scalaxb.XMLFormat[nu.ndw.RoadSurfaceConditionMeasurements] = new DefaultNundw_RoadSurfaceConditionMeasurementsFormat {}
  implicit lazy val Nundw_RoadTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.RoadTypeEnum] = new DefaultNundw_RoadTypeEnumFormat {}
  implicit lazy val Nundw_RoadworksTypeFormat: scalaxb.XMLFormat[nu.ndw.RoadworksType] = new DefaultNundw_RoadworksTypeFormat {}
  implicit lazy val Nundw_RoadworksDurationEnumFormat: scalaxb.XMLFormat[nu.ndw.RoadworksDurationEnum] = new DefaultNundw_RoadworksDurationEnumFormat {}
  implicit lazy val Nundw_RoadworksScaleEnumFormat: scalaxb.XMLFormat[nu.ndw.RoadworksScaleEnum] = new DefaultNundw_RoadworksScaleEnumFormat {}
  implicit lazy val Nundw_ServiceFacilityFormat: scalaxb.XMLFormat[nu.ndw.ServiceFacility] = new DefaultNundw_ServiceFacilityFormat {}
  implicit lazy val Nundw_ServiceFacilityTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.ServiceFacilityTypeEnum] = new DefaultNundw_ServiceFacilityTypeEnumFormat {}
  implicit lazy val Nundw_SeverityEnumFormat: scalaxb.XMLFormat[nu.ndw.SeverityEnum] = new DefaultNundw_SeverityEnumFormat {}
  implicit lazy val Nundw_SignSettingFormat: scalaxb.XMLFormat[nu.ndw.SignSetting] = new DefaultNundw_SignSettingFormat {}
  implicit lazy val Nundw_SiteMeasurementsFormat: scalaxb.XMLFormat[nu.ndw.SiteMeasurements] = new DefaultNundw_SiteMeasurementsFormat {}
  implicit lazy val Nundw_SituationTypeFormat: scalaxb.XMLFormat[nu.ndw.SituationType] = new DefaultNundw_SituationTypeFormat {}
  implicit lazy val Nundw_SituationPublicationFormat: scalaxb.XMLFormat[nu.ndw.SituationPublication] = new DefaultNundw_SituationPublicationFormat {}
  implicit lazy val Nundw_SituationRecordFormat: scalaxb.XMLFormat[nu.ndw.SituationRecord] = new DefaultNundw_SituationRecordFormat {}
  implicit lazy val Nundw_SituationRecordExtendedApprovedFormat: scalaxb.XMLFormat[nu.ndw.SituationRecordExtendedApproved] = new DefaultNundw_SituationRecordExtendedApprovedFormat {}
  implicit lazy val Nundw_SourceFormat: scalaxb.XMLFormat[nu.ndw.Source] = new DefaultNundw_SourceFormat {}
  implicit lazy val Nundw_SourceTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.SourceTypeEnum] = new DefaultNundw_SourceTypeEnumFormat {}
  implicit lazy val Nundw_SpecialDayFormat: scalaxb.XMLFormat[nu.ndw.SpecialDay] = new DefaultNundw_SpecialDayFormat {}
  implicit lazy val Nundw_SpecialDayTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.SpecialDayTypeEnum] = new DefaultNundw_SpecialDayTypeEnumFormat {}
  implicit lazy val Nundw_SpecialLocationParkingSiteFormat: scalaxb.XMLFormat[nu.ndw.SpecialLocationParkingSite] = new DefaultNundw_SpecialLocationParkingSiteFormat {}
  implicit lazy val Nundw_SpeedManagementFormat: scalaxb.XMLFormat[nu.ndw.SpeedManagement] = new DefaultNundw_SpeedManagementFormat {}
  implicit lazy val Nundw_SpeedManagementTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.SpeedManagementTypeEnum] = new DefaultNundw_SpeedManagementTypeEnumFormat {}
  implicit lazy val Nundw_SpeedPercentileFormat: scalaxb.XMLFormat[nu.ndw.SpeedPercentile] = new DefaultNundw_SpeedPercentileFormat {}
  implicit lazy val Nundw_SpeedValueFormat: scalaxb.XMLFormat[nu.ndw.SpeedValue] = new DefaultNundw_SpeedValueFormat {}
  implicit lazy val Nundw_SubjectsFormat: scalaxb.XMLFormat[nu.ndw.Subjects] = new DefaultNundw_SubjectsFormat {}
  implicit lazy val Nundw_SubjectTypeOfWorksEnumFormat: scalaxb.XMLFormat[nu.ndw.SubjectTypeOfWorksEnum] = new DefaultNundw_SubjectTypeOfWorksEnumFormat {}
  implicit lazy val Nundw_SubscriptionFormat: scalaxb.XMLFormat[nu.ndw.Subscription] = new DefaultNundw_SubscriptionFormat {}
  implicit lazy val Nundw_SubscriptionStateEnumFormat: scalaxb.XMLFormat[nu.ndw.SubscriptionStateEnum] = new DefaultNundw_SubscriptionStateEnumFormat {}
  implicit lazy val Nundw_SupplementaryPositionalDescriptionFormat: scalaxb.XMLFormat[nu.ndw.SupplementaryPositionalDescription] = new DefaultNundw_SupplementaryPositionalDescriptionFormat {}
  implicit lazy val Nundw_TargetFormat: scalaxb.XMLFormat[nu.ndw.Target] = new DefaultNundw_TargetFormat {}
  implicit lazy val Nundw_TariffsAndPaymentFormat: scalaxb.XMLFormat[nu.ndw.TariffsAndPayment] = new DefaultNundw_TariffsAndPaymentFormat {}
  implicit lazy val Nundw_TemperatureTypeFormat: scalaxb.XMLFormat[nu.ndw.TemperatureType] = new DefaultNundw_TemperatureTypeFormat {}
  implicit lazy val Nundw_TemperatureInformationTypeFormat: scalaxb.XMLFormat[nu.ndw.TemperatureInformationType] = new DefaultNundw_TemperatureInformationTypeFormat {}
  implicit lazy val Nundw_TemperatureValueFormat: scalaxb.XMLFormat[nu.ndw.TemperatureValue] = new DefaultNundw_TemperatureValueFormat {}
  implicit lazy val Nundw_TextDisplayAreaSettingsFormat: scalaxb.XMLFormat[nu.ndw.TextDisplayAreaSettings] = new DefaultNundw_TextDisplayAreaSettingsFormat {}
  implicit lazy val Nundw_TimePeriodByHourFormat: scalaxb.XMLFormat[nu.ndw.TimePeriodByHour] = new DefaultNundw_TimePeriodByHourFormat {}
  implicit lazy val Nundw_TimePeriodOfDayFormat: scalaxb.XMLFormat[nu.ndw.TimePeriodOfDay] = new DefaultNundw_TimePeriodOfDayFormat {}
  implicit lazy val Nundw_TimePrecisionEnumFormat: scalaxb.XMLFormat[nu.ndw.TimePrecisionEnum] = new DefaultNundw_TimePrecisionEnumFormat {}
  implicit lazy val Nundw_TpegAreaDescriptorFormat: scalaxb.XMLFormat[nu.ndw.TpegAreaDescriptor] = new DefaultNundw_TpegAreaDescriptorFormat {}
  implicit lazy val Nundw_TpegAreaLocationFormat: scalaxb.XMLFormat[nu.ndw.TpegAreaLocation] = new DefaultNundw_TpegAreaLocationFormat {}
  implicit lazy val Nundw_TpegDescriptorFormat: scalaxb.XMLFormat[nu.ndw.TpegDescriptor] = new DefaultNundw_TpegDescriptorFormat {}
  implicit lazy val Nundw_TpegFramedPointFormat: scalaxb.XMLFormat[nu.ndw.TpegFramedPoint] = new DefaultNundw_TpegFramedPointFormat {}
  implicit lazy val Nundw_TpegGeometricAreaFormat: scalaxb.XMLFormat[nu.ndw.TpegGeometricArea] = new DefaultNundw_TpegGeometricAreaFormat {}
  implicit lazy val Nundw_TpegHeightFormat: scalaxb.XMLFormat[nu.ndw.TpegHeight] = new DefaultNundw_TpegHeightFormat {}
  implicit lazy val Nundw_TpegIlcPointDescriptorFormat: scalaxb.XMLFormat[nu.ndw.TpegIlcPointDescriptor] = new DefaultNundw_TpegIlcPointDescriptorFormat {}
  implicit lazy val Nundw_TpegJunctionFormat: scalaxb.XMLFormat[nu.ndw.TpegJunction] = new DefaultNundw_TpegJunctionFormat {}
  implicit lazy val Nundw_TpegJunctionPointDescriptorFormat: scalaxb.XMLFormat[nu.ndw.TpegJunctionPointDescriptor] = new DefaultNundw_TpegJunctionPointDescriptorFormat {}
  implicit lazy val Nundw_TpegLinearLocationFormat: scalaxb.XMLFormat[nu.ndw.TpegLinearLocation] = new DefaultNundw_TpegLinearLocationFormat {}
  implicit lazy val Nundw_TpegLoc01AreaLocationSubtypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TpegLoc01AreaLocationSubtypeEnum] = new DefaultNundw_TpegLoc01AreaLocationSubtypeEnumFormat {}
  implicit lazy val Nundw_TpegLoc01FramedPointLocationSubtypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TpegLoc01FramedPointLocationSubtypeEnum] = new DefaultNundw_TpegLoc01FramedPointLocationSubtypeEnumFormat {}
  implicit lazy val Nundw_TpegLoc01LinearLocationSubtypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TpegLoc01LinearLocationSubtypeEnum] = new DefaultNundw_TpegLoc01LinearLocationSubtypeEnumFormat {}
  implicit lazy val Nundw_TpegLoc01SimplePointLocationSubtypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TpegLoc01SimplePointLocationSubtypeEnum] = new DefaultNundw_TpegLoc01SimplePointLocationSubtypeEnumFormat {}
  implicit lazy val Nundw_TpegLoc03AreaDescriptorSubtypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TpegLoc03AreaDescriptorSubtypeEnum] = new DefaultNundw_TpegLoc03AreaDescriptorSubtypeEnumFormat {}
  implicit lazy val Nundw_TpegLoc03IlcPointDescriptorSubtypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TpegLoc03IlcPointDescriptorSubtypeEnum] = new DefaultNundw_TpegLoc03IlcPointDescriptorSubtypeEnumFormat {}
  implicit lazy val Nundw_TpegLoc03JunctionPointDescriptorSubtypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TpegLoc03JunctionPointDescriptorSubtypeEnum] = new DefaultNundw_TpegLoc03JunctionPointDescriptorSubtypeEnumFormat {}
  implicit lazy val Nundw_TpegLoc03OtherPointDescriptorSubtypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TpegLoc03OtherPointDescriptorSubtypeEnum] = new DefaultNundw_TpegLoc03OtherPointDescriptorSubtypeEnumFormat {}
  implicit lazy val Nundw_TpegLoc04HeightTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TpegLoc04HeightTypeEnum] = new DefaultNundw_TpegLoc04HeightTypeEnumFormat {}
  implicit lazy val Nundw_TpegNamedOnlyAreaFormat: scalaxb.XMLFormat[nu.ndw.TpegNamedOnlyArea] = new DefaultNundw_TpegNamedOnlyAreaFormat {}
  implicit lazy val Nundw_TpegNonJunctionPointFormat: scalaxb.XMLFormat[nu.ndw.TpegNonJunctionPoint] = new DefaultNundw_TpegNonJunctionPointFormat {}
  implicit lazy val Nundw_TpegOtherPointDescriptorFormat: scalaxb.XMLFormat[nu.ndw.TpegOtherPointDescriptor] = new DefaultNundw_TpegOtherPointDescriptorFormat {}
  implicit lazy val Nundw_TpegPointFormat: scalaxb.XMLFormat[nu.ndw.TpegPoint] = new DefaultNundw_TpegPointFormat {}
  implicit lazy val Nundw_TpegPointDescriptorFormat: scalaxb.XMLFormat[nu.ndw.TpegPointDescriptor] = new DefaultNundw_TpegPointDescriptorFormat {}
  implicit lazy val Nundw_TpegPointLocationFormat: scalaxb.XMLFormat[nu.ndw.TpegPointLocation] = new DefaultNundw_TpegPointLocationFormat {}
  implicit lazy val Nundw_TpegSimplePointFormat: scalaxb.XMLFormat[nu.ndw.TpegSimplePoint] = new DefaultNundw_TpegSimplePointFormat {}
  implicit lazy val Nundw_TrafficConcentrationTypeFormat: scalaxb.XMLFormat[nu.ndw.TrafficConcentrationType] = new DefaultNundw_TrafficConcentrationTypeFormat {}
  implicit lazy val Nundw_TrafficConstrictionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TrafficConstrictionTypeEnum] = new DefaultNundw_TrafficConstrictionTypeEnumFormat {}
  implicit lazy val Nundw_TrafficDataFormat: scalaxb.XMLFormat[nu.ndw.TrafficData] = new DefaultNundw_TrafficDataFormat {}
  implicit lazy val Nundw_TrafficElementFormat: scalaxb.XMLFormat[nu.ndw.TrafficElement] = new DefaultNundw_TrafficElementFormat {}
  implicit lazy val Nundw_TrafficFlowTypeFormat: scalaxb.XMLFormat[nu.ndw.TrafficFlowType] = new DefaultNundw_TrafficFlowTypeFormat {}
  implicit lazy val Nundw_TrafficFlowCharacteristicsEnumFormat: scalaxb.XMLFormat[nu.ndw.TrafficFlowCharacteristicsEnum] = new DefaultNundw_TrafficFlowCharacteristicsEnumFormat {}
  implicit lazy val Nundw_TrafficHeadwayTypeFormat: scalaxb.XMLFormat[nu.ndw.TrafficHeadwayType] = new DefaultNundw_TrafficHeadwayTypeFormat {}
  implicit lazy val Nundw_TrafficSpeedFormat: scalaxb.XMLFormat[nu.ndw.TrafficSpeed] = new DefaultNundw_TrafficSpeedFormat {}
  implicit lazy val Nundw_TrafficStatusFormat: scalaxb.XMLFormat[nu.ndw.TrafficStatus] = new DefaultNundw_TrafficStatusFormat {}
  implicit lazy val Nundw_TrafficStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.TrafficStatusEnum] = new DefaultNundw_TrafficStatusEnumFormat {}
  implicit lazy val Nundw_TrafficStatusValueFormat: scalaxb.XMLFormat[nu.ndw.TrafficStatusValue] = new DefaultNundw_TrafficStatusValueFormat {}
  implicit lazy val Nundw_TrafficTrendTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TrafficTrendTypeEnum] = new DefaultNundw_TrafficTrendTypeEnumFormat {}
  implicit lazy val Nundw_TrafficTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TrafficTypeEnum] = new DefaultNundw_TrafficTypeEnumFormat {}
  implicit lazy val Nundw_TrafficViewFormat: scalaxb.XMLFormat[nu.ndw.TrafficView] = new DefaultNundw_TrafficViewFormat {}
  implicit lazy val Nundw_TrafficViewPublicationFormat: scalaxb.XMLFormat[nu.ndw.TrafficViewPublication] = new DefaultNundw_TrafficViewPublicationFormat {}
  implicit lazy val Nundw_TrafficViewRecordFormat: scalaxb.XMLFormat[nu.ndw.TrafficViewRecord] = new DefaultNundw_TrafficViewRecordFormat {}
  implicit lazy val Nundw_TransitInformationFormat: scalaxb.XMLFormat[nu.ndw.TransitInformation] = new DefaultNundw_TransitInformationFormat {}
  implicit lazy val Nundw_TransitServiceInformationEnumFormat: scalaxb.XMLFormat[nu.ndw.TransitServiceInformationEnum] = new DefaultNundw_TransitServiceInformationEnumFormat {}
  implicit lazy val Nundw_TransitServiceTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TransitServiceTypeEnum] = new DefaultNundw_TransitServiceTypeEnumFormat {}
  implicit lazy val Nundw_TravelTimeDataFormat: scalaxb.XMLFormat[nu.ndw.TravelTimeData] = new DefaultNundw_TravelTimeDataFormat {}
  implicit lazy val Nundw_TravelTimeTrendTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TravelTimeTrendTypeEnum] = new DefaultNundw_TravelTimeTrendTypeEnumFormat {}
  implicit lazy val Nundw_TravelTimeTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.TravelTimeTypeEnum] = new DefaultNundw_TravelTimeTypeEnumFormat {}
  implicit lazy val Nundw_TruckParkingDynamicManagementEnumFormat: scalaxb.XMLFormat[nu.ndw.TruckParkingDynamicManagementEnum] = new DefaultNundw_TruckParkingDynamicManagementEnumFormat {}
  implicit lazy val Nundw_UpdateMethodEnumFormat: scalaxb.XMLFormat[nu.ndw.UpdateMethodEnum] = new DefaultNundw_UpdateMethodEnumFormat {}
  implicit lazy val Nundw_UrbanParkingSiteFormat: scalaxb.XMLFormat[nu.ndw.UrbanParkingSite] = new DefaultNundw_UrbanParkingSiteFormat {}
  implicit lazy val Nundw_UrbanParkingSiteTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.UrbanParkingSiteTypeEnum] = new DefaultNundw_UrbanParkingSiteTypeEnumFormat {}
  implicit lazy val Nundw_UrgencyEnumFormat: scalaxb.XMLFormat[nu.ndw.UrgencyEnum] = new DefaultNundw_UrgencyEnumFormat {}
  implicit lazy val Nundw_UrlLinkFormat: scalaxb.XMLFormat[nu.ndw.UrlLink] = new DefaultNundw_UrlLinkFormat {}
  implicit lazy val Nundw_UrlLinkTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.UrlLinkTypeEnum] = new DefaultNundw_UrlLinkTypeEnumFormat {}
  implicit lazy val Nundw_UsedPaymentCardFormat: scalaxb.XMLFormat[nu.ndw.UsedPaymentCard] = new DefaultNundw_UsedPaymentCardFormat {}
  implicit lazy val Nundw_UserTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.UserTypeEnum] = new DefaultNundw_UserTypeEnumFormat {}
  implicit lazy val Nundw_ValidityFormat: scalaxb.XMLFormat[nu.ndw.Validity] = new DefaultNundw_ValidityFormat {}
  implicit lazy val Nundw_ValidityStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.ValidityStatusEnum] = new DefaultNundw_ValidityStatusEnumFormat {}
  implicit lazy val Nundw_VehicleFormat: scalaxb.XMLFormat[nu.ndw.Vehicle] = new DefaultNundw_VehicleFormat {}
  implicit lazy val Nundw_VehicleCharacteristicsFormat: scalaxb.XMLFormat[nu.ndw.VehicleCharacteristics] = new DefaultNundw_VehicleCharacteristicsFormat {}
  implicit lazy val Nundw_VehicleCharacteristicsExtendedFormat: scalaxb.XMLFormat[nu.ndw.VehicleCharacteristicsExtended] = new DefaultNundw_VehicleCharacteristicsExtendedFormat {}
  implicit lazy val Nundw_VehicleCountAndRateFormat: scalaxb.XMLFormat[nu.ndw.VehicleCountAndRate] = new DefaultNundw_VehicleCountAndRateFormat {}
  implicit lazy val Nundw_VehicleCountValueFormat: scalaxb.XMLFormat[nu.ndw.VehicleCountValue] = new DefaultNundw_VehicleCountValueFormat {}
  implicit lazy val Nundw_VehicleCountWithinIntervalFormat: scalaxb.XMLFormat[nu.ndw.VehicleCountWithinInterval] = new DefaultNundw_VehicleCountWithinIntervalFormat {}
  implicit lazy val Nundw_VehicleEquipmentEnumFormat: scalaxb.XMLFormat[nu.ndw.VehicleEquipmentEnum] = new DefaultNundw_VehicleEquipmentEnumFormat {}
  implicit lazy val Nundw_VehicleFlowValueFormat: scalaxb.XMLFormat[nu.ndw.VehicleFlowValue] = new DefaultNundw_VehicleFlowValueFormat {}
  implicit lazy val Nundw_VehicleObstructionFormat: scalaxb.XMLFormat[nu.ndw.VehicleObstruction] = new DefaultNundw_VehicleObstructionFormat {}
  implicit lazy val Nundw_VehicleObstructionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.VehicleObstructionTypeEnum] = new DefaultNundw_VehicleObstructionTypeEnumFormat {}
  implicit lazy val Nundw_VehicleRateFormat: scalaxb.XMLFormat[nu.ndw.VehicleRate] = new DefaultNundw_VehicleRateFormat {}
  implicit lazy val Nundw_VehicleStatusEnumFormat: scalaxb.XMLFormat[nu.ndw.VehicleStatusEnum] = new DefaultNundw_VehicleStatusEnumFormat {}
  implicit lazy val Nundw_VehicleType2EnumFormat: scalaxb.XMLFormat[nu.ndw.VehicleType2Enum] = new DefaultNundw_VehicleType2EnumFormat {}
  implicit lazy val Nundw_VehicleTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.VehicleTypeEnum] = new DefaultNundw_VehicleTypeEnumFormat {}
  implicit lazy val Nundw_VehicleUsage2EnumFormat: scalaxb.XMLFormat[nu.ndw.VehicleUsage2Enum] = new DefaultNundw_VehicleUsage2EnumFormat {}
  implicit lazy val Nundw_VehicleUsageEnumFormat: scalaxb.XMLFormat[nu.ndw.VehicleUsageEnum] = new DefaultNundw_VehicleUsageEnumFormat {}
  implicit lazy val Nundw_VersionedReferencableFormat: scalaxb.XMLFormat[nu.ndw.VersionedReferencable] = new DefaultNundw_VersionedReferencableFormat {}
  implicit lazy val Nundw_VersionedReferenceFormat: scalaxb.XMLFormat[nu.ndw.VersionedReference] = new DefaultNundw_VersionedReferenceFormat {}
  implicit lazy val Nundw_VisibilityFormat: scalaxb.XMLFormat[nu.ndw.Visibility] = new DefaultNundw_VisibilityFormat {}
  implicit lazy val Nundw_VisibilityInformationFormat: scalaxb.XMLFormat[nu.ndw.VisibilityInformation] = new DefaultNundw_VisibilityInformationFormat {}
  implicit lazy val Nundw_VmsFormat: scalaxb.XMLFormat[nu.ndw.Vms] = new DefaultNundw_VmsFormat {}
  implicit lazy val Nundw_VmsDatexPictogramEnumFormat: scalaxb.XMLFormat[nu.ndw.VmsDatexPictogramEnum] = new DefaultNundw_VmsDatexPictogramEnumFormat {}
  implicit lazy val Nundw_VmsDatexSupplementalPictogramEnumFormat: scalaxb.XMLFormat[nu.ndw.VmsDatexSupplementalPictogramEnum] = new DefaultNundw_VmsDatexSupplementalPictogramEnumFormat {}
  implicit lazy val Nundw_VmsDynamicCharacteristicsFormat: scalaxb.XMLFormat[nu.ndw.VmsDynamicCharacteristics] = new DefaultNundw_VmsDynamicCharacteristicsFormat {}
  implicit lazy val Nundw_VmsFaultFormat: scalaxb.XMLFormat[nu.ndw.VmsFault] = new DefaultNundw_VmsFaultFormat {}
  implicit lazy val Nundw_VmsFaultEnumFormat: scalaxb.XMLFormat[nu.ndw.VmsFaultEnum] = new DefaultNundw_VmsFaultEnumFormat {}
  implicit lazy val Nundw_VmsLuminanceLevelEnumFormat: scalaxb.XMLFormat[nu.ndw.VmsLuminanceLevelEnum] = new DefaultNundw_VmsLuminanceLevelEnumFormat {}
  implicit lazy val Nundw_VmsManagedLogicalLocationFormat: scalaxb.XMLFormat[nu.ndw.VmsManagedLogicalLocation] = new DefaultNundw_VmsManagedLogicalLocationFormat {}
  implicit lazy val Nundw_VmsMessageFormat: scalaxb.XMLFormat[nu.ndw.VmsMessage] = new DefaultNundw_VmsMessageFormat {}
  implicit lazy val Nundw_VmsMessageInformationTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.VmsMessageInformationTypeEnum] = new DefaultNundw_VmsMessageInformationTypeEnumFormat {}
  implicit lazy val Nundw_VmsPictogramFormat: scalaxb.XMLFormat[nu.ndw.VmsPictogram] = new DefaultNundw_VmsPictogramFormat {}
  implicit lazy val Nundw_VmsPictogramDisplayAreaFormat: scalaxb.XMLFormat[nu.ndw.VmsPictogramDisplayArea] = new DefaultNundw_VmsPictogramDisplayAreaFormat {}
  implicit lazy val Nundw_VmsPictogramDisplayCharacteristicsFormat: scalaxb.XMLFormat[nu.ndw.VmsPictogramDisplayCharacteristics] = new DefaultNundw_VmsPictogramDisplayCharacteristicsFormat {}
  implicit lazy val Nundw_VmsPublicationFormat: scalaxb.XMLFormat[nu.ndw.VmsPublication] = new DefaultNundw_VmsPublicationFormat {}
  implicit lazy val Nundw_VmsRecordFormat: scalaxb.XMLFormat[nu.ndw.VmsRecord] = new DefaultNundw_VmsRecordFormat {}
  implicit lazy val Nundw_VmsSettingFormat: scalaxb.XMLFormat[nu.ndw.VmsSetting] = new DefaultNundw_VmsSettingFormat {}
  implicit lazy val Nundw_VmsSupplementaryPanelFormat: scalaxb.XMLFormat[nu.ndw.VmsSupplementaryPanel] = new DefaultNundw_VmsSupplementaryPanelFormat {}
  implicit lazy val Nundw_VmsSupplementaryPanelCharacteristicsFormat: scalaxb.XMLFormat[nu.ndw.VmsSupplementaryPanelCharacteristics] = new DefaultNundw_VmsSupplementaryPanelCharacteristicsFormat {}
  implicit lazy val Nundw_VmsSupplementaryPictogramFormat: scalaxb.XMLFormat[nu.ndw.VmsSupplementaryPictogram] = new DefaultNundw_VmsSupplementaryPictogramFormat {}
  implicit lazy val Nundw_VmsTablePublicationFormat: scalaxb.XMLFormat[nu.ndw.VmsTablePublication] = new DefaultNundw_VmsTablePublicationFormat {}
  implicit lazy val Nundw_VmsTextFormat: scalaxb.XMLFormat[nu.ndw.VmsText] = new DefaultNundw_VmsTextFormat {}
  implicit lazy val Nundw_VmsTextDisplayCharacteristicsFormat: scalaxb.XMLFormat[nu.ndw.VmsTextDisplayCharacteristics] = new DefaultNundw_VmsTextDisplayCharacteristicsFormat {}
  implicit lazy val Nundw_VmsTextLineFormat: scalaxb.XMLFormat[nu.ndw.VmsTextLine] = new DefaultNundw_VmsTextLineFormat {}
  implicit lazy val Nundw_VmsTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.VmsTypeEnum] = new DefaultNundw_VmsTypeEnumFormat {}
  implicit lazy val Nundw_VmsUnitFormat: scalaxb.XMLFormat[nu.ndw.VmsUnit] = new DefaultNundw_VmsUnitFormat {}
  implicit lazy val Nundw_VmsUnitFaultFormat: scalaxb.XMLFormat[nu.ndw.VmsUnitFault] = new DefaultNundw_VmsUnitFaultFormat {}
  implicit lazy val Nundw_VmsUnitRecordFormat: scalaxb.XMLFormat[nu.ndw.VmsUnitRecord] = new DefaultNundw_VmsUnitRecordFormat {}
  implicit lazy val Nundw_VmsUnitTableFormat: scalaxb.XMLFormat[nu.ndw.VmsUnitTable] = new DefaultNundw_VmsUnitTableFormat {}
  implicit lazy val Nundw_WeatherDataFormat: scalaxb.XMLFormat[nu.ndw.WeatherData] = new DefaultNundw_WeatherDataFormat {}
  implicit lazy val Nundw_WeatherRelatedRoadConditionsFormat: scalaxb.XMLFormat[nu.ndw.WeatherRelatedRoadConditions] = new DefaultNundw_WeatherRelatedRoadConditionsFormat {}
  implicit lazy val Nundw_WeatherRelatedRoadConditionTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.WeatherRelatedRoadConditionTypeEnum] = new DefaultNundw_WeatherRelatedRoadConditionTypeEnumFormat {}
  implicit lazy val Nundw_WeekOfMonthEnumFormat: scalaxb.XMLFormat[nu.ndw.WeekOfMonthEnum] = new DefaultNundw_WeekOfMonthEnumFormat {}
  implicit lazy val Nundw_WidthCharacteristicFormat: scalaxb.XMLFormat[nu.ndw.WidthCharacteristic] = new DefaultNundw_WidthCharacteristicFormat {}
  implicit lazy val Nundw_WindFormat: scalaxb.XMLFormat[nu.ndw.Wind] = new DefaultNundw_WindFormat {}
  implicit lazy val Nundw_WindInformationFormat: scalaxb.XMLFormat[nu.ndw.WindInformation] = new DefaultNundw_WindInformationFormat {}
  implicit lazy val Nundw_WinterDrivingManagementFormat: scalaxb.XMLFormat[nu.ndw.WinterDrivingManagement] = new DefaultNundw_WinterDrivingManagementFormat {}
  implicit lazy val Nundw_WinterEquipmentManagementTypeEnumFormat: scalaxb.XMLFormat[nu.ndw.WinterEquipmentManagementTypeEnum] = new DefaultNundw_WinterEquipmentManagementTypeEnumFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("d2LogicalModel"), Some("http://datex2.eu/schema/2/2_0") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[nu.ndw.D2LogicalModel](elem)))

      case _ => None
    }
  }

  trait DefaultNundw__AreaExtensionTypeFormat extends scalaxb.ElemNameParser[nu.ndw._AreaExtensionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_AreaExtensionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._AreaExtensionType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "areaExtended")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrExtendedArea")) ~ 
      safeRep(any(_.namespace != Some("http://datex2.eu/schema/2/2_0"))) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw._AreaExtensionType(p1.headOption map { scalaxb.fromXML[nu.ndw.AreaExtended](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.OpenlrExtendedArea](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw._AreaExtensionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.areaExtended map { scalaxb.toXML[nu.ndw.AreaExtended](_, Some("http://datex2.eu/schema/2/2_0"), Some("areaExtended"), __scope, false) } getOrElse {Nil},
        __obj.openlrExtendedArea map { scalaxb.toXML[nu.ndw.OpenlrExtendedArea](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrExtendedArea"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultNundw__ChargeBandVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._ChargeBandVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._ChargeBandVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._ChargeBandVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._ChargeBandVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("ChargeBand"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._ChargeBandVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ChargeBandVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__ContactDetailsVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._ContactDetailsVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._ContactDetailsVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._ContactDetailsVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._ContactDetailsVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("ContactDetails"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._ContactDetailsVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ContactDetailsVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__ExtensionTypeFormat extends scalaxb.ElemNameParser[nu.ndw._ExtensionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ExtensionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ExtensionType] =
      phrase(safeRep(any(_ => true)) ^^
      { case p1 =>
      nu.ndw._ExtensionType(p1 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw._ExtensionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultNundw__GenericPublicationExtensionTypeFormat extends scalaxb.ElemNameParser[nu.ndw._GenericPublicationExtensionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_GenericPublicationExtensionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._GenericPublicationExtensionType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingTablePublication")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingVehiclesPublication")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusPublication")) ~ 
      safeRep(any(_.namespace != Some("http://datex2.eu/schema/2/2_0"))) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw._GenericPublicationExtensionType(p1.headOption map { scalaxb.fromXML[nu.ndw.ParkingTablePublication](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.ParkingVehiclesPublication](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.ParkingStatusPublication](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw._GenericPublicationExtensionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingTablePublication map { scalaxb.toXML[nu.ndw.ParkingTablePublication](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingTablePublication"), __scope, false) } getOrElse {Nil},
        __obj.parkingVehiclesPublication map { scalaxb.toXML[nu.ndw.ParkingVehiclesPublication](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingVehiclesPublication"), __scope, false) } getOrElse {Nil},
        __obj.parkingStatusPublication map { scalaxb.toXML[nu.ndw.ParkingStatusPublication](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusPublication"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultNundw__GroupOfParkingSpacesFormat extends scalaxb.ElemNameParser[nu.ndw._GroupOfParkingSpaces] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_GroupOfParkingSpaces")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._GroupOfParkingSpaces] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceBasics")) ^^
      { case p1 =>
      nu.ndw._GroupOfParkingSpaces(scalaxb.fromXML[nu.ndw.ParkingSpaceBasics](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@groupIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@groupIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._GroupOfParkingSpaces, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@groupIndex", _) => attr = scala.xml.Attribute(null, "groupIndex", __obj.groupIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._GroupOfParkingSpaces, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingSpaceBasics](__obj.parkingSpaceBasics, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceBasics"), __scope, false))

  }

  trait DefaultNundw__GroupOfParkingSpacesParkingSpaceIndexParkingSpaceFormat extends scalaxb.ElemNameParser[nu.ndw._GroupOfParkingSpacesParkingSpaceIndexParkingSpace] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_GroupOfParkingSpacesParkingSpaceIndexParkingSpace")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._GroupOfParkingSpacesParkingSpaceIndexParkingSpace] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpace")) ^^
      { case p1 =>
      nu.ndw._GroupOfParkingSpacesParkingSpaceIndexParkingSpace(scalaxb.fromXML[nu.ndw.ParkingSpace](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@parkingSpaceIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@parkingSpaceIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._GroupOfParkingSpacesParkingSpaceIndexParkingSpace, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@parkingSpaceIndex", _) => attr = scala.xml.Attribute(null, "parkingSpaceIndex", __obj.parkingSpaceIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._GroupOfParkingSpacesParkingSpaceIndexParkingSpace, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingSpace](__obj.parkingSpace, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpace"), __scope, false))

  }

  trait DefaultNundw__IntermediatePointOnLinearElementFormat extends scalaxb.ElemNameParser[nu.ndw._IntermediatePointOnLinearElement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_IntermediatePointOnLinearElement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._IntermediatePointOnLinearElement] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "referent")) ^^
      { case p1 =>
      nu.ndw._IntermediatePointOnLinearElement(scalaxb.fromXML[nu.ndw.Referent](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@index").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@index" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._IntermediatePointOnLinearElement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@index", _) => attr = scala.xml.Attribute(null, "index", __obj.index.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._IntermediatePointOnLinearElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.Referent](__obj.referent, Some("http://datex2.eu/schema/2/2_0"), Some("referent"), __scope, false))

  }

  trait DefaultNundw__LinearExtensionTypeFormat extends scalaxb.ElemNameParser[nu.ndw._LinearExtensionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_LinearExtensionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._LinearExtensionType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrExtendedLinear")) ~ 
      safeRep(any(_.namespace != Some("http://datex2.eu/schema/2/2_0"))) ^^
      { case p1 ~ p2 =>
      nu.ndw._LinearExtensionType(p1.headOption map { scalaxb.fromXML[nu.ndw.OpenlrExtendedLinear](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw._LinearExtensionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrExtendedLinear map { scalaxb.toXML[nu.ndw.OpenlrExtendedLinear](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrExtendedLinear"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultNundw__LocationContainedInItineraryFormat extends scalaxb.ElemNameParser[nu.ndw._LocationContainedInItinerary] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_LocationContainedInItinerary")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._LocationContainedInItinerary] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "location")) ^^
      { case p1 =>
      nu.ndw._LocationContainedInItinerary(scalaxb.fromXML[nu.ndw.Location](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@index").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@index" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._LocationContainedInItinerary, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@index", _) => attr = scala.xml.Attribute(null, "index", __obj.index.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._LocationContainedInItinerary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.Location](__obj.location, Some("http://datex2.eu/schema/2/2_0"), Some("location"), __scope, false))

  }

  trait DefaultNundw__MeasurementSiteRecordIndexMeasurementSpecificCharacteristicsFormat extends scalaxb.ElemNameParser[nu.ndw._MeasurementSiteRecordIndexMeasurementSpecificCharacteristics] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_MeasurementSiteRecordIndexMeasurementSpecificCharacteristics")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._MeasurementSiteRecordIndexMeasurementSpecificCharacteristics] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSpecificCharacteristics")) ^^
      { case p1 =>
      nu.ndw._MeasurementSiteRecordIndexMeasurementSpecificCharacteristics(scalaxb.fromXML[nu.ndw.MeasurementSpecificCharacteristics](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@index").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@index" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._MeasurementSiteRecordIndexMeasurementSpecificCharacteristics, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@index", _) => attr = scala.xml.Attribute(null, "index", __obj.index.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._MeasurementSiteRecordIndexMeasurementSpecificCharacteristics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.MeasurementSpecificCharacteristics](__obj.measurementSpecificCharacteristics, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSpecificCharacteristics"), __scope, false))

  }

  trait DefaultNundw__MeasurementSiteRecordVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._MeasurementSiteRecordVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._MeasurementSiteRecordVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._MeasurementSiteRecordVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._MeasurementSiteRecordVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("MeasurementSiteRecord"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._MeasurementSiteRecordVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._MeasurementSiteRecordVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__MeasurementSiteTableVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._MeasurementSiteTableVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._MeasurementSiteTableVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._MeasurementSiteTableVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._MeasurementSiteTableVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("MeasurementSiteTable"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._MeasurementSiteTableVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._MeasurementSiteTableVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__ParkingAccessReferenceFormat extends scalaxb.XMLFormat[nu.ndw._ParkingAccessReference] with scalaxb.CanWriteChildNodes[nu.ndw._ParkingAccessReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._ParkingAccessReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._ParkingAccessReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("ParkingAccess"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._ParkingAccessReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingAccessReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityFormat extends scalaxb.ElemNameParser[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacility")) ^^
      { case p1 =>
      nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility(scalaxb.fromXML[nu.ndw.ParkingEquipmentOrServiceFacility](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@equipmentOrServiceFacilityIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@equipmentOrServiceFacilityIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@equipmentOrServiceFacilityIndex", _) => attr = scala.xml.Attribute(null, "equipmentOrServiceFacilityIndex", __obj.equipmentOrServiceFacilityIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingEquipmentOrServiceFacility](__obj.parkingEquipmentOrServiceFacility, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacility"), __scope, false))

  }

  trait DefaultNundw__ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatusFormat extends scalaxb.ElemNameParser[nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacilityStatus")) ^^
      { case p1 =>
      nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus(scalaxb.fromXML[nu.ndw.ParkingEquipmentOrServiceFacilityStatus](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@equipmentOrServiceFacilityIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@equipmentOrServiceFacilityIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@equipmentOrServiceFacilityIndex", _) => attr = scala.xml.Attribute(null, "equipmentOrServiceFacilityIndex", __obj.equipmentOrServiceFacilityIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingEquipmentOrServiceFacilityStatus](__obj.parkingEquipmentOrServiceFacilityStatus, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacilityStatus"), __scope, false))

  }

  trait DefaultNundw__ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatusFormat extends scalaxb.ElemNameParser[nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpacesStatus")) ^^
      { case p1 =>
      nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus(scalaxb.fromXML[nu.ndw.GroupOfParkingSpacesStatus](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@groupIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@groupIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@groupIndex", _) => attr = scala.xml.Attribute(null, "groupIndex", __obj.groupIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.GroupOfParkingSpacesStatus](__obj.groupOfParkingSpacesStatus, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpacesStatus"), __scope, false))

  }

  trait DefaultNundw__ParkingRecordStatusParkingSpaceIndexParkingSpaceStatusFormat extends scalaxb.ElemNameParser[nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceStatus")) ^^
      { case p1 =>
      nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus(scalaxb.fromXML[nu.ndw.ParkingSpaceStatus](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@parkingSpaceIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@parkingSpaceIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@parkingSpaceIndex", _) => attr = scala.xml.Attribute(null, "parkingSpaceIndex", __obj.parkingSpaceIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingSpaceStatus](__obj.parkingSpaceStatus, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceStatus"), __scope, false))

  }

  trait DefaultNundw__ParkingRecordStatusScenarioIndexParkingUsageScenarioStatusFormat extends scalaxb.ElemNameParser[nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenarioStatus")) ^^
      { case p1 =>
      nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus(scalaxb.fromXML[nu.ndw.ParkingUsageScenarioStatus](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@scenarioIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@scenarioIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@scenarioIndex", _) => attr = scala.xml.Attribute(null, "scenarioIndex", __obj.scenarioIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingUsageScenarioStatus](__obj.parkingUsageScenarioStatus, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenarioStatus"), __scope, false))

  }

  trait DefaultNundw__ParkingRecordVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._ParkingRecordVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._ParkingRecordVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._ParkingRecordVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._ParkingRecordVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("ParkingRecord"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._ParkingRecordVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingRecordVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__ParkingRouteDetailsVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._ParkingRouteDetailsVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._ParkingRouteDetailsVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._ParkingRouteDetailsVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._ParkingRouteDetailsVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("ParkingRouteDetails"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._ParkingRouteDetailsVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingRouteDetailsVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__ParkingSiteScenarioIndexParkingUsageScenarioFormat extends scalaxb.ElemNameParser[nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ParkingSiteScenarioIndexParkingUsageScenario")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenario")) ^^
      { case p1 =>
      nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario(scalaxb.fromXML[nu.ndw.ParkingUsageScenario](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@scenarioIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@scenarioIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@scenarioIndex", _) => attr = scala.xml.Attribute(null, "scenarioIndex", __obj.scenarioIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingUsageScenario](__obj.parkingUsageScenario, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenario"), __scope, false))

  }

  trait DefaultNundw__ParkingSpaceFormat extends scalaxb.ElemNameParser[nu.ndw._ParkingSpace] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ParkingSpace")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ParkingSpace] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceBasics")) ^^
      { case p1 =>
      nu.ndw._ParkingSpace(scalaxb.fromXML[nu.ndw.ParkingSpaceBasics](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@parkingSpaceIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@parkingSpaceIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._ParkingSpace, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@parkingSpaceIndex", _) => attr = scala.xml.Attribute(null, "parkingSpaceIndex", __obj.parkingSpaceIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingSpace, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingSpaceBasics](__obj.parkingSpaceBasics, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceBasics"), __scope, false))

  }

  trait DefaultNundw__ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityFormat extends scalaxb.ElemNameParser[nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacility")) ^^
      { case p1 =>
      nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility(scalaxb.fromXML[nu.ndw.ParkingEquipmentOrServiceFacility](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@equipmentOrServiceFacilityIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@equipmentOrServiceFacilityIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@equipmentOrServiceFacilityIndex", _) => attr = scala.xml.Attribute(null, "equipmentOrServiceFacilityIndex", __obj.equipmentOrServiceFacilityIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingEquipmentOrServiceFacility](__obj.parkingEquipmentOrServiceFacility, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacility"), __scope, false))

  }

  trait DefaultNundw__ParkingSpaceBasicsScenarioIndexParkingUsageScenarioFormat extends scalaxb.ElemNameParser[nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_ParkingSpaceBasicsScenarioIndexParkingUsageScenario")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenario")) ^^
      { case p1 =>
      nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario(scalaxb.fromXML[nu.ndw.ParkingUsageScenario](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@scenarioIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@scenarioIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@scenarioIndex", _) => attr = scala.xml.Attribute(null, "scenarioIndex", __obj.scenarioIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.ParkingUsageScenario](__obj.parkingUsageScenario, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenario"), __scope, false))

  }

  trait DefaultNundw__ParkingTableVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._ParkingTableVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._ParkingTableVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._ParkingTableVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._ParkingTableVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("ParkingTable"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._ParkingTableVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._ParkingTableVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__PeriodExtensionTypeFormat extends scalaxb.ElemNameParser[nu.ndw._PeriodExtensionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_PeriodExtensionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._PeriodExtensionType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "periodExtended")) ~ 
      safeRep(any(_.namespace != Some("http://datex2.eu/schema/2/2_0"))) ^^
      { case p1 ~ p2 =>
      nu.ndw._PeriodExtensionType(p1.headOption map { scalaxb.fromXML[nu.ndw.PeriodExtended](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw._PeriodExtensionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.periodExtended map { scalaxb.toXML[nu.ndw.PeriodExtended](_, Some("http://datex2.eu/schema/2/2_0"), Some("periodExtended"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultNundw__PointExtensionTypeFormat extends scalaxb.ElemNameParser[nu.ndw._PointExtensionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_PointExtensionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._PointExtensionType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointExtended")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrExtendedPoint")) ~ 
      safeRep(any(_.namespace != Some("http://datex2.eu/schema/2/2_0"))) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw._PointExtensionType(p1.headOption map { scalaxb.fromXML[nu.ndw.PointExtended](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.OpenlrExtendedPoint](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw._PointExtensionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.pointExtended map { scalaxb.toXML[nu.ndw.PointExtended](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointExtended"), __scope, false) } getOrElse {Nil},
        __obj.openlrExtendedPoint map { scalaxb.toXML[nu.ndw.OpenlrExtendedPoint](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrExtendedPoint"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultNundw__PolygonAreaIndexPointCoordinatesFormat extends scalaxb.ElemNameParser[nu.ndw._PolygonAreaIndexPointCoordinates] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_PolygonAreaIndexPointCoordinates")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._PolygonAreaIndexPointCoordinates] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointCoordinates")) ^^
      { case p1 =>
      nu.ndw._PolygonAreaIndexPointCoordinates(scalaxb.fromXML[nu.ndw.PointCoordinates](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@index").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@index" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._PolygonAreaIndexPointCoordinates, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@index", _) => attr = scala.xml.Attribute(null, "index", __obj.index.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._PolygonAreaIndexPointCoordinates, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.PointCoordinates](__obj.pointCoordinates, Some("http://datex2.eu/schema/2/2_0"), Some("pointCoordinates"), __scope, false))

  }

  trait DefaultNundw__PredefinedItineraryIndexPredefinedLocationFormat extends scalaxb.ElemNameParser[nu.ndw._PredefinedItineraryIndexPredefinedLocation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_PredefinedItineraryIndexPredefinedLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._PredefinedItineraryIndexPredefinedLocation] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocation")) ^^
      { case p1 =>
      nu.ndw._PredefinedItineraryIndexPredefinedLocation(scalaxb.fromXML[nu.ndw.PredefinedLocation](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@index").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@index" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._PredefinedItineraryIndexPredefinedLocation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@index", _) => attr = scala.xml.Attribute(null, "index", __obj.index.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._PredefinedItineraryIndexPredefinedLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.PredefinedLocation](__obj.predefinedLocation, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocation"), __scope, false))

  }

  trait DefaultNundw__PredefinedItineraryVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._PredefinedItineraryVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._PredefinedItineraryVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._PredefinedItineraryVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._PredefinedItineraryVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("PredefinedItinerary"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._PredefinedItineraryVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._PredefinedItineraryVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__PredefinedLocationVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._PredefinedLocationVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._PredefinedLocationVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._PredefinedLocationVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._PredefinedLocationVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("PredefinedLocation"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._PredefinedLocationVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._PredefinedLocationVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__PredefinedNonOrderedLocationGroupVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("PredefinedNonOrderedLocationGroup"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__SiteMeasurementsIndexMeasuredValueFormat extends scalaxb.ElemNameParser[nu.ndw._SiteMeasurementsIndexMeasuredValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_SiteMeasurementsIndexMeasuredValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._SiteMeasurementsIndexMeasuredValue] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measuredValue")) ^^
      { case p1 =>
      nu.ndw._SiteMeasurementsIndexMeasuredValue(scalaxb.fromXML[nu.ndw.MeasuredValue](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@index").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@index" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._SiteMeasurementsIndexMeasuredValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@index", _) => attr = scala.xml.Attribute(null, "index", __obj.index.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._SiteMeasurementsIndexMeasuredValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.MeasuredValue](__obj.measuredValue, Some("http://datex2.eu/schema/2/2_0"), Some("measuredValue"), __scope, false))

  }

  trait DefaultNundw__SituationRecordExtensionTypeFormat extends scalaxb.ElemNameParser[nu.ndw._SituationRecordExtensionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_SituationRecordExtensionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._SituationRecordExtensionType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtendedApproved")) ~ 
      safeRep(any(_.namespace != Some("http://datex2.eu/schema/2/2_0"))) ^^
      { case p1 ~ p2 =>
      nu.ndw._SituationRecordExtensionType(p1.headOption map { scalaxb.fromXML[nu.ndw.SituationRecordExtendedApproved](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw._SituationRecordExtensionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordExtendedApproved map { scalaxb.toXML[nu.ndw.SituationRecordExtendedApproved](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtendedApproved"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultNundw__SituationRecordVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._SituationRecordVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._SituationRecordVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._SituationRecordVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._SituationRecordVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("SituationRecord"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._SituationRecordVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._SituationRecordVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__SituationVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._SituationVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._SituationVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._SituationVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._SituationVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("Situation"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._SituationVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._SituationVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__TextPageFormat extends scalaxb.ElemNameParser[nu.ndw._TextPage] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_TextPage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._TextPage] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsText")) ^^
      { case p1 =>
      nu.ndw._TextPage(scalaxb.fromXML[nu.ndw.VmsText](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@pageNumber").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@pageNumber" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._TextPage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@pageNumber", _) => attr = scala.xml.Attribute(null, "pageNumber", __obj.pageNumber.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._TextPage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.VmsText](__obj.vmsText, Some("http://datex2.eu/schema/2/2_0"), Some("vmsText"), __scope, false))

  }

  trait DefaultNundw__VehicleCharacteristicsExtensionTypeFormat extends scalaxb.ElemNameParser[nu.ndw._VehicleCharacteristicsExtensionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VehicleCharacteristicsExtensionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VehicleCharacteristicsExtensionType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCharacteristicsExtended")) ~ 
      safeRep(any(_.namespace != Some("http://datex2.eu/schema/2/2_0"))) ^^
      { case p1 ~ p2 =>
      nu.ndw._VehicleCharacteristicsExtensionType(p1.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristicsExtended](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw._VehicleCharacteristicsExtensionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.vehicleCharacteristicsExtended map { scalaxb.toXML[nu.ndw.VehicleCharacteristicsExtended](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCharacteristicsExtended"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultNundw__VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristicsFormat extends scalaxb.ElemNameParser[nu.ndw._VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogramDisplayCharacteristics")) ^^
      { case p1 =>
      nu.ndw._VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics(scalaxb.fromXML[nu.ndw.VmsPictogramDisplayCharacteristics](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@pictogramDisplayAreaIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@pictogramDisplayAreaIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@pictogramDisplayAreaIndex", _) => attr = scala.xml.Attribute(null, "pictogramDisplayAreaIndex", __obj.pictogramDisplayAreaIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.VmsPictogramDisplayCharacteristics](__obj.vmsPictogramDisplayCharacteristics, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogramDisplayCharacteristics"), __scope, false))

  }

  trait DefaultNundw__VmsMessageIndexVmsMessageFormat extends scalaxb.ElemNameParser[nu.ndw._VmsMessageIndexVmsMessage] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VmsMessageIndexVmsMessage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VmsMessageIndexVmsMessage] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsMessage")) ^^
      { case p1 =>
      nu.ndw._VmsMessageIndexVmsMessage(scalaxb.fromXML[nu.ndw.VmsMessage](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@messageIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@messageIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._VmsMessageIndexVmsMessage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@messageIndex", _) => attr = scala.xml.Attribute(null, "messageIndex", __obj.messageIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsMessageIndexVmsMessage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.VmsMessage](__obj.vmsMessage, Some("http://datex2.eu/schema/2/2_0"), Some("vmsMessage"), __scope, false))

  }

  trait DefaultNundw__VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayAreaFormat extends scalaxb.ElemNameParser[nu.ndw._VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogramDisplayArea")) ^^
      { case p1 =>
      nu.ndw._VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea(scalaxb.fromXML[nu.ndw.VmsPictogramDisplayArea](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@pictogramDisplayAreaIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@pictogramDisplayAreaIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@pictogramDisplayAreaIndex", _) => attr = scala.xml.Attribute(null, "pictogramDisplayAreaIndex", __obj.pictogramDisplayAreaIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.VmsPictogramDisplayArea](__obj.vmsPictogramDisplayArea, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogramDisplayArea"), __scope, false))

  }

  trait DefaultNundw__VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettingsFormat extends scalaxb.ElemNameParser[nu.ndw._VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramDisplayAreaSettings")) ^^
      { case p1 =>
      nu.ndw._VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings(scalaxb.fromXML[nu.ndw.PictogramDisplayAreaSettings](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@pictogramDisplayAreaIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@pictogramDisplayAreaIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@pictogramDisplayAreaIndex", _) => attr = scala.xml.Attribute(null, "pictogramDisplayAreaIndex", __obj.pictogramDisplayAreaIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.PictogramDisplayAreaSettings](__obj.pictogramDisplayAreaSettings, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramDisplayAreaSettings"), __scope, false))

  }

  trait DefaultNundw__VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogramFormat extends scalaxb.ElemNameParser[nu.ndw._VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogram")) ^^
      { case p1 =>
      nu.ndw._VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram(scalaxb.fromXML[nu.ndw.VmsPictogram](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@pictogramSequencingIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@pictogramSequencingIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@pictogramSequencingIndex", _) => attr = scala.xml.Attribute(null, "pictogramSequencingIndex", __obj.pictogramSequencingIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.VmsPictogram](__obj.vmsPictogram, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogram"), __scope, false))

  }

  trait DefaultNundw__VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristicsFormat extends scalaxb.ElemNameParser[nu.ndw._VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogramDisplayCharacteristics")) ^^
      { case p1 =>
      nu.ndw._VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics(scalaxb.fromXML[nu.ndw.VmsPictogramDisplayCharacteristics](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@pictogramDisplayAreaIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@pictogramDisplayAreaIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@pictogramDisplayAreaIndex", _) => attr = scala.xml.Attribute(null, "pictogramDisplayAreaIndex", __obj.pictogramDisplayAreaIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.VmsPictogramDisplayCharacteristics](__obj.vmsPictogramDisplayCharacteristics, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogramDisplayCharacteristics"), __scope, false))

  }

  trait DefaultNundw__VmsTextLineIndexVmsTextLineFormat extends scalaxb.ElemNameParser[nu.ndw._VmsTextLineIndexVmsTextLine] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VmsTextLineIndexVmsTextLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VmsTextLineIndexVmsTextLine] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextLine")) ^^
      { case p1 =>
      nu.ndw._VmsTextLineIndexVmsTextLine(scalaxb.fromXML[nu.ndw.VmsTextLine](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@lineIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@lineIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._VmsTextLineIndexVmsTextLine, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lineIndex", _) => attr = scala.xml.Attribute(null, "lineIndex", __obj.lineIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsTextLineIndexVmsTextLine, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.VmsTextLine](__obj.vmsTextLine, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextLine"), __scope, false))

  }

  trait DefaultNundw__VmsUnitRecordVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._VmsUnitRecordVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._VmsUnitRecordVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._VmsUnitRecordVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._VmsUnitRecordVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("VmsUnitRecord"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._VmsUnitRecordVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsUnitRecordVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__VmsUnitRecordVmsIndexVmsRecordFormat extends scalaxb.ElemNameParser[nu.ndw._VmsUnitRecordVmsIndexVmsRecord] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VmsUnitRecordVmsIndexVmsRecord")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VmsUnitRecordVmsIndexVmsRecord] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsRecord")) ^^
      { case p1 =>
      nu.ndw._VmsUnitRecordVmsIndexVmsRecord(scalaxb.fromXML[nu.ndw.VmsRecord](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@vmsIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@vmsIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._VmsUnitRecordVmsIndexVmsRecord, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@vmsIndex", _) => attr = scala.xml.Attribute(null, "vmsIndex", __obj.vmsIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsUnitRecordVmsIndexVmsRecord, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.VmsRecord](__obj.vmsRecord, Some("http://datex2.eu/schema/2/2_0"), Some("vmsRecord"), __scope, false))

  }

  trait DefaultNundw__VmsUnitTableVersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw._VmsUnitTableVersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw._VmsUnitTableVersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw._VmsUnitTableVersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw._VmsUnitTableVersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("VmsUnitTable"), scalaxb.ElemName(node) :: stack))) map { "@targetClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw._VmsUnitTableVersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@targetClass", _) => attr = scala.xml.Attribute(null, "targetClass", __obj.targetClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsUnitTableVersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw__VmsUnitVmsIndexVmsFormat extends scalaxb.ElemNameParser[nu.ndw._VmsUnitVmsIndexVms] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("_VmsUnitVmsIndexVms")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw._VmsUnitVmsIndexVms] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vms")) ^^
      { case p1 =>
      nu.ndw._VmsUnitVmsIndexVms(scalaxb.fromXML[nu.ndw.Vms](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@vmsIndex").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@vmsIndex" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw._VmsUnitVmsIndexVms, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@vmsIndex", _) => attr = scala.xml.Attribute(null, "vmsIndex", __obj.vmsIndex.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw._VmsUnitVmsIndexVms, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.Vms](__obj.vms, Some("http://datex2.eu/schema/2/2_0"), Some("vms"), __scope, false))

  }

  trait DefaultNundw_AbnormalTrafficFormat extends scalaxb.ElemNameParser[nu.ndw.AbnormalTraffic] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AbnormalTraffic")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AbnormalTraffic] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "abnormalTrafficType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfVehiclesWaiting")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "queueLength")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "relativeTrafficFlow")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficFlowCharacteristics")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficTrendType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "abnormalTrafficExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 =>
      nu.ndw.AbnormalTraffic(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.AbnormalTrafficTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.RelativeTrafficFlowEnum](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.TrafficFlowCharacteristicsEnum](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[nu.ndw.TrafficTrendTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.AbnormalTraffic, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.AbnormalTraffic, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.abnormalTrafficType map { scalaxb.toXML[nu.ndw.AbnormalTrafficTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("abnormalTrafficType"), __scope, false) } getOrElse {Nil},
        __obj.numberOfVehiclesWaiting map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfVehiclesWaiting"), __scope, false) } getOrElse {Nil},
        __obj.queueLength map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("queueLength"), __scope, false) } getOrElse {Nil},
        __obj.relativeTrafficFlow map { scalaxb.toXML[nu.ndw.RelativeTrafficFlowEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("relativeTrafficFlow"), __scope, false) } getOrElse {Nil},
        __obj.trafficFlowCharacteristics map { scalaxb.toXML[nu.ndw.TrafficFlowCharacteristicsEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficFlowCharacteristics"), __scope, false) } getOrElse {Nil},
        __obj.trafficTrendType map { scalaxb.toXML[nu.ndw.TrafficTrendTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficTrendType"), __scope, false) } getOrElse {Nil},
        __obj.abnormalTrafficExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("abnormalTrafficExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_AbnormalTrafficTypeEnumFormat = new DefaultNundw_AbnormalTrafficTypeEnumFormat {}
  trait DefaultNundw_AbnormalTrafficTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.AbnormalTrafficTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AbnormalTrafficTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stationaryTraffic")) => nu.ndw.StationaryTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("queuingTraffic")) => nu.ndw.QueuingTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slowTraffic")) => nu.ndw.SlowTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heavyTraffic")) => nu.ndw.HeavyTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecifiedAbnormalTraffic")) => nu.ndw.UnspecifiedAbnormalTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue50

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AbnormalTrafficTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AbnormalTrafficTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_AcceptedPaymentCardsFormat extends scalaxb.ElemNameParser[nu.ndw.AcceptedPaymentCards] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AcceptedPaymentCards")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AcceptedPaymentCards] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "paymentCards")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "otherPaymentCards")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "paymentCardBrands")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "otherPaymentCardBrands")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "acceptedPaymentCardsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.AcceptedPaymentCards(p1 map { scalaxb.fromXML[nu.ndw.PaymentCardTypesEnum](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.PaymentCardBrandsEnum](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AcceptedPaymentCards, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.paymentCards flatMap { scalaxb.toXML[nu.ndw.PaymentCardTypesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("paymentCards"), __scope, false) },
        __obj.otherPaymentCards flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("otherPaymentCards"), __scope, false) },
        __obj.paymentCardBrands flatMap { scalaxb.toXML[nu.ndw.PaymentCardBrandsEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("paymentCardBrands"), __scope, false) },
        __obj.otherPaymentCardBrands flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("otherPaymentCardBrands"), __scope, false) },
        __obj.acceptedPaymentCardsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("acceptedPaymentCardsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_AccessCategoryEnumFormat = new DefaultNundw_AccessCategoryEnumFormat {}
  trait DefaultNundw_AccessCategoryEnumFormat extends scalaxb.XMLFormat[nu.ndw.AccessCategoryEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AccessCategoryEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleEntranceAndExit")) => nu.ndw.VehicleEntranceAndExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleEntrance")) => nu.ndw.VehicleEntrance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleExit")) => nu.ndw.VehicleExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pedestrianEntranceAndExit")) => nu.ndw.PedestrianEntranceAndExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pedestrianEntrance")) => nu.ndw.PedestrianEntrance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pedestrianExit")) => nu.ndw.PedestrianExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rentalCarReturn")) => nu.ndw.RentalCarReturn
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bicycles")) => nu.ndw.Bicycles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("emergencyExit")) => nu.ndw.EmergencyExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecified")) => nu.ndw.UnspecifiedValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue29
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue49

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AccessCategoryEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AccessCategoryEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_AccessEquipmentEnumFormat = new DefaultNundw_AccessEquipmentEnumFormat {}
  trait DefaultNundw_AccessEquipmentEnumFormat extends scalaxb.XMLFormat[nu.ndw.AccessEquipmentEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AccessEquipmentEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("barrier")) => nu.ndw.Barrier
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficSignal")) => nu.ndw.TrafficSignal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ticketButtonMachine")) => nu.ndw.TicketButtonMachine
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ticketCardMachine")) => nu.ndw.TicketCardMachine
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("payAndExitMachine")) => nu.ndw.PayAndExitMachine
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue51

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AccessEquipmentEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AccessEquipmentEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_AccessibilityEnumFormat = new DefaultNundw_AccessibilityEnumFormat {}
  trait DefaultNundw_AccessibilityEnumFormat extends scalaxb.XMLFormat[nu.ndw.AccessibilityEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AccessibilityEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("barrierFreeAccessible")) => nu.ndw.BarrierFreeAccessible
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("handicappedAccessible")) => nu.ndw.HandicappedAccessible
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wheelChairAccessible")) => nu.ndw.WheelChairAccessible
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("handicappedEasements")) => nu.ndw.HandicappedEasements
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("orientationSystemForBlindPeople")) => nu.ndw.OrientationSystemForBlindPeople
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("handicappedMarked")) => nu.ndw.HandicappedMarked
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => nu.ndw.NoneTypeValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue28
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue48

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AccessibilityEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AccessibilityEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_AccidentTypeFormat extends scalaxb.ElemNameParser[nu.ndw.AccidentType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Accident")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AccidentType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accidentCause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accidentType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "totalNumberOfPeopleInvolved")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "totalNumberOfVehiclesInvolved")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleInvolved")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfVehiclesInvolved")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfPeopleInvolved")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accidentExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 =>
      nu.ndw.AccidentType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.AccidentCauseEnum](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[nu.ndw.AccidentTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[nu.ndw.Vehicle](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw.GroupOfVehiclesInvolved](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw.GroupOfPeopleInvolved](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.AccidentType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.AccidentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.accidentCause map { scalaxb.toXML[nu.ndw.AccidentCauseEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accidentCause"), __scope, false) } getOrElse {Nil},
        __obj.accidentType flatMap { scalaxb.toXML[nu.ndw.AccidentTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accidentType"), __scope, false) },
        __obj.totalNumberOfPeopleInvolved map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("totalNumberOfPeopleInvolved"), __scope, false) } getOrElse {Nil},
        __obj.totalNumberOfVehiclesInvolved map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("totalNumberOfVehiclesInvolved"), __scope, false) } getOrElse {Nil},
        __obj.vehicleInvolved flatMap { scalaxb.toXML[nu.ndw.Vehicle](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleInvolved"), __scope, false) },
        __obj.groupOfVehiclesInvolved flatMap { scalaxb.toXML[nu.ndw.GroupOfVehiclesInvolved](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfVehiclesInvolved"), __scope, false) },
        __obj.groupOfPeopleInvolved flatMap { scalaxb.toXML[nu.ndw.GroupOfPeopleInvolved](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfPeopleInvolved"), __scope, false) },
        __obj.accidentExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("accidentExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_AccidentCauseEnumFormat = new DefaultNundw_AccidentCauseEnumFormat {}
  trait DefaultNundw_AccidentCauseEnumFormat extends scalaxb.XMLFormat[nu.ndw.AccidentCauseEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AccidentCauseEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("avoidanceOfObstacles")) => nu.ndw.AvoidanceOfObstacles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("driverDistraction")) => nu.ndw.DriverDistraction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("driverDrugAbuse")) => nu.ndw.DriverDrugAbuse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("driverIllness")) => nu.ndw.DriverIllness
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exceedingSpeedsLimits")) => nu.ndw.ExceedingSpeedsLimits
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("excessAlcohol")) => nu.ndw.ExcessAlcohol
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("excessiveDriverTiredness")) => nu.ndw.ExcessiveDriverTiredness
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("impermissibleManoeuvre")) => nu.ndw.ImpermissibleManoeuvre
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("limitedVisibility")) => nu.ndw.LimitedVisibility
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notKeepingASafeDistance")) => nu.ndw.NotKeepingASafeDistance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onTheWrongSideOfTheRoad")) => nu.ndw.OnTheWrongSideOfTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pedestrianInRoad")) => nu.ndw.PedestrianInRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("poorLaneAdherence")) => nu.ndw.PoorLaneAdherence
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("poorMergeEntryOrExitJudgement")) => nu.ndw.PoorMergeEntryOrExitJudgement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("poorRoadSurfaceCondition")) => nu.ndw.PoorRoadSurfaceCondition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("poorSurfaceAdherence")) => nu.ndw.PoorSurfaceAdherence
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("undisclosed")) => nu.ndw.Undisclosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue27
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleFailure")) => nu.ndw.VehicleFailure
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue47

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AccidentCauseEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AccidentCauseEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_AccidentTypeEnumFormat = new DefaultNundw_AccidentTypeEnumFormat {}
  trait DefaultNundw_AccidentTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.AccidentTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AccidentTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accident")) => nu.ndw.AccidentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvolvingBicycles")) => nu.ndw.AccidentInvolvingBicycles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvolvingBuses")) => nu.ndw.AccidentInvolvingBuses
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvolvingHazardousMaterials")) => nu.ndw.AccidentInvolvingHazardousMaterials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvolvingHeavyLorries")) => nu.ndw.AccidentInvolvingHeavyLorries
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvolvingMassTransitVehicle")) => nu.ndw.AccidentInvolvingMassTransitVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvolvingMopeds")) => nu.ndw.AccidentInvolvingMopeds
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvolvingMotorcycles")) => nu.ndw.AccidentInvolvingMotorcycles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvolvingRadioactiveMaterial")) => nu.ndw.AccidentInvolvingRadioactiveMaterial
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvolvingTrain")) => nu.ndw.AccidentInvolvingTrain
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("chemicalSpillageAccident")) => nu.ndw.ChemicalSpillageAccident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("collision")) => nu.ndw.Collision
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("collisionWithAnimal")) => nu.ndw.CollisionWithAnimal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("collisionWithObstruction")) => nu.ndw.CollisionWithObstruction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("collisionWithPerson")) => nu.ndw.CollisionWithPerson
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("earlierAccident")) => nu.ndw.EarlierAccident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fuelSpillageAccident")) => nu.ndw.FuelSpillageAccident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("headOnCollision")) => nu.ndw.HeadOnCollision
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("headOnOrSideCollision")) => nu.ndw.HeadOnOrSideCollision
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("jackknifedArticulatedLorry")) => nu.ndw.JackknifedArticulatedLorry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("jackknifedCaravan")) => nu.ndw.JackknifedCaravan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("jackknifedTrailer")) => nu.ndw.JackknifedTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("multipleVehicleCollision")) => nu.ndw.MultipleVehicleCollision
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("multivehicleAccident")) => nu.ndw.MultivehicleAccident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("oilSpillageAccident")) => nu.ndw.OilSpillageAccident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overturnedHeavyLorry")) => nu.ndw.OverturnedHeavyLorry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overturnedTrailer")) => nu.ndw.OverturnedTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overturnedVehicle")) => nu.ndw.OverturnedVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rearCollision")) => nu.ndw.RearCollision
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("secondaryAccident")) => nu.ndw.SecondaryAccident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("seriousAccident")) => nu.ndw.SeriousAccident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sideCollision")) => nu.ndw.SideCollision
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleOffRoad")) => nu.ndw.VehicleOffRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleSpunAround")) => nu.ndw.VehicleSpunAround
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue52

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AccidentTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AccidentTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ActivityFormat extends scalaxb.XMLFormat[nu.ndw.Activity] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Activity] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PublicEvent")) => Right(scalaxb.fromXML[nu.ndw.PublicEvent](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AuthorityOperation")) => Right(scalaxb.fromXML[nu.ndw.AuthorityOperation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("DisturbanceActivity")) => Right(scalaxb.fromXML[nu.ndw.DisturbanceActivity](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Activity, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.PublicEvent => scalaxb.toXML[nu.ndw.PublicEvent](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.AuthorityOperation => scalaxb.toXML[nu.ndw.AuthorityOperation](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.DisturbanceActivity => scalaxb.toXML[nu.ndw.DisturbanceActivity](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_AffectedCarriagewayAndLanesFormat extends scalaxb.ElemNameParser[nu.ndw.AffectedCarriagewayAndLanes] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AffectedCarriagewayAndLanes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AffectedCarriagewayAndLanes] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "carriageway")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lane")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "footpath")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lengthAffected")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "affectedCarriagewayAndLanesExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.AffectedCarriagewayAndLanes(scalaxb.fromXML[nu.ndw.CarriagewayEnum](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[nu.ndw.LaneEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AffectedCarriagewayAndLanes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.CarriagewayEnum](__obj.carriageway, Some("http://datex2.eu/schema/2/2_0"), Some("carriageway"), __scope, false),
        __obj.lane flatMap { scalaxb.toXML[nu.ndw.LaneEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("lane"), __scope, false) },
        __obj.footpath map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("footpath"), __scope, false) } getOrElse {Nil},
        __obj.lengthAffected map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("lengthAffected"), __scope, false) } getOrElse {Nil},
        __obj.affectedCarriagewayAndLanesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("affectedCarriagewayAndLanesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCAreaFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCArea] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCArea")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCArea] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationCountryCode")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableNumber")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableVersion")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "areaLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCAreaExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.AlertCArea(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.AlertCLocation](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCArea, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.alertCLocationCountryCode, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationCountryCode"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableNumber, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableNumber"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableVersion, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableVersion"), __scope, false),
        scalaxb.toXML[nu.ndw.AlertCLocation](__obj.areaLocation, Some("http://datex2.eu/schema/2/2_0"), Some("areaLocation"), __scope, false),
        __obj.alertCAreaExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCAreaExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCDirectionFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCDirection] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCDirection")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCDirection] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCDirectionCoded")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCDirectionNamed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCDirectionSense")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCDirectionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.AlertCDirection(scalaxb.fromXML[nu.ndw.AlertCDirectionEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCDirection, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.AlertCDirectionEnum](__obj.alertCDirectionCoded, Some("http://datex2.eu/schema/2/2_0"), Some("alertCDirectionCoded"), __scope, false),
        __obj.alertCDirectionNamed map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCDirectionNamed"), __scope, false) } getOrElse {Nil},
        __obj.alertCDirectionSense map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCDirectionSense"), __scope, false) } getOrElse {Nil},
        __obj.alertCDirectionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCDirectionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_AlertCDirectionEnumFormat = new DefaultNundw_AlertCDirectionEnumFormat {}
  trait DefaultNundw_AlertCDirectionEnumFormat extends scalaxb.XMLFormat[nu.ndw.AlertCDirectionEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AlertCDirectionEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("both")) => nu.ndw.BothValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("negative")) => nu.ndw.Negative
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("positive")) => nu.ndw.Positive
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue26

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AlertCDirectionEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AlertCDirectionEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_AlertCLinearFormat extends scalaxb.XMLFormat[nu.ndw.AlertCLinear] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AlertCLinear] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AlertCMethod4Linear")) => Right(scalaxb.fromXML[nu.ndw.AlertCMethod4Linear](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AlertCMethod2Linear")) => Right(scalaxb.fromXML[nu.ndw.AlertCMethod2Linear](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AlertCLinearByCode")) => Right(scalaxb.fromXML[nu.ndw.AlertCLinearByCode](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.AlertCLinear, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.AlertCMethod4Linear => scalaxb.toXML[nu.ndw.AlertCMethod4Linear](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.AlertCMethod2Linear => scalaxb.toXML[nu.ndw.AlertCMethod2Linear](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.AlertCLinearByCode => scalaxb.toXML[nu.ndw.AlertCLinearByCode](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_AlertCLinearByCodeFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCLinearByCode] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCLinearByCode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCLinearByCode] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationCountryCode")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableNumber")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableVersion")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLinearExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCDirection")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationCodeForLinearLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLinearByCodeExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.AlertCLinearByCode(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.AlertCDirection](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.AlertCLocation](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCLinearByCode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.alertCLocationCountryCode, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationCountryCode"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableNumber, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableNumber"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableVersion, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableVersion"), __scope, false),
        __obj.alertCLinearExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLinearExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.AlertCDirection](__obj.alertCDirection, Some("http://datex2.eu/schema/2/2_0"), Some("alertCDirection"), __scope, false),
        scalaxb.toXML[nu.ndw.AlertCLocation](__obj.locationCodeForLinearLocation, Some("http://datex2.eu/schema/2/2_0"), Some("locationCodeForLinearLocation"), __scope, false),
        __obj.alertCLinearByCodeExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLinearByCodeExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCLocationFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCLocation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCLocation] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationName")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "specificLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.AlertCLocation(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.alertCLocationName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.specificLocation, Some("http://datex2.eu/schema/2/2_0"), Some("specificLocation"), __scope, false),
        __obj.alertCLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCMethod2LinearFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCMethod2Linear] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCMethod2Linear")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCMethod2Linear] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationCountryCode")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableNumber")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableVersion")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLinearExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCDirection")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod2PrimaryPointLocation")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod2SecondaryPointLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod2LinearExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.AlertCMethod2Linear(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.AlertCDirection](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.AlertCMethod2PrimaryPointLocation](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.AlertCMethod2SecondaryPointLocation](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCMethod2Linear, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.alertCLocationCountryCode, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationCountryCode"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableNumber, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableNumber"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableVersion, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableVersion"), __scope, false),
        __obj.alertCLinearExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLinearExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.AlertCDirection](__obj.alertCDirection, Some("http://datex2.eu/schema/2/2_0"), Some("alertCDirection"), __scope, false),
        scalaxb.toXML[nu.ndw.AlertCMethod2PrimaryPointLocation](__obj.alertCMethod2PrimaryPointLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod2PrimaryPointLocation"), __scope, false),
        scalaxb.toXML[nu.ndw.AlertCMethod2SecondaryPointLocation](__obj.alertCMethod2SecondaryPointLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod2SecondaryPointLocation"), __scope, false),
        __obj.alertCMethod2LinearExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod2LinearExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCMethod2PointFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCMethod2Point] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCMethod2Point")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCMethod2Point] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationCountryCode")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableNumber")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableVersion")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCPointExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCDirection")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod2PrimaryPointLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod2PointExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.AlertCMethod2Point(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.AlertCDirection](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.AlertCMethod2PrimaryPointLocation](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCMethod2Point, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.alertCLocationCountryCode, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationCountryCode"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableNumber, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableNumber"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableVersion, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableVersion"), __scope, false),
        __obj.alertCPointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCPointExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.AlertCDirection](__obj.alertCDirection, Some("http://datex2.eu/schema/2/2_0"), Some("alertCDirection"), __scope, false),
        scalaxb.toXML[nu.ndw.AlertCMethod2PrimaryPointLocation](__obj.alertCMethod2PrimaryPointLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod2PrimaryPointLocation"), __scope, false),
        __obj.alertCMethod2PointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod2PointExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCMethod2PrimaryPointLocationFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCMethod2PrimaryPointLocation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCMethod2PrimaryPointLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCMethod2PrimaryPointLocation] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod2PrimaryPointLocationExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.AlertCMethod2PrimaryPointLocation(scalaxb.fromXML[nu.ndw.AlertCLocation](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCMethod2PrimaryPointLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.AlertCLocation](__obj.alertCLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocation"), __scope, false),
        __obj.alertCMethod2PrimaryPointLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod2PrimaryPointLocationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCMethod2SecondaryPointLocationFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCMethod2SecondaryPointLocation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCMethod2SecondaryPointLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCMethod2SecondaryPointLocation] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod2SecondaryPointLocationExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.AlertCMethod2SecondaryPointLocation(scalaxb.fromXML[nu.ndw.AlertCLocation](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCMethod2SecondaryPointLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.AlertCLocation](__obj.alertCLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocation"), __scope, false),
        __obj.alertCMethod2SecondaryPointLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod2SecondaryPointLocationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCMethod4LinearFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCMethod4Linear] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCMethod4Linear")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCMethod4Linear] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationCountryCode")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableNumber")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableVersion")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLinearExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCDirection")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod4PrimaryPointLocation")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod4SecondaryPointLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod4LinearExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.AlertCMethod4Linear(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.AlertCDirection](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.AlertCMethod4PrimaryPointLocation](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.AlertCMethod4SecondaryPointLocation](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCMethod4Linear, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.alertCLocationCountryCode, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationCountryCode"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableNumber, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableNumber"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableVersion, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableVersion"), __scope, false),
        __obj.alertCLinearExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLinearExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.AlertCDirection](__obj.alertCDirection, Some("http://datex2.eu/schema/2/2_0"), Some("alertCDirection"), __scope, false),
        scalaxb.toXML[nu.ndw.AlertCMethod4PrimaryPointLocation](__obj.alertCMethod4PrimaryPointLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod4PrimaryPointLocation"), __scope, false),
        scalaxb.toXML[nu.ndw.AlertCMethod4SecondaryPointLocation](__obj.alertCMethod4SecondaryPointLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod4SecondaryPointLocation"), __scope, false),
        __obj.alertCMethod4LinearExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod4LinearExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCMethod4PointFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCMethod4Point] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCMethod4Point")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCMethod4Point] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationCountryCode")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableNumber")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocationTableVersion")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCPointExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCDirection")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod4PrimaryPointLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod4PointExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.AlertCMethod4Point(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.AlertCDirection](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.AlertCMethod4PrimaryPointLocation](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCMethod4Point, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.alertCLocationCountryCode, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationCountryCode"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableNumber, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableNumber"), __scope, false),
        scalaxb.toXML[String](__obj.alertCLocationTableVersion, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocationTableVersion"), __scope, false),
        __obj.alertCPointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCPointExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.AlertCDirection](__obj.alertCDirection, Some("http://datex2.eu/schema/2/2_0"), Some("alertCDirection"), __scope, false),
        scalaxb.toXML[nu.ndw.AlertCMethod4PrimaryPointLocation](__obj.alertCMethod4PrimaryPointLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod4PrimaryPointLocation"), __scope, false),
        __obj.alertCMethod4PointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod4PointExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCMethod4PrimaryPointLocationFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCMethod4PrimaryPointLocation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCMethod4PrimaryPointLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCMethod4PrimaryPointLocation] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocation")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "offsetDistance")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod4PrimaryPointLocationExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.AlertCMethod4PrimaryPointLocation(scalaxb.fromXML[nu.ndw.AlertCLocation](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OffsetDistance](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCMethod4PrimaryPointLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.AlertCLocation](__obj.alertCLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocation"), __scope, false),
        scalaxb.toXML[nu.ndw.OffsetDistance](__obj.offsetDistance, Some("http://datex2.eu/schema/2/2_0"), Some("offsetDistance"), __scope, false),
        __obj.alertCMethod4PrimaryPointLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod4PrimaryPointLocationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCMethod4SecondaryPointLocationFormat extends scalaxb.ElemNameParser[nu.ndw.AlertCMethod4SecondaryPointLocation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AlertCMethod4SecondaryPointLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AlertCMethod4SecondaryPointLocation] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLocation")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "offsetDistance")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCMethod4SecondaryPointLocationExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.AlertCMethod4SecondaryPointLocation(scalaxb.fromXML[nu.ndw.AlertCLocation](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OffsetDistance](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AlertCMethod4SecondaryPointLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.AlertCLocation](__obj.alertCLocation, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLocation"), __scope, false),
        scalaxb.toXML[nu.ndw.OffsetDistance](__obj.offsetDistance, Some("http://datex2.eu/schema/2/2_0"), Some("offsetDistance"), __scope, false),
        __obj.alertCMethod4SecondaryPointLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCMethod4SecondaryPointLocationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AlertCPointFormat extends scalaxb.XMLFormat[nu.ndw.AlertCPoint] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AlertCPoint] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AlertCMethod2Point")) => Right(scalaxb.fromXML[nu.ndw.AlertCMethod2Point](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AlertCMethod4Point")) => Right(scalaxb.fromXML[nu.ndw.AlertCMethod4Point](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.AlertCPoint, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.AlertCMethod2Point => scalaxb.toXML[nu.ndw.AlertCMethod2Point](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.AlertCMethod4Point => scalaxb.toXML[nu.ndw.AlertCMethod4Point](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_AnimalPresenceObstructionFormat extends scalaxb.ElemNameParser[nu.ndw.AnimalPresenceObstruction] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AnimalPresenceObstruction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AnimalPresenceObstruction] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfObstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityOfObstruction")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "obstructionExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alive")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "animalPresenceType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "animalPresenceObstructionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 =>
      nu.ndw.AnimalPresenceObstruction(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.AnimalPresenceTypeEnum](p24, scalaxb.ElemName(node) :: stack),
        p25.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.AnimalPresenceObstruction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.AnimalPresenceObstruction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.numberOfObstructions map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfObstructions"), __scope, false) } getOrElse {Nil},
        __obj.mobilityOfObstruction map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityOfObstruction"), __scope, false) } getOrElse {Nil},
        __obj.obstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("obstructionExtension"), __scope, false) } getOrElse {Nil},
        __obj.alive map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("alive"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.AnimalPresenceTypeEnum](__obj.animalPresenceType, Some("http://datex2.eu/schema/2/2_0"), Some("animalPresenceType"), __scope, false),
        __obj.animalPresenceObstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("animalPresenceObstructionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_AnimalPresenceTypeEnumFormat = new DefaultNundw_AnimalPresenceTypeEnumFormat {}
  trait DefaultNundw_AnimalPresenceTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.AnimalPresenceTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AnimalPresenceTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("animalsOnTheRoad")) => nu.ndw.AnimalsOnTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("herdOfAnimalsOnTheRoad")) => nu.ndw.HerdOfAnimalsOnTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("largeAnimalsOnTheRoad")) => nu.ndw.LargeAnimalsOnTheRoad

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AnimalPresenceTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AnimalPresenceTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ApplicationRateValueFormat extends scalaxb.ElemNameParser[nu.ndw.ApplicationRateValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ApplicationRateValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ApplicationRateValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicationRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicationRateValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.ApplicationRateValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ApplicationRateValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ApplicationRateValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.applicationRate, Some("http://datex2.eu/schema/2/2_0"), Some("applicationRate"), __scope, false),
        __obj.applicationRateValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicationRateValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AreaFormat extends scalaxb.ElemNameParser[nu.ndw.Area] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Area")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Area] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocationsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "externalReferencing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationForDisplay")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegAreaLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "areaExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.Area(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.ExternalReferencing](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.PointCoordinates](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.AlertCArea](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.TpegAreaLocation](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._AreaExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Area, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupOfLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocationsExtension"), __scope, false) } getOrElse {Nil},
        __obj.externalReferencing flatMap { scalaxb.toXML[nu.ndw.ExternalReferencing](_, Some("http://datex2.eu/schema/2/2_0"), Some("externalReferencing"), __scope, false) },
        __obj.locationForDisplay map { scalaxb.toXML[nu.ndw.PointCoordinates](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationForDisplay"), __scope, false) } getOrElse {Nil},
        __obj.locationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationExtension"), __scope, false) } getOrElse {Nil},
        __obj.alertCArea map { scalaxb.toXML[nu.ndw.AlertCArea](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCArea"), __scope, false) } getOrElse {Nil},
        __obj.tpegAreaLocation map { scalaxb.toXML[nu.ndw.TpegAreaLocation](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegAreaLocation"), __scope, false) } getOrElse {Nil},
        __obj.areaExtension map { scalaxb.toXML[nu.ndw._AreaExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("areaExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AreaDestinationFormat extends scalaxb.ElemNameParser[nu.ndw.AreaDestination] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AreaDestination")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AreaDestination] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "destinationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "area")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "areaDestinationExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.AreaDestination(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Area](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AreaDestination, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.destinationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("destinationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Area](__obj.area, Some("http://datex2.eu/schema/2/2_0"), Some("area"), __scope, false),
        __obj.areaDestinationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("areaDestinationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AreaExtendedFormat extends scalaxb.ElemNameParser[nu.ndw.AreaExtended] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AreaExtended")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AreaExtended] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "namedArea")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "polygonArea")) ^^
      { case p1 ~ p2 =>
      nu.ndw.AreaExtended(p1.headOption map { scalaxb.fromXML[nu.ndw.NamedArea](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.PolygonArea](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AreaExtended, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.namedArea map { scalaxb.toXML[nu.ndw.NamedArea](_, Some("http://datex2.eu/schema/2/2_0"), Some("namedArea"), __scope, false) } getOrElse {Nil},
        __obj.polygonArea flatMap { scalaxb.toXML[nu.ndw.PolygonArea](_, Some("http://datex2.eu/schema/2/2_0"), Some("polygonArea"), __scope, false) })

  }

  def buildNundw_AreaOfInterestEnumFormat = new DefaultNundw_AreaOfInterestEnumFormat {}
  trait DefaultNundw_AreaOfInterestEnumFormat extends scalaxb.XMLFormat[nu.ndw.AreaOfInterestEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AreaOfInterestEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("continentWide")) => nu.ndw.ContinentWide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("national")) => nu.ndw.National
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("neighbouringCountries")) => nu.ndw.NeighbouringCountries
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notSpecified")) => nu.ndw.NotSpecified
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("regional")) => nu.ndw.Regional

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AreaOfInterestEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AreaOfInterestEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_AuthorityOperationFormat extends scalaxb.ElemNameParser[nu.ndw.AuthorityOperation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AuthorityOperation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AuthorityOperation] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityOfActivity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "activityExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "authorityOperationType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "authorityOperationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      nu.ndw.AuthorityOperation(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.AuthorityOperationTypeEnum](p22, scalaxb.ElemName(node) :: stack),
        p23.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.AuthorityOperation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.AuthorityOperation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.mobilityOfActivity map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityOfActivity"), __scope, false) } getOrElse {Nil},
        __obj.activityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("activityExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.AuthorityOperationTypeEnum](__obj.authorityOperationType, Some("http://datex2.eu/schema/2/2_0"), Some("authorityOperationType"), __scope, false),
        __obj.authorityOperationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("authorityOperationExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_AuthorityOperationTypeEnumFormat = new DefaultNundw_AuthorityOperationTypeEnumFormat {}
  trait DefaultNundw_AuthorityOperationTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.AuthorityOperationTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AuthorityOperationTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accidentInvestigationWork")) => nu.ndw.AccidentInvestigationWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bombSquadInAction")) => nu.ndw.BombSquadInAction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("civilEmergency")) => nu.ndw.CivilEmergency
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("customsOperation")) => nu.ndw.CustomsOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("juridicalReconstruction")) => nu.ndw.JuridicalReconstruction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("policeCheckPoint")) => nu.ndw.PoliceCheckPoint
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("policeInvestigation")) => nu.ndw.PoliceInvestigation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadOperatorCheckPoint")) => nu.ndw.RoadOperatorCheckPoint
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("survey")) => nu.ndw.Survey
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("transportOfVip")) => nu.ndw.TransportOfVip
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("undefinedAuthorityActivity")) => nu.ndw.UndefinedAuthorityActivity
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleInspectionCheckPoint")) => nu.ndw.VehicleInspectionCheckPoint
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleWeighing")) => nu.ndw.VehicleWeighing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("weighInMotion")) => nu.ndw.WeighInMotion
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue53

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AuthorityOperationTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AuthorityOperationTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_AvailabilityEnumFormat = new DefaultNundw_AvailabilityEnumFormat {}
  trait DefaultNundw_AvailabilityEnumFormat extends scalaxb.XMLFormat[nu.ndw.AvailabilityEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.AvailabilityEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("available")) => nu.ndw.Available
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notAvailable")) => nu.ndw.NotAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue25

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.AvailabilityEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.AvailabilityEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_AxleFlowValueFormat extends scalaxb.ElemNameParser[nu.ndw.AxleFlowValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AxleFlowValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AxleFlowValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axleFlowRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axleFlowValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.AxleFlowValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.AxleFlowValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.AxleFlowValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.axleFlowRate, Some("http://datex2.eu/schema/2/2_0"), Some("axleFlowRate"), __scope, false),
        __obj.axleFlowValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("axleFlowValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AxleSpacingFormat extends scalaxb.ElemNameParser[nu.ndw.AxleSpacing] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AxleSpacing")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AxleSpacing] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axleSpacing")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axleSpacingSequenceIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axleSpacingExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.AxleSpacing(scalaxb.fromXML[Float](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AxleSpacing, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Float](__obj.axleSpacing, Some("http://datex2.eu/schema/2/2_0"), Some("axleSpacing"), __scope, false),
        scalaxb.toXML[Int](__obj.axleSpacingSequenceIdentifier, Some("http://datex2.eu/schema/2/2_0"), Some("axleSpacingSequenceIdentifier"), __scope, false),
        __obj.axleSpacingExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("axleSpacingExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_AxleWeightFormat extends scalaxb.ElemNameParser[nu.ndw.AxleWeight] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("AxleWeight")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.AxleWeight] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axlePositionIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axleWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumPermittedAxleWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axleWeightExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.AxleWeight(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.AxleWeight, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.axlePositionIdentifier, Some("http://datex2.eu/schema/2/2_0"), Some("axlePositionIdentifier"), __scope, false),
        __obj.axleWeight map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("axleWeight"), __scope, false) } getOrElse {Nil},
        __obj.maximumPermittedAxleWeight map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumPermittedAxleWeight"), __scope, false) } getOrElse {Nil},
        __obj.axleWeightExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("axleWeightExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_BasicDataFormat extends scalaxb.XMLFormat[nu.ndw.BasicData] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.BasicData] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficStatus")) => Right(scalaxb.fromXML[nu.ndw.TrafficStatus](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficData")) => Right(scalaxb.fromXML[nu.ndw.TrafficData](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficHeadway")) => Right(scalaxb.fromXML[nu.ndw.TrafficHeadwayType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficFlow")) => Right(scalaxb.fromXML[nu.ndw.TrafficFlowType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficConcentration")) => Right(scalaxb.fromXML[nu.ndw.TrafficConcentrationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("IndividualVehicleDataValues")) => Right(scalaxb.fromXML[nu.ndw.IndividualVehicleDataValues](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficSpeed")) => Right(scalaxb.fromXML[nu.ndw.TrafficSpeed](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TravelTimeData")) => Right(scalaxb.fromXML[nu.ndw.TravelTimeData](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WeatherData")) => Right(scalaxb.fromXML[nu.ndw.WeatherData](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TemperatureInformation")) => Right(scalaxb.fromXML[nu.ndw.TemperatureInformationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadSurfaceConditionInformation")) => Right(scalaxb.fromXML[nu.ndw.RoadSurfaceConditionInformationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PollutionInformation")) => Right(scalaxb.fromXML[nu.ndw.PollutionInformationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("HumidityInformation")) => Right(scalaxb.fromXML[nu.ndw.HumidityInformationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PrecipitationInformation")) => Right(scalaxb.fromXML[nu.ndw.PrecipitationInformation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VisibilityInformation")) => Right(scalaxb.fromXML[nu.ndw.VisibilityInformation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WindInformation")) => Right(scalaxb.fromXML[nu.ndw.WindInformation](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.BasicData, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TrafficStatus => scalaxb.toXML[nu.ndw.TrafficStatus](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TrafficData => scalaxb.toXML[nu.ndw.TrafficData](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TravelTimeData => scalaxb.toXML[nu.ndw.TravelTimeData](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.WeatherData => scalaxb.toXML[nu.ndw.WeatherData](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildNundw_CarParkConfigurationEnumFormat = new DefaultNundw_CarParkConfigurationEnumFormat {}
  trait DefaultNundw_CarParkConfigurationEnumFormat extends scalaxb.XMLFormat[nu.ndw.CarParkConfigurationEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.CarParkConfigurationEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("multiStorey")) => nu.ndw.MultiStorey
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkAndRide")) => nu.ndw.ParkAndRide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("singleLevel")) => nu.ndw.SingleLevel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("underground")) => nu.ndw.Underground

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.CarParkConfigurationEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.CarParkConfigurationEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_CarParksFormat extends scalaxb.ElemNameParser[nu.ndw.CarParks] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("CarParks")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.CarParks] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonRoadEventInformationExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "carParkConfiguration")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "carParkIdentity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "carParkOccupancy")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "carParkStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "exitRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "fillRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfVacantParkingSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "occupiedSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "queuingTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "totalCapacity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "carParksExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 =>
      nu.ndw.CarParks(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.CarParkConfigurationEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p21, scalaxb.ElemName(node) :: stack),
        p22.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.CarParkStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.CarParks, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.CarParks, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.nonRoadEventInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonRoadEventInformationExtension"), __scope, false) } getOrElse {Nil},
        __obj.carParkConfiguration map { scalaxb.toXML[nu.ndw.CarParkConfigurationEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("carParkConfiguration"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.carParkIdentity, Some("http://datex2.eu/schema/2/2_0"), Some("carParkIdentity"), __scope, false),
        __obj.carParkOccupancy map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("carParkOccupancy"), __scope, false) } getOrElse {Nil},
        __obj.carParkStatus map { scalaxb.toXML[nu.ndw.CarParkStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("carParkStatus"), __scope, false) } getOrElse {Nil},
        __obj.exitRate map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("exitRate"), __scope, false) } getOrElse {Nil},
        __obj.fillRate map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("fillRate"), __scope, false) } getOrElse {Nil},
        __obj.numberOfVacantParkingSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfVacantParkingSpaces"), __scope, false) } getOrElse {Nil},
        __obj.occupiedSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("occupiedSpaces"), __scope, false) } getOrElse {Nil},
        __obj.queuingTime map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("queuingTime"), __scope, false) } getOrElse {Nil},
        __obj.totalCapacity map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("totalCapacity"), __scope, false) } getOrElse {Nil},
        __obj.carParksExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("carParksExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_CarParkStatusEnumFormat = new DefaultNundw_CarParkStatusEnumFormat {}
  trait DefaultNundw_CarParkStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.CarParkStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.CarParkStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carParkClosed")) => nu.ndw.CarParkClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("allCarParksFull")) => nu.ndw.AllCarParksFull
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carParkFacilityFaulty")) => nu.ndw.CarParkFacilityFaulty
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carParkFull")) => nu.ndw.CarParkFullValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carParkStatusUnknown")) => nu.ndw.CarParkStatusUnknown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("enoughSpacesAvailable")) => nu.ndw.EnoughSpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("multiStoryCarParksFull")) => nu.ndw.MultiStoryCarParksFull
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noMoreParkingSpacesAvailable")) => nu.ndw.NoMoreParkingSpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noParkAndRideInformation")) => nu.ndw.NoParkAndRideInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noParkingAllowed")) => nu.ndw.NoParkingAllowed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noParkingInformationAvailable")) => nu.ndw.NoParkingInformationAvailableValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("normalParkingRestrictionsLifted")) => nu.ndw.NormalParkingRestrictionsLifted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onlyAFewSpacesAvailable")) => nu.ndw.OnlyAFewSpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkAndRideServiceNotOperating")) => nu.ndw.ParkAndRideServiceNotOperating
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkAndRideServiceOperating")) => nu.ndw.ParkAndRideServiceOperating
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("specialParkingRestrictionsInForce")) => nu.ndw.SpecialParkingRestrictionsInForce

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.CarParkStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.CarParkStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_CarriagewayEnumFormat = new DefaultNundw_CarriagewayEnumFormat {}
  trait DefaultNundw_CarriagewayEnumFormat extends scalaxb.XMLFormat[nu.ndw.CarriagewayEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.CarriagewayEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("connectingCarriageway")) => nu.ndw.ConnectingCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entrySlipRoad")) => nu.ndw.EntrySlipRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exitSlipRoad")) => nu.ndw.ExitSlipRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("flyover")) => nu.ndw.Flyover
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("leftHandFeederRoad")) => nu.ndw.LeftHandFeederRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("leftHandParallelCarriageway")) => nu.ndw.LeftHandParallelCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mainCarriageway")) => nu.ndw.MainCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("oppositeCarriageway")) => nu.ndw.OppositeCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parallelCarriageway")) => nu.ndw.ParallelCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rightHandFeederRoad")) => nu.ndw.RightHandFeederRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rightHandParallelCarriageway")) => nu.ndw.RightHandParallelCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roundabout")) => nu.ndw.RoundaboutValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceRoad")) => nu.ndw.ServiceRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slipRoads")) => nu.ndw.SlipRoads
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("underpass")) => nu.ndw.Underpass

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.CarriagewayEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.CarriagewayEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_CatalogueReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.CatalogueReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("CatalogueReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.CatalogueReference] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "keyCatalogueReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "catalogueReferenceExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.CatalogueReference(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.CatalogueReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.keyCatalogueReference, Some("http://datex2.eu/schema/2/2_0"), Some("keyCatalogueReference"), __scope, false),
        __obj.catalogueReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("catalogueReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_CauseFormat extends scalaxb.XMLFormat[nu.ndw.Cause] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Cause] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ManagedCause")) => Right(scalaxb.fromXML[nu.ndw.ManagedCause](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonManagedCause")) => Right(scalaxb.fromXML[nu.ndw.NonManagedCause](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Cause, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.ManagedCause => scalaxb.toXML[nu.ndw.ManagedCause](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.NonManagedCause => scalaxb.toXML[nu.ndw.NonManagedCause](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildNundw_CauseTypeEnumFormat = new DefaultNundw_CauseTypeEnumFormat {}
  trait DefaultNundw_CauseTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.CauseTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.CauseTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accident")) => nu.ndw.AccidentValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("congestion")) => nu.ndw.Congestion
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("earlierAccident")) => nu.ndw.EarlierAccidentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("earlierEvent")) => nu.ndw.EarlierEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("earlierIncident")) => nu.ndw.EarlierIncident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("equipmentFailure")) => nu.ndw.EquipmentFailure
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("excessiveHeat")) => nu.ndw.ExcessiveHeat
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("frost")) => nu.ndw.FrostValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("holidayTraffic")) => nu.ndw.HolidayTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("infrastructureFailure")) => nu.ndw.InfrastructureFailure
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("largeNumbersOfVisitors")) => nu.ndw.LargeNumbersOfVisitors
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("obstruction")) => nu.ndw.Obstruction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pollutionAlert")) => nu.ndw.PollutionAlert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("poorWeather")) => nu.ndw.PoorWeather
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("problemsAtBorderPost")) => nu.ndw.ProblemsAtBorderPost
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("problemsAtCustomPost")) => nu.ndw.ProblemsAtCustomPost
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("problemsOnLocalRoads")) => nu.ndw.ProblemsOnLocalRoads
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("radioactiveLeakAlert")) => nu.ndw.RadioactiveLeakAlert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsideEvent")) => nu.ndw.RoadsideEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rubberNecking")) => nu.ndw.RubberNecking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityIncident")) => nu.ndw.SecurityIncident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shearWeightOfTraffic")) => nu.ndw.ShearWeightOfTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("technicalProblems")) => nu.ndw.TechnicalProblems
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("terrorism")) => nu.ndw.Terrorism
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("toxicCloudAlert")) => nu.ndw.ToxicCloudAlert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vandalism")) => nu.ndw.Vandalism
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue54

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.CauseTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.CauseTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ChangedFlagEnumFormat = new DefaultNundw_ChangedFlagEnumFormat {}
  trait DefaultNundw_ChangedFlagEnumFormat extends scalaxb.XMLFormat[nu.ndw.ChangedFlagEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ChangedFlagEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("catalogue")) => nu.ndw.CatalogueValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("filter")) => nu.ndw.FilterValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ChangedFlagEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ChangedFlagEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ChargeFormat extends scalaxb.ElemNameParser[nu.ndw.Charge] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Charge")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Charge] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "charge")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeInterval")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeTypeDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxIterationsOfCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "minIterationsOfCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeOrderIndex")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "timePeriodOfDay")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      nu.ndw.Charge(scalaxb.fromXML[BigDecimal](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.ChargeTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.TimePeriodOfDay](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Charge, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigDecimal](__obj.charge, Some("http://datex2.eu/schema/2/2_0"), Some("charge"), __scope, false),
        __obj.chargeInterval map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeInterval"), __scope, false) } getOrElse {Nil},
        __obj.chargeType map { scalaxb.toXML[nu.ndw.ChargeTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeType"), __scope, false) } getOrElse {Nil},
        __obj.chargeTypeDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeTypeDescription"), __scope, false) } getOrElse {Nil},
        __obj.maxIterationsOfCharge map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxIterationsOfCharge"), __scope, false) } getOrElse {Nil},
        __obj.minIterationsOfCharge map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("minIterationsOfCharge"), __scope, false) } getOrElse {Nil},
        __obj.chargeOrderIndex map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeOrderIndex"), __scope, false) } getOrElse {Nil},
        __obj.timePeriodOfDay map { scalaxb.toXML[nu.ndw.TimePeriodOfDay](_, Some("http://datex2.eu/schema/2/2_0"), Some("timePeriodOfDay"), __scope, false) } getOrElse {Nil},
        __obj.chargeExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ChargeBandFormat extends scalaxb.ElemNameParser[nu.ndw.ChargeBand] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ChargeBand")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ChargeBand] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeCurrency")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumDuration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeBandName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForUser")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "charge")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForPeriod")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForVehicles")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPermit")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeBandExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      nu.ndw.ChargeBand(scalaxb.fromXML[nu.ndw.CurrencyEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.UserTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.Charge](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.OverallPeriod](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[nu.ndw.ParkingPermit](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ChargeBand, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ChargeBand, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.CurrencyEnum](__obj.chargeCurrency, Some("http://datex2.eu/schema/2/2_0"), Some("chargeCurrency"), __scope, false),
        __obj.maximumDuration map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumDuration"), __scope, false) } getOrElse {Nil},
        __obj.chargeBandName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeBandName"), __scope, false) } getOrElse {Nil},
        __obj.applicableForUser flatMap { scalaxb.toXML[nu.ndw.UserTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForUser"), __scope, false) },
        __obj.charge flatMap { scalaxb.toXML[nu.ndw.Charge](_, Some("http://datex2.eu/schema/2/2_0"), Some("charge"), __scope, false) },
        __obj.applicableForPeriod map { scalaxb.toXML[nu.ndw.OverallPeriod](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForPeriod"), __scope, false) } getOrElse {Nil},
        __obj.applicableForVehicles flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForVehicles"), __scope, false) },
        __obj.parkingPermit flatMap { scalaxb.toXML[nu.ndw.ParkingPermit](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPermit"), __scope, false) },
        __obj.chargeBandExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeBandExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ChargeBandByReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.ChargeBandByReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ChargeBandByReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ChargeBandByReference] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeBandReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeBandByReferenceExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.ChargeBandByReference(scalaxb.fromXML[nu.ndw._ChargeBandVersionedReference](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ChargeBandByReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._ChargeBandVersionedReference](__obj.chargeBandReference, Some("http://datex2.eu/schema/2/2_0"), Some("chargeBandReference"), __scope, false),
        __obj.chargeBandByReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeBandByReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ChargeTypeEnumFormat = new DefaultNundw_ChargeTypeEnumFormat {}
  trait DefaultNundw_ChargeTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ChargeTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ChargeTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("minimum")) => nu.ndw.Minimum
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("maximum")) => nu.ndw.Maximum
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("additionalIntervalPrice")) => nu.ndw.AdditionalIntervalPrice
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("seasonTicket")) => nu.ndw.SeasonTicket
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temporaryPrice")) => nu.ndw.TemporaryPrice
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("firstIntervalPrice")) => nu.ndw.FirstIntervalPrice
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freeParking")) => nu.ndw.FreeParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("flat")) => nu.ndw.Flat
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue24
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue46

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ChargeTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ChargeTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ChargingStationUsageTypeEnumFormat = new DefaultNundw_ChargingStationUsageTypeEnumFormat {}
  trait DefaultNundw_ChargingStationUsageTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ChargingStationUsageTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ChargingStationUsageTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("electricVehicle")) => nu.ndw.ElectricVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorhomeOrCaravanSupply")) => nu.ndw.MotorhomeOrCaravanSupply
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("electricBikeOrMotorcycle")) => nu.ndw.ElectricBikeOrMotorcycle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lorryPowerConsumption")) => nu.ndw.LorryPowerConsumption
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("electricalDevices")) => nu.ndw.ElectricalDevices
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue55

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ChargingStationUsageTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ChargingStationUsageTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_CodedReasonForSettingMessageEnumFormat = new DefaultNundw_CodedReasonForSettingMessageEnumFormat {}
  trait DefaultNundw_CodedReasonForSettingMessageEnumFormat extends scalaxb.XMLFormat[nu.ndw.CodedReasonForSettingMessageEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.CodedReasonForSettingMessageEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("situation")) => nu.ndw.Situation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("operatorCreated")) => nu.ndw.OperatorCreated
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficManagement")) => nu.ndw.TrafficManagementValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("travelTime")) => nu.ndw.TravelTimeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("campaign")) => nu.ndw.Campaign
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("default")) => nu.ndw.Default

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.CodedReasonForSettingMessageEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.CodedReasonForSettingMessageEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ColourEnumFormat = new DefaultNundw_ColourEnumFormat {}
  trait DefaultNundw_ColourEnumFormat extends scalaxb.XMLFormat[nu.ndw.ColourEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ColourEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("amber")) => nu.ndw.Amber
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blue")) => nu.ndw.Blue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("green")) => nu.ndw.Green
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("red")) => nu.ndw.Red
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("white")) => nu.ndw.White
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("whiteYellow")) => nu.ndw.WhiteYellow

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ColourEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ColourEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_CommentFormat extends scalaxb.ElemNameParser[nu.ndw.Comment] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Comment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Comment] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "comment")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "commentDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "commentType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "commentExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.Comment(scalaxb.fromXML[nu.ndw.MultilingualString](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.CommentTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Comment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.MultilingualString](__obj.comment, Some("http://datex2.eu/schema/2/2_0"), Some("comment"), __scope, false),
        __obj.commentDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("commentDateTime"), __scope, false) } getOrElse {Nil},
        __obj.commentType map { scalaxb.toXML[nu.ndw.CommentTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("commentType"), __scope, false) } getOrElse {Nil},
        __obj.commentExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("commentExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_CommentTypeEnumFormat = new DefaultNundw_CommentTypeEnumFormat {}
  trait DefaultNundw_CommentTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.CommentTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.CommentTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("abnormalLoadMovementNote")) => nu.ndw.AbnormalLoadMovementNote
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dataProcessingNote")) => nu.ndw.DataProcessingNote
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("description")) => nu.ndw.Description
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("internalNote")) => nu.ndw.InternalNote
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("locationDescriptor")) => nu.ndw.LocationDescriptor
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("warning")) => nu.ndw.Warning
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue56

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.CommentTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.CommentTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ComparisonOperatorEnumFormat = new DefaultNundw_ComparisonOperatorEnumFormat {}
  trait DefaultNundw_ComparisonOperatorEnumFormat extends scalaxb.XMLFormat[nu.ndw.ComparisonOperatorEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ComparisonOperatorEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("equalTo")) => nu.ndw.EqualTo
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("greaterThan")) => nu.ndw.GreaterThan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("greaterThanOrEqualTo")) => nu.ndw.GreaterThanOrEqualTo
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lessThan")) => nu.ndw.LessThan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lessThanOrEqualTo")) => nu.ndw.LessThanOrEqualTo

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ComparisonOperatorEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ComparisonOperatorEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ComplianceOptionEnumFormat = new DefaultNundw_ComplianceOptionEnumFormat {}
  trait DefaultNundw_ComplianceOptionEnumFormat extends scalaxb.XMLFormat[nu.ndw.ComplianceOptionEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ComplianceOptionEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("advisory")) => nu.ndw.Advisory
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mandatory")) => nu.ndw.Mandatory

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ComplianceOptionEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ComplianceOptionEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ComputationMethodEnumFormat = new DefaultNundw_ComputationMethodEnumFormat {}
  trait DefaultNundw_ComputationMethodEnumFormat extends scalaxb.XMLFormat[nu.ndw.ComputationMethodEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ComputationMethodEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("arithmeticAverageOfSamplesBasedOnAFixedNumberOfSamples")) => nu.ndw.LongNameValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("arithmeticAverageOfSamplesInATimePeriod")) => nu.ndw.ArithmeticAverageOfSamplesInATimePeriod
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("harmonicAverageOfSamplesInATimePeriod")) => nu.ndw.HarmonicAverageOfSamplesInATimePeriod
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("medianOfSamplesInATimePeriod")) => nu.ndw.MedianOfSamplesInATimePeriod
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("movingAverageOfSamples")) => nu.ndw.MovingAverageOfSamples

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ComputationMethodEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ComputationMethodEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ConcentrationOfVehiclesValueFormat extends scalaxb.ElemNameParser[nu.ndw.ConcentrationOfVehiclesValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ConcentrationOfVehiclesValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ConcentrationOfVehiclesValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "concentrationOfVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "concentrationOfVehiclesValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.ConcentrationOfVehiclesValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ConcentrationOfVehiclesValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ConcentrationOfVehiclesValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.concentrationOfVehicles, Some("http://datex2.eu/schema/2/2_0"), Some("concentrationOfVehicles"), __scope, false),
        __obj.concentrationOfVehiclesValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("concentrationOfVehiclesValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ConditionsableFormat extends scalaxb.XMLFormat[nu.ndw.Conditionsable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Conditionsable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PoorEnvironmentConditions")) => Right(scalaxb.fromXML[nu.ndw.PoorEnvironmentConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadConditions")) => Right(scalaxb.fromXML[nu.ndw.RoadConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WeatherRelatedRoadConditions")) => Right(scalaxb.fromXML[nu.ndw.WeatherRelatedRoadConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonWeatherRelatedRoadConditions")) => Right(scalaxb.fromXML[nu.ndw.NonWeatherRelatedRoadConditions](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.Conditions](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Conditionsable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.PoorEnvironmentConditions => scalaxb.toXML[nu.ndw.PoorEnvironmentConditions](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.RoadConditions => scalaxb.toXML[nu.ndw.RoadConditions](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.Conditions => scalaxb.toXML[nu.ndw.Conditions](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_ConditionsFormat extends scalaxb.ElemNameParser[nu.ndw.Conditions] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Conditions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Conditions] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "drivingConditionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "conditionsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      nu.ndw.Conditions(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.DrivingConditionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.Conditions, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.Conditions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.drivingConditionType map { scalaxb.toXML[nu.ndw.DrivingConditionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("drivingConditionType"), __scope, false) } getOrElse {Nil},
        __obj.conditionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("conditionsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ConfidentialityValueEnumFormat = new DefaultNundw_ConfidentialityValueEnumFormat {}
  trait DefaultNundw_ConfidentialityValueEnumFormat extends scalaxb.XMLFormat[nu.ndw.ConfidentialityValueEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ConfidentialityValueEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("internalUse")) => nu.ndw.InternalUse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noRestriction")) => nu.ndw.NoRestriction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restrictedToAuthorities")) => nu.ndw.RestrictedToAuthorities
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restrictedToAuthoritiesAndTrafficOperators")) => nu.ndw.RestrictedToAuthoritiesAndTrafficOperators
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restrictedToAuthoritiesTrafficOperatorsAndPublishers")) => nu.ndw.LongNameValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restrictedToAuthoritiesTrafficOperatorsAndVms")) => nu.ndw.RestrictedToAuthoritiesTrafficOperatorsAndVms

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ConfidentialityValueEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ConfidentialityValueEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ConstructionWorksFormat extends scalaxb.ElemNameParser[nu.ndw.ConstructionWorks] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ConstructionWorks")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ConstructionWorks] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadworksDuration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadworksScale")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "underTraffic")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urgentRoadworks")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobility")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subjects")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maintenanceVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadworksExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "constructionWorkType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "constructionWorksExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      nu.ndw.ConstructionWorks(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.RoadworksDurationEnum](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.RoadworksScaleEnum](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[nu.ndw.Subjects](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[nu.ndw.MaintenanceVehicles](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[nu.ndw.ConstructionWorkTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ConstructionWorks, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ConstructionWorks, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        __obj.roadworksDuration map { scalaxb.toXML[nu.ndw.RoadworksDurationEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadworksDuration"), __scope, false) } getOrElse {Nil},
        __obj.roadworksScale map { scalaxb.toXML[nu.ndw.RoadworksScaleEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadworksScale"), __scope, false) } getOrElse {Nil},
        __obj.underTraffic map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("underTraffic"), __scope, false) } getOrElse {Nil},
        __obj.urgentRoadworks map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("urgentRoadworks"), __scope, false) } getOrElse {Nil},
        __obj.mobility map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobility"), __scope, false) } getOrElse {Nil},
        __obj.subjects map { scalaxb.toXML[nu.ndw.Subjects](_, Some("http://datex2.eu/schema/2/2_0"), Some("subjects"), __scope, false) } getOrElse {Nil},
        __obj.maintenanceVehicles map { scalaxb.toXML[nu.ndw.MaintenanceVehicles](_, Some("http://datex2.eu/schema/2/2_0"), Some("maintenanceVehicles"), __scope, false) } getOrElse {Nil},
        __obj.roadworksExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadworksExtension"), __scope, false) } getOrElse {Nil},
        __obj.constructionWorkType map { scalaxb.toXML[nu.ndw.ConstructionWorkTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("constructionWorkType"), __scope, false) } getOrElse {Nil},
        __obj.constructionWorksExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("constructionWorksExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ConstructionWorkTypeEnumFormat = new DefaultNundw_ConstructionWorkTypeEnumFormat {}
  trait DefaultNundw_ConstructionWorkTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ConstructionWorkTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ConstructionWorkTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blastingWork")) => nu.ndw.BlastingWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("constructionWork")) => nu.ndw.ConstructionWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("demolitionWork")) => nu.ndw.DemolitionWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadImprovementOrUpgrading")) => nu.ndw.RoadImprovementOrUpgrading
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadWideningWork")) => nu.ndw.RoadWideningWork

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ConstructionWorkTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ConstructionWorkTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ContactableFormat extends scalaxb.XMLFormat[nu.ndw.Contactable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Contactable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ContactDetails")) => Right(scalaxb.fromXML[nu.ndw.ContactDetails](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ContactByReference")) => Right(scalaxb.fromXML[nu.ndw.ContactByReference](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.Contact](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Contactable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.ContactDetails => scalaxb.toXML[nu.ndw.ContactDetails](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ContactByReference => scalaxb.toXML[nu.ndw.ContactByReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.Contact => scalaxb.toXML[nu.ndw.Contact](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_ContactFormat extends scalaxb.ElemNameParser[nu.ndw.Contact] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Contact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Contact] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactUnknown")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactNotDefined")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validityOfContact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.Contact(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.OverallPeriod](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Contact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.contactUnknown map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactUnknown"), __scope, false) } getOrElse {Nil},
        __obj.contactNotDefined map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactNotDefined"), __scope, false) } getOrElse {Nil},
        __obj.validityOfContact map { scalaxb.toXML[nu.ndw.OverallPeriod](_, Some("http://datex2.eu/schema/2/2_0"), Some("validityOfContact"), __scope, false) } getOrElse {Nil},
        __obj.contactExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ContactByReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.ContactByReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ContactByReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ContactByReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactUnknown")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactNotDefined")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validityOfContact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactByReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.ContactByReference(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.OverallPeriod](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw._ContactDetailsVersionedReference](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ContactByReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.contactUnknown map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactUnknown"), __scope, false) } getOrElse {Nil},
        __obj.contactNotDefined map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactNotDefined"), __scope, false) } getOrElse {Nil},
        __obj.validityOfContact map { scalaxb.toXML[nu.ndw.OverallPeriod](_, Some("http://datex2.eu/schema/2/2_0"), Some("validityOfContact"), __scope, false) } getOrElse {Nil},
        __obj.contactExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw._ContactDetailsVersionedReference](__obj.contactReference, Some("http://datex2.eu/schema/2/2_0"), Some("contactReference"), __scope, false),
        __obj.contactByReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactByReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ContactDetailsFormat extends scalaxb.ElemNameParser[nu.ndw.ContactDetails] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ContactDetails")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ContactDetails] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactUnknown")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactNotDefined")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validityOfContact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactOrganisationName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactPersonName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactPersonFirstName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactPersonPosition")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsLanguage")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsStreet")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsHouseNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsPostcode")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsCity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "country")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsTelephoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsFax")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsEMail")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsLogoUrl")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "available24hours")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsResponsibility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsMoreInfo")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publishingAgreement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsOwnership")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "contactDetailsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 =>
      nu.ndw.ContactDetails(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.OverallPeriod](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[nu.ndw.CountryEnum](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[nu.ndw.OwnershipTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ContactDetails, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ContactDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.contactUnknown map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactUnknown"), __scope, false) } getOrElse {Nil},
        __obj.contactNotDefined map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactNotDefined"), __scope, false) } getOrElse {Nil},
        __obj.validityOfContact map { scalaxb.toXML[nu.ndw.OverallPeriod](_, Some("http://datex2.eu/schema/2/2_0"), Some("validityOfContact"), __scope, false) } getOrElse {Nil},
        __obj.contactExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactExtension"), __scope, false) } getOrElse {Nil},
        __obj.contactOrganisationName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactOrganisationName"), __scope, false) } getOrElse {Nil},
        __obj.contactPersonName map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactPersonName"), __scope, false) } getOrElse {Nil},
        __obj.contactPersonFirstName map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactPersonFirstName"), __scope, false) } getOrElse {Nil},
        __obj.contactPersonPosition map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactPersonPosition"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsLanguage flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsLanguage"), __scope, false) },
        __obj.contactDetailsAddress map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsAddress"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsStreet map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsStreet"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsHouseNumber flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsHouseNumber"), __scope, false) },
        __obj.contactDetailsPostcode map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsPostcode"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsCity map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsCity"), __scope, false) } getOrElse {Nil},
        __obj.country map { scalaxb.toXML[nu.ndw.CountryEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("country"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsTelephoneNumber map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsTelephoneNumber"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsFax map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsFax"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsEMail map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsEMail"), __scope, false) } getOrElse {Nil},
        __obj.urlLinkAddress map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkAddress"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsLogoUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsLogoUrl"), __scope, false) } getOrElse {Nil},
        __obj.available24hours map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("available24hours"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsResponsibility flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsResponsibility"), __scope, false) },
        __obj.contactDetailsMoreInfo flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsMoreInfo"), __scope, false) },
        __obj.publishingAgreement map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("publishingAgreement"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsOwnership map { scalaxb.toXML[nu.ndw.OwnershipTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsOwnership"), __scope, false) } getOrElse {Nil},
        __obj.groupOfLocations map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false) } getOrElse {Nil},
        __obj.contactDetailsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("contactDetailsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_CountryEnumFormat = new DefaultNundw_CountryEnumFormat {}
  trait DefaultNundw_CountryEnumFormat extends scalaxb.XMLFormat[nu.ndw.CountryEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.CountryEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("at")) => nu.ndw.At
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("be")) => nu.ndw.Be
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bg")) => nu.ndw.Bg
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ch")) => nu.ndw.Ch
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cs")) => nu.ndw.Cs
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cy")) => nu.ndw.Cy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cz")) => nu.ndw.Cz
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("de")) => nu.ndw.De
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dk")) => nu.ndw.Dk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ee")) => nu.ndw.Ee
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("es")) => nu.ndw.Es
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fi")) => nu.ndw.Fi
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fo")) => nu.ndw.Fo
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fr")) => nu.ndw.Fr
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gb")) => nu.ndw.Gb
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gg")) => nu.ndw.Gg
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gi")) => nu.ndw.Gi
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gr")) => nu.ndw.Gr
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hr")) => nu.ndw.Hr
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hu")) => nu.ndw.Hu
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ie")) => nu.ndw.Ie
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("im")) => nu.ndw.Im
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("is")) => nu.ndw.Is
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("it")) => nu.ndw.It
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("je")) => nu.ndw.Je
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("li")) => nu.ndw.Li
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lt")) => nu.ndw.Lt
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lu")) => nu.ndw.Lu
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lv")) => nu.ndw.Lv
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ma")) => nu.ndw.Ma
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mc")) => nu.ndw.Mc
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mk")) => nu.ndw.Mk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mt")) => nu.ndw.Mt
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nl")) => nu.ndw.Nl
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("no")) => nu.ndw.No
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pl")) => nu.ndw.Pl
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pt")) => nu.ndw.Pt
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ro")) => nu.ndw.Ro
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("se")) => nu.ndw.Se
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("si")) => nu.ndw.Si
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sk")) => nu.ndw.Sk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sm")) => nu.ndw.Sm
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tr")) => nu.ndw.Tr
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("va")) => nu.ndw.Va
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue45

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.CountryEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.CountryEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_CurrencyEnumFormat = new DefaultNundw_CurrencyEnumFormat {}
  trait DefaultNundw_CurrencyEnumFormat extends scalaxb.XMLFormat[nu.ndw.CurrencyEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.CurrencyEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eur")) => nu.ndw.Eur
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("all")) => nu.ndw.AllTypeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("amd")) => nu.ndw.Amd
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("azn")) => nu.ndw.Azn
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bam")) => nu.ndw.Bam
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bgn")) => nu.ndw.Bgn
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("byr")) => nu.ndw.Byr
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("chf")) => nu.ndw.Chf
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("czk")) => nu.ndw.Czk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dkk")) => nu.ndw.Dkk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gbp")) => nu.ndw.Gbp
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gel")) => nu.ndw.Gel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hrk")) => nu.ndw.Hrk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("huf")) => nu.ndw.Huf
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("isk")) => nu.ndw.Isk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ltl")) => nu.ndw.Ltl
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mdl")) => nu.ndw.Mdl
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mkd")) => nu.ndw.Mkd
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nok")) => nu.ndw.Nok
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pln")) => nu.ndw.Pln
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ron")) => nu.ndw.Ron
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rsd")) => nu.ndw.Rsd
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rub")) => nu.ndw.Rub
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sek")) => nu.ndw.Sek
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("try")) => nu.ndw.Try
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uah")) => nu.ndw.Uah
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("usd")) => nu.ndw.Usd
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue44

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.CurrencyEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.CurrencyEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_D2LogicalModelFormat extends scalaxb.ElemNameParser[nu.ndw.D2LogicalModel] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("D2LogicalModel")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.D2LogicalModel] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "exchange")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublication")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "d2LogicalModelExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.D2LogicalModel(scalaxb.fromXML[nu.ndw.Exchange](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw.PayloadPublication](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("2"), scalaxb.ElemName(node) :: stack))) map { "@modelBaseVersion" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.D2LogicalModel, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@modelBaseVersion", _) => attr = scala.xml.Attribute(null, "modelBaseVersion", __obj.modelBaseVersion.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.D2LogicalModel, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.Exchange](__obj.exchange, Some("http://datex2.eu/schema/2/2_0"), Some("exchange"), __scope, false),
        __obj.payloadPublication map { scalaxb.toXML[nu.ndw.PayloadPublication](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublication"), __scope, false) } getOrElse {Nil},
        __obj.d2LogicalModelExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("d2LogicalModelExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_DangerousGoodsRegulationsEnumFormat = new DefaultNundw_DangerousGoodsRegulationsEnumFormat {}
  trait DefaultNundw_DangerousGoodsRegulationsEnumFormat extends scalaxb.XMLFormat[nu.ndw.DangerousGoodsRegulationsEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.DangerousGoodsRegulationsEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("adr")) => nu.ndw.Adr
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("iataIcao")) => nu.ndw.IataIcao
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("imoImdg")) => nu.ndw.ImoImdg
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("railroadDangerousGoodsBook")) => nu.ndw.RailroadDangerousGoodsBook

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DangerousGoodsRegulationsEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.DangerousGoodsRegulationsEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_DataValueFormat extends scalaxb.XMLFormat[nu.ndw.DataValue] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DataValue] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VehicleCountValue")) => Right(scalaxb.fromXML[nu.ndw.VehicleCountValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficStatusValue")) => Right(scalaxb.fromXML[nu.ndw.TrafficStatusValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("SpeedValue")) => Right(scalaxb.fromXML[nu.ndw.SpeedValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PrecipitationIntensityValue")) => Right(scalaxb.fromXML[nu.ndw.PrecipitationIntensityValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PcuFlowValue")) => Right(scalaxb.fromXML[nu.ndw.PcuFlowValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OccupancyChangeValue")) => Right(scalaxb.fromXML[nu.ndw.OccupancyChangeValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("KilogramsConcentrationValue")) => Right(scalaxb.fromXML[nu.ndw.KilogramsConcentrationValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("IntegerMetreDistanceValue")) => Right(scalaxb.fromXML[nu.ndw.IntegerMetreDistanceValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("FloatingPointMetreDistanceValue")) => Right(scalaxb.fromXML[nu.ndw.FloatingPointMetreDistanceValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("DurationValue")) => Right(scalaxb.fromXML[nu.ndw.DurationValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("DirectionCompassValue")) => Right(scalaxb.fromXML[nu.ndw.DirectionCompassValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("DirectionBearingValue")) => Right(scalaxb.fromXML[nu.ndw.DirectionBearingValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ConcentrationOfVehiclesValue")) => Right(scalaxb.fromXML[nu.ndw.ConcentrationOfVehiclesValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AxleFlowValue")) => Right(scalaxb.fromXML[nu.ndw.AxleFlowValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ApplicationRateValue")) => Right(scalaxb.fromXML[nu.ndw.ApplicationRateValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("DateTimeValue")) => Right(scalaxb.fromXML[nu.ndw.DateTimeValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("MicrogramsConcentrationValue")) => Right(scalaxb.fromXML[nu.ndw.MicrogramsConcentrationValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PercentageValue")) => Right(scalaxb.fromXML[nu.ndw.PercentageValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TemperatureValue")) => Right(scalaxb.fromXML[nu.ndw.TemperatureValue](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VehicleFlowValue")) => Right(scalaxb.fromXML[nu.ndw.VehicleFlowValue](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.DataValue, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.VehicleCountValue => scalaxb.toXML[nu.ndw.VehicleCountValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TrafficStatusValue => scalaxb.toXML[nu.ndw.TrafficStatusValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.SpeedValue => scalaxb.toXML[nu.ndw.SpeedValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.PrecipitationIntensityValue => scalaxb.toXML[nu.ndw.PrecipitationIntensityValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.PcuFlowValue => scalaxb.toXML[nu.ndw.PcuFlowValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OccupancyChangeValue => scalaxb.toXML[nu.ndw.OccupancyChangeValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.KilogramsConcentrationValue => scalaxb.toXML[nu.ndw.KilogramsConcentrationValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.IntegerMetreDistanceValue => scalaxb.toXML[nu.ndw.IntegerMetreDistanceValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.FloatingPointMetreDistanceValue => scalaxb.toXML[nu.ndw.FloatingPointMetreDistanceValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.DurationValue => scalaxb.toXML[nu.ndw.DurationValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.DirectionCompassValue => scalaxb.toXML[nu.ndw.DirectionCompassValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.DirectionBearingValue => scalaxb.toXML[nu.ndw.DirectionBearingValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ConcentrationOfVehiclesValue => scalaxb.toXML[nu.ndw.ConcentrationOfVehiclesValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.AxleFlowValue => scalaxb.toXML[nu.ndw.AxleFlowValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ApplicationRateValue => scalaxb.toXML[nu.ndw.ApplicationRateValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.DateTimeValue => scalaxb.toXML[nu.ndw.DateTimeValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.MicrogramsConcentrationValue => scalaxb.toXML[nu.ndw.MicrogramsConcentrationValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.PercentageValue => scalaxb.toXML[nu.ndw.PercentageValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TemperatureValue => scalaxb.toXML[nu.ndw.TemperatureValue](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.VehicleFlowValue => scalaxb.toXML[nu.ndw.VehicleFlowValue](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_DateTimeValueFormat extends scalaxb.ElemNameParser[nu.ndw.DateTimeValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("DateTimeValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.DateTimeValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dateTimeValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.DateTimeValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.DateTimeValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.DateTimeValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.dateTime, Some("http://datex2.eu/schema/2/2_0"), Some("dateTime"), __scope, false),
        __obj.dateTimeValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dateTimeValueExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_DayEnumFormat = new DefaultNundw_DayEnumFormat {}
  trait DefaultNundw_DayEnumFormat extends scalaxb.XMLFormat[nu.ndw.DayEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.DayEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("monday")) => nu.ndw.Monday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tuesday")) => nu.ndw.Tuesday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wednesday")) => nu.ndw.Wednesday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("thursday")) => nu.ndw.Thursday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("friday")) => nu.ndw.Friday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("saturday")) => nu.ndw.Saturday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sunday")) => nu.ndw.Sunday

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DayEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.DayEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_DayWeekMonthFormat extends scalaxb.ElemNameParser[nu.ndw.DayWeekMonth] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("DayWeekMonth")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.DayWeekMonth] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableDay")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableWeek")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableMonth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dayWeekMonthExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.DayWeekMonth(p1 map { scalaxb.fromXML[nu.ndw.DayEnum](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.WeekOfMonthEnum](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.MonthOfYearEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.DayWeekMonth, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.applicableDay flatMap { scalaxb.toXML[nu.ndw.DayEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableDay"), __scope, false) },
        __obj.applicableWeek flatMap { scalaxb.toXML[nu.ndw.WeekOfMonthEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableWeek"), __scope, false) },
        __obj.applicableMonth flatMap { scalaxb.toXML[nu.ndw.MonthOfYearEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableMonth"), __scope, false) },
        __obj.dayWeekMonthExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dayWeekMonthExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_DedicatedAccessFormat extends scalaxb.ElemNameParser[nu.ndw.DedicatedAccess] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("DedicatedAccess")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.DedicatedAccess] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dedicatedAccess")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceFromParkingSpace")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dedicatedAccessExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.DedicatedAccess(scalaxb.fromXML[nu.ndw._ParkingAccessReference](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.DedicatedAccess, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._ParkingAccessReference](__obj.dedicatedAccess, Some("http://datex2.eu/schema/2/2_0"), Some("dedicatedAccess"), __scope, false),
        __obj.distanceFromParkingSpace map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceFromParkingSpace"), __scope, false) } getOrElse {Nil},
        __obj.dedicatedAccessExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dedicatedAccessExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_DelayBandEnumFormat = new DefaultNundw_DelayBandEnumFormat {}
  trait DefaultNundw_DelayBandEnumFormat extends scalaxb.XMLFormat[nu.ndw.DelayBandEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.DelayBandEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("negligible")) => nu.ndw.Negligible
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("upToTenMinutes")) => nu.ndw.UpToTenMinutes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("betweenTenMinutesAndThirtyMinutes")) => nu.ndw.BetweenTenMinutesAndThirtyMinutes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("betweenThirtyMinutesAndOneHour")) => nu.ndw.BetweenThirtyMinutesAndOneHour
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("betweenOneHourAndThreeHours")) => nu.ndw.BetweenOneHourAndThreeHours
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("betweenThreeHoursAndSixHours")) => nu.ndw.BetweenThreeHoursAndSixHours
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("longerThanSixHours")) => nu.ndw.LongerThanSixHours

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DelayBandEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.DelayBandEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_DelaysFormat extends scalaxb.ElemNameParser[nu.ndw.Delays] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Delays")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Delays] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "delayBand")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "delaysType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "delayTimeValue")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "delaysExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.Delays(p1.headOption map { scalaxb.fromXML[nu.ndw.DelayBandEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.DelaysTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Delays, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.delayBand map { scalaxb.toXML[nu.ndw.DelayBandEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("delayBand"), __scope, false) } getOrElse {Nil},
        __obj.delaysType map { scalaxb.toXML[nu.ndw.DelaysTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("delaysType"), __scope, false) } getOrElse {Nil},
        __obj.delayTimeValue map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("delayTimeValue"), __scope, false) } getOrElse {Nil},
        __obj.delaysExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("delaysExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_DelaysTypeEnumFormat = new DefaultNundw_DelaysTypeEnumFormat {}
  trait DefaultNundw_DelaysTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.DelaysTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.DelaysTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("delays")) => nu.ndw.DelaysValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("delaysOfUncertainDuration")) => nu.ndw.DelaysOfUncertainDuration
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("longDelays")) => nu.ndw.LongDelays
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("veryLongDelays")) => nu.ndw.VeryLongDelays

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DelaysTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.DelaysTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_DenyReasonEnumFormat = new DefaultNundw_DenyReasonEnumFormat {}
  trait DefaultNundw_DenyReasonEnumFormat extends scalaxb.XMLFormat[nu.ndw.DenyReasonEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.DenyReasonEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknownReason")) => nu.ndw.UnknownReason
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wrongCatalogue")) => nu.ndw.WrongCatalogue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wrongFilter")) => nu.ndw.WrongFilter
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wrongOrder")) => nu.ndw.WrongOrder
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wrongPartner")) => nu.ndw.WrongPartner

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DenyReasonEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.DenyReasonEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_DestinationFormat extends scalaxb.XMLFormat[nu.ndw.Destination] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Destination] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PointDestination")) => Right(scalaxb.fromXML[nu.ndw.PointDestination](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AreaDestination")) => Right(scalaxb.fromXML[nu.ndw.AreaDestination](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Destination, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.PointDestination => scalaxb.toXML[nu.ndw.PointDestination](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.AreaDestination => scalaxb.toXML[nu.ndw.AreaDestination](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_DimensionFormat extends scalaxb.ElemNameParser[nu.ndw.Dimension] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Dimension")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Dimension] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dimensionLength")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dimensionWidth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dimensionHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dimensionUsableArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dimensionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.Dimension(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Dimension, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dimensionLength map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("dimensionLength"), __scope, false) } getOrElse {Nil},
        __obj.dimensionWidth map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("dimensionWidth"), __scope, false) } getOrElse {Nil},
        __obj.dimensionHeight map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("dimensionHeight"), __scope, false) } getOrElse {Nil},
        __obj.dimensionUsableArea map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("dimensionUsableArea"), __scope, false) } getOrElse {Nil},
        __obj.dimensionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dimensionExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_DirectionBearingValueFormat extends scalaxb.ElemNameParser[nu.ndw.DirectionBearingValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("DirectionBearingValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.DirectionBearingValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "directionBearing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "directionBearingValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.DirectionBearingValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.DirectionBearingValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.DirectionBearingValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.directionBearing, Some("http://datex2.eu/schema/2/2_0"), Some("directionBearing"), __scope, false),
        __obj.directionBearingValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("directionBearingValueExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_DirectionCompassEnumFormat = new DefaultNundw_DirectionCompassEnumFormat {}
  trait DefaultNundw_DirectionCompassEnumFormat extends scalaxb.XMLFormat[nu.ndw.DirectionCompassEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.DirectionCompassEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("east")) => nu.ndw.East
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eastNorthEast")) => nu.ndw.EastNorthEast
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eastSouthEast")) => nu.ndw.EastSouthEast
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("north")) => nu.ndw.North
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("northEast")) => nu.ndw.NorthEast
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("northNorthEast")) => nu.ndw.NorthNorthEast
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("northNorthWest")) => nu.ndw.NorthNorthWest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("northWest")) => nu.ndw.NorthWest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("south")) => nu.ndw.South
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("southEast")) => nu.ndw.SouthEast
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("southSouthEast")) => nu.ndw.SouthSouthEast
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("southSouthWest")) => nu.ndw.SouthSouthWest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("southWest")) => nu.ndw.SouthWest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("west")) => nu.ndw.West
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("westNorthWest")) => nu.ndw.WestNorthWest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("westSouthWest")) => nu.ndw.WestSouthWest

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DirectionCompassEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.DirectionCompassEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_DirectionCompassValueFormat extends scalaxb.ElemNameParser[nu.ndw.DirectionCompassValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("DirectionCompassValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.DirectionCompassValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "directionCompass")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "directionCompassValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.DirectionCompassValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.DirectionCompassEnum](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.DirectionCompassValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.DirectionCompassValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.DirectionCompassEnum](__obj.directionCompass, Some("http://datex2.eu/schema/2/2_0"), Some("directionCompass"), __scope, false),
        __obj.directionCompassValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("directionCompassValueExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_DirectionEnumFormat = new DefaultNundw_DirectionEnumFormat {}
  trait DefaultNundw_DirectionEnumFormat extends scalaxb.XMLFormat[nu.ndw.DirectionEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.DirectionEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("allDirections")) => nu.ndw.AllDirections
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bothWays")) => nu.ndw.BothWays
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("clockwise")) => nu.ndw.Clockwise
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("anticlockwise")) => nu.ndw.Anticlockwise
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("innerRing")) => nu.ndw.InnerRing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("outerRing")) => nu.ndw.OuterRing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("northBound")) => nu.ndw.NorthBound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("northEastBound")) => nu.ndw.NorthEastBound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eastBound")) => nu.ndw.EastBound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("southEastBound")) => nu.ndw.SouthEastBound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("southBound")) => nu.ndw.SouthBound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("southWestBound")) => nu.ndw.SouthWestBound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("westBound")) => nu.ndw.WestBound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("northWestBound")) => nu.ndw.NorthWestBound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inboundTowardsTown")) => nu.ndw.InboundTowardsTown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("outboundFromTown")) => nu.ndw.OutboundFromTown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue23
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("opposite")) => nu.ndw.OppositeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue43

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DirectionEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.DirectionEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_DistanceAlongLinearElementFormat extends scalaxb.XMLFormat[nu.ndw.DistanceAlongLinearElement] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DistanceAlongLinearElement] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PercentageDistanceAlongLinearElement")) => Right(scalaxb.fromXML[nu.ndw.PercentageDistanceAlongLinearElement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("DistanceFromLinearElementStart")) => Right(scalaxb.fromXML[nu.ndw.DistanceFromLinearElementStart](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("DistanceFromLinearElementReferent")) => Right(scalaxb.fromXML[nu.ndw.DistanceFromLinearElementReferent](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.DistanceAlongLinearElement, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.PercentageDistanceAlongLinearElement => scalaxb.toXML[nu.ndw.PercentageDistanceAlongLinearElement](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.DistanceFromLinearElementStart => scalaxb.toXML[nu.ndw.DistanceFromLinearElementStart](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.DistanceFromLinearElementReferent => scalaxb.toXML[nu.ndw.DistanceFromLinearElementReferent](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_DistanceFromLinearElementReferentFormat extends scalaxb.ElemNameParser[nu.ndw.DistanceFromLinearElementReferent] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("DistanceFromLinearElementReferent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.DistanceFromLinearElementReferent] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceAlongLinearElementExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceAlong")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "fromReferent")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "towardsReferent")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceFromLinearElementReferentExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.DistanceFromLinearElementReferent(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.Referent](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw.Referent](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.DistanceFromLinearElementReferent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.distanceAlongLinearElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceAlongLinearElementExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.distanceAlong, Some("http://datex2.eu/schema/2/2_0"), Some("distanceAlong"), __scope, false),
        scalaxb.toXML[nu.ndw.Referent](__obj.fromReferent, Some("http://datex2.eu/schema/2/2_0"), Some("fromReferent"), __scope, false),
        __obj.towardsReferent map { scalaxb.toXML[nu.ndw.Referent](_, Some("http://datex2.eu/schema/2/2_0"), Some("towardsReferent"), __scope, false) } getOrElse {Nil},
        __obj.distanceFromLinearElementReferentExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceFromLinearElementReferentExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_DistanceFromLinearElementStartFormat extends scalaxb.ElemNameParser[nu.ndw.DistanceFromLinearElementStart] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("DistanceFromLinearElementStart")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.DistanceFromLinearElementStart] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceAlongLinearElementExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceAlong")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceFromLinearElementStartExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.DistanceFromLinearElementStart(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.DistanceFromLinearElementStart, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.distanceAlongLinearElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceAlongLinearElementExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.distanceAlong, Some("http://datex2.eu/schema/2/2_0"), Some("distanceAlong"), __scope, false),
        __obj.distanceFromLinearElementStartExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceFromLinearElementStartExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_DisturbanceActivityFormat extends scalaxb.ElemNameParser[nu.ndw.DisturbanceActivity] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("DisturbanceActivity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.DisturbanceActivity] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityOfActivity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "activityExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "disturbanceActivityType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "disturbanceActivityExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      nu.ndw.DisturbanceActivity(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.DisturbanceActivityTypeEnum](p22, scalaxb.ElemName(node) :: stack),
        p23.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.DisturbanceActivity, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.DisturbanceActivity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.mobilityOfActivity map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityOfActivity"), __scope, false) } getOrElse {Nil},
        __obj.activityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("activityExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.DisturbanceActivityTypeEnum](__obj.disturbanceActivityType, Some("http://datex2.eu/schema/2/2_0"), Some("disturbanceActivityType"), __scope, false),
        __obj.disturbanceActivityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("disturbanceActivityExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_DisturbanceActivityTypeEnumFormat = new DefaultNundw_DisturbanceActivityTypeEnumFormat {}
  trait DefaultNundw_DisturbanceActivityTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.DisturbanceActivityTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.DisturbanceActivityTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("airRaid")) => nu.ndw.AirRaid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("altercationOfVehicleOccupants")) => nu.ndw.AltercationOfVehicleOccupants
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("assault")) => nu.ndw.Assault
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("assetDestruction")) => nu.ndw.AssetDestruction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("attack")) => nu.ndw.Attack
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("attackOnVehicle")) => nu.ndw.AttackOnVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blockadeOrBarrier")) => nu.ndw.BlockadeOrBarrier
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bombAlert")) => nu.ndw.BombAlert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("crowd")) => nu.ndw.Crowd
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("demonstration")) => nu.ndw.Demonstration
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("evacuation")) => nu.ndw.Evacuation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("filterBlockade")) => nu.ndw.FilterBlockade
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("goSlowOperation")) => nu.ndw.GoSlowOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gunfireOnRoadway")) => nu.ndw.GunfireOnRoadway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("illVehicleOccupants")) => nu.ndw.IllVehicleOccupants
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("march")) => nu.ndw.March
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicDisturbance")) => nu.ndw.PublicDisturbance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("radioactiveLeakAlert")) => nu.ndw.RadioactiveLeakAlertValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("riot")) => nu.ndw.Riot
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sabotage")) => nu.ndw.Sabotage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityAlert")) => nu.ndw.SecurityAlert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityIncident")) => nu.ndw.SecurityIncidentValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sightseersObstructingAccess")) => nu.ndw.SightseersObstructingAccess
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("strike")) => nu.ndw.Strike
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("terroristIncident")) => nu.ndw.TerroristIncident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("theft")) => nu.ndw.Theft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("toxicCloudAlert")) => nu.ndw.ToxicCloudAlertValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecifiedAlert")) => nu.ndw.UnspecifiedAlert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue57

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DisturbanceActivityTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.DisturbanceActivityTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_DrivingConditionTypeEnumFormat = new DefaultNundw_DrivingConditionTypeEnumFormat {}
  trait DefaultNundw_DrivingConditionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.DrivingConditionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.DrivingConditionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("impossible")) => nu.ndw.ImpossibleValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hazardous")) => nu.ndw.Hazardous
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("normal")) => nu.ndw.Normal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("passableWithCare")) => nu.ndw.PassableWithCare
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue22
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("veryHazardous")) => nu.ndw.VeryHazardous
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("winterConditions")) => nu.ndw.WinterConditions
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue42

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.DrivingConditionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.DrivingConditionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_DurationValueFormat extends scalaxb.ElemNameParser[nu.ndw.DurationValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("DurationValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.DurationValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "duration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "durationValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.DurationValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.DurationValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.DurationValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.duration, Some("http://datex2.eu/schema/2/2_0"), Some("duration"), __scope, false),
        __obj.durationValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("durationValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ElaboratedDataFormat extends scalaxb.ElemNameParser[nu.ndw.ElaboratedData] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ElaboratedData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ElaboratedData] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forecast")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "elaboratedDataFault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicData")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "elaboratedDataExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.ElaboratedData(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.Validity](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.ElaboratedDataFault](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.BasicData](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ElaboratedData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.forecast map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("forecast"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.validity map { scalaxb.toXML[nu.ndw.Validity](_, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false) } getOrElse {Nil},
        __obj.elaboratedDataFault flatMap { scalaxb.toXML[nu.ndw.ElaboratedDataFault](_, Some("http://datex2.eu/schema/2/2_0"), Some("elaboratedDataFault"), __scope, false) },
        __obj.basicData map { scalaxb.toXML[nu.ndw.BasicData](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicData"), __scope, false) } getOrElse {Nil},
        __obj.elaboratedDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("elaboratedDataExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ElaboratedDataFaultFormat extends scalaxb.ElemNameParser[nu.ndw.ElaboratedDataFault] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ElaboratedDataFault")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ElaboratedDataFault] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultCreationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultLastUpdateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultSeverity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "elaboratedDataFault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "elaboratedDataFaultExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.ElaboratedDataFault(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw.FaultSeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ElaboratedDataFaultEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ElaboratedDataFault, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.faultIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.faultDescription map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultDescription"), __scope, false) } getOrElse {Nil},
        __obj.faultCreationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultCreationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.faultLastUpdateTime, Some("http://datex2.eu/schema/2/2_0"), Some("faultLastUpdateTime"), __scope, false),
        __obj.faultSeverity map { scalaxb.toXML[nu.ndw.FaultSeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultSeverity"), __scope, false) } getOrElse {Nil},
        __obj.faultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ElaboratedDataFaultEnum](__obj.elaboratedDataFault, Some("http://datex2.eu/schema/2/2_0"), Some("elaboratedDataFault"), __scope, false),
        __obj.elaboratedDataFaultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("elaboratedDataFaultExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ElaboratedDataFaultEnumFormat = new DefaultNundw_ElaboratedDataFaultEnumFormat {}
  trait DefaultNundw_ElaboratedDataFaultEnumFormat extends scalaxb.XMLFormat[nu.ndw.ElaboratedDataFaultEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ElaboratedDataFaultEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("intermittentDataValues")) => nu.ndw.IntermittentDataValues
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noDataValuesAvailable")) => nu.ndw.NoDataValuesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("spuriousUnreliableDataValues")) => nu.ndw.SpuriousUnreliableDataValues
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecifiedOrUnknownFault")) => nu.ndw.UnspecifiedOrUnknownFault
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue41

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ElaboratedDataFaultEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ElaboratedDataFaultEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ElaboratedDataPublicationFormat extends scalaxb.ElemNameParser[nu.ndw.ElaboratedDataPublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ElaboratedDataPublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ElaboratedDataPublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationCreator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublicationExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forecastDefault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "periodDefault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "timeDefault")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "referenceSettings")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "elaboratedData")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "elaboratedDataPublicationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      nu.ndw.ElaboratedDataPublication(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.HeaderInformation](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[nu.ndw.ReferenceSettings](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[nu.ndw.ElaboratedData](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ElaboratedDataPublication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ElaboratedDataPublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.feedDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedDescription"), __scope, false) } getOrElse {Nil},
        __obj.feedType map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.publicationTime, Some("http://datex2.eu/schema/2/2_0"), Some("publicationTime"), __scope, false),
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.publicationCreator, Some("http://datex2.eu/schema/2/2_0"), Some("publicationCreator"), __scope, false),
        __obj.payloadPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublicationExtension"), __scope, false) } getOrElse {Nil},
        __obj.forecastDefault map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("forecastDefault"), __scope, false) } getOrElse {Nil},
        __obj.periodDefault map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("periodDefault"), __scope, false) } getOrElse {Nil},
        __obj.timeDefault map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("timeDefault"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.HeaderInformation](__obj.headerInformation, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false),
        __obj.referenceSettings map { scalaxb.toXML[nu.ndw.ReferenceSettings](_, Some("http://datex2.eu/schema/2/2_0"), Some("referenceSettings"), __scope, false) } getOrElse {Nil},
        __obj.elaboratedData flatMap { scalaxb.toXML[nu.ndw.ElaboratedData](_, Some("http://datex2.eu/schema/2/2_0"), Some("elaboratedData"), __scope, false) },
        __obj.elaboratedDataPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("elaboratedDataPublicationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ElectricChargingFormat extends scalaxb.ElemNameParser[nu.ndw.ElectricCharging] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ElectricCharging")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ElectricCharging] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargingStationUsageType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargingStationModelType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumCurrent")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "voltage")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargingStationConnectorType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfChargingPoints")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "electricChargingExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.ElectricCharging(p1 map { scalaxb.fromXML[nu.ndw.ChargingStationUsageTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ElectricCharging, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.chargingStationUsageType flatMap { scalaxb.toXML[nu.ndw.ChargingStationUsageTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargingStationUsageType"), __scope, false) },
        __obj.chargingStationModelType map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargingStationModelType"), __scope, false) } getOrElse {Nil},
        __obj.maximumCurrent map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumCurrent"), __scope, false) } getOrElse {Nil},
        __obj.voltage flatMap { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("voltage"), __scope, false) },
        __obj.chargingStationConnectorType flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargingStationConnectorType"), __scope, false) },
        __obj.numberOfChargingPoints map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfChargingPoints"), __scope, false) } getOrElse {Nil},
        __obj.electricChargingExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("electricChargingExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_EnvironmentalObstructionFormat extends scalaxb.ElemNameParser[nu.ndw.EnvironmentalObstruction] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("EnvironmentalObstruction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.EnvironmentalObstruction] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfObstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityOfObstruction")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "obstructionExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "depth")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "environmentalObstructionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "environmentalObstructionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 =>
      nu.ndw.EnvironmentalObstruction(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.EnvironmentalObstructionTypeEnum](p24, scalaxb.ElemName(node) :: stack),
        p25.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.EnvironmentalObstruction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.EnvironmentalObstruction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.numberOfObstructions map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfObstructions"), __scope, false) } getOrElse {Nil},
        __obj.mobilityOfObstruction map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityOfObstruction"), __scope, false) } getOrElse {Nil},
        __obj.obstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("obstructionExtension"), __scope, false) } getOrElse {Nil},
        __obj.depth map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("depth"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.EnvironmentalObstructionTypeEnum](__obj.environmentalObstructionType, Some("http://datex2.eu/schema/2/2_0"), Some("environmentalObstructionType"), __scope, false),
        __obj.environmentalObstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("environmentalObstructionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_EnvironmentalObstructionTypeEnumFormat = new DefaultNundw_EnvironmentalObstructionTypeEnumFormat {}
  trait DefaultNundw_EnvironmentalObstructionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.EnvironmentalObstructionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.EnvironmentalObstructionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("avalanches")) => nu.ndw.Avalanches
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("earthquakeDamage")) => nu.ndw.EarthquakeDamage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fallenTrees")) => nu.ndw.FallenTrees
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fallingIce")) => nu.ndw.FallingIce
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fallingLightIceOrSnow")) => nu.ndw.FallingLightIceOrSnow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("flashFloods")) => nu.ndw.FlashFloods
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("flooding")) => nu.ndw.Flooding
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("forestFire")) => nu.ndw.ForestFire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("grassFire")) => nu.ndw.GrassFire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("landslips")) => nu.ndw.Landslips
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mudSlide")) => nu.ndw.MudSlide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sewerOverflow")) => nu.ndw.SewerOverflow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rockfalls")) => nu.ndw.Rockfalls
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("seriousFire")) => nu.ndw.SeriousFire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("smokeOrFumes")) => nu.ndw.SmokeOrFumes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stormDamage")) => nu.ndw.StormDamage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("subsidence")) => nu.ndw.Subsidence
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue40

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.EnvironmentalObstructionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.EnvironmentalObstructionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_EquipmentFormat extends scalaxb.ElemNameParser[nu.ndw.Equipment] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Equipment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Equipment] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "equipmentOrServiceFacilityIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "availability")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfEquipmentOrServiceFacility")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "additionalDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "otherEquipmentOrServiceFacility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessibility")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nameOrBrand")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "comment")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "photoUrl")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForUser")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "availabilityAndOpeningTimes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tariffsAndPayment")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacilityExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "equipmentType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "electricCharging")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "equipmentExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      nu.ndw.Equipment(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.AvailabilityEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[nu.ndw.AccessibilityEnum](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.UserTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.OpeningTimes](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.TariffsAndPayment](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.EquipmentTypeEnum](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.ElectricCharging](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Equipment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.equipmentOrServiceFacilityIdentifier flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("equipmentOrServiceFacilityIdentifier"), __scope, false) },
        __obj.availability map { scalaxb.toXML[nu.ndw.AvailabilityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("availability"), __scope, false) } getOrElse {Nil},
        __obj.numberOfEquipmentOrServiceFacility map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfEquipmentOrServiceFacility"), __scope, false) } getOrElse {Nil},
        __obj.additionalDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("additionalDescription"), __scope, false) } getOrElse {Nil},
        __obj.otherEquipmentOrServiceFacility map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("otherEquipmentOrServiceFacility"), __scope, false) } getOrElse {Nil},
        __obj.accessibility flatMap { scalaxb.toXML[nu.ndw.AccessibilityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessibility"), __scope, false) },
        __obj.nameOrBrand map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("nameOrBrand"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("comment"), __scope, false) } getOrElse {Nil},
        __obj.photoUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("photoUrl"), __scope, false) } getOrElse {Nil},
        __obj.applicableForUser flatMap { scalaxb.toXML[nu.ndw.UserTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForUser"), __scope, false) },
        __obj.availabilityAndOpeningTimes map { scalaxb.toXML[nu.ndw.OpeningTimes](_, Some("http://datex2.eu/schema/2/2_0"), Some("availabilityAndOpeningTimes"), __scope, false) } getOrElse {Nil},
        __obj.tariffsAndPayment map { scalaxb.toXML[nu.ndw.TariffsAndPayment](_, Some("http://datex2.eu/schema/2/2_0"), Some("tariffsAndPayment"), __scope, false) } getOrElse {Nil},
        __obj.groupOfLocations map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false) } getOrElse {Nil},
        __obj.applicableForVehicles flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForVehicles"), __scope, false) },
        __obj.parkingEquipmentOrServiceFacilityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacilityExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.EquipmentTypeEnum](__obj.equipmentType, Some("http://datex2.eu/schema/2/2_0"), Some("equipmentType"), __scope, false),
        __obj.electricCharging map { scalaxb.toXML[nu.ndw.ElectricCharging](_, Some("http://datex2.eu/schema/2/2_0"), Some("electricCharging"), __scope, false) } getOrElse {Nil},
        __obj.equipmentExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("equipmentExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_EquipmentOrSystemFaultFormat extends scalaxb.ElemNameParser[nu.ndw.EquipmentOrSystemFault] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("EquipmentOrSystemFault")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.EquipmentOrSystemFault] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "equipmentOrSystemFaultType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultyEquipmentOrSystemType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "equipmentOrSystemFaultExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      nu.ndw.EquipmentOrSystemFault(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.EquipmentOrSystemFaultTypeEnum](p20, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.EquipmentOrSystemTypeEnum](p21, scalaxb.ElemName(node) :: stack),
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.EquipmentOrSystemFault, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.EquipmentOrSystemFault, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.EquipmentOrSystemFaultTypeEnum](__obj.equipmentOrSystemFaultType, Some("http://datex2.eu/schema/2/2_0"), Some("equipmentOrSystemFaultType"), __scope, false),
        scalaxb.toXML[nu.ndw.EquipmentOrSystemTypeEnum](__obj.faultyEquipmentOrSystemType, Some("http://datex2.eu/schema/2/2_0"), Some("faultyEquipmentOrSystemType"), __scope, false),
        __obj.equipmentOrSystemFaultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("equipmentOrSystemFaultExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_EquipmentOrSystemFaultTypeEnumFormat = new DefaultNundw_EquipmentOrSystemFaultTypeEnumFormat {}
  trait DefaultNundw_EquipmentOrSystemFaultTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.EquipmentOrSystemFaultTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.EquipmentOrSystemFaultTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notWorking")) => nu.ndw.NotWorking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("outOfService")) => nu.ndw.OutOfServiceValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("workingIncorrectly")) => nu.ndw.WorkingIncorrectly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("workingIntermittently")) => nu.ndw.WorkingIntermittently

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.EquipmentOrSystemFaultTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.EquipmentOrSystemFaultTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_EquipmentOrSystemTypeEnumFormat = new DefaultNundw_EquipmentOrSystemTypeEnumFormat {}
  trait DefaultNundw_EquipmentOrSystemTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.EquipmentOrSystemTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.EquipmentOrSystemTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("anprCameras")) => nu.ndw.AnprCameras
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("automatedTollSystem")) => nu.ndw.AutomatedTollSystem
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cctvCameras")) => nu.ndw.CctvCameras
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("emergencyRoadsideTelephones")) => nu.ndw.EmergencyRoadsideTelephones
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("galleryLights")) => nu.ndw.GalleryLights
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("laneControlSigns")) => nu.ndw.LaneControlSigns
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("levelCrossing")) => nu.ndw.LevelCrossing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("matrixSigns")) => nu.ndw.MatrixSigns
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rampControls")) => nu.ndw.RampControls
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsideCommunicationsSystem")) => nu.ndw.RoadsideCommunicationsSystem
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsidePowerSystem")) => nu.ndw.RoadsidePowerSystem
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("speedControlSigns")) => nu.ndw.SpeedControlSigns
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("streetLighting")) => nu.ndw.StreetLighting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temporaryTrafficLights")) => nu.ndw.TemporaryTrafficLights
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tollGates")) => nu.ndw.TollGates
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficLightSets")) => nu.ndw.TrafficLightSets
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficSignals")) => nu.ndw.TrafficSignals
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tunnelLights")) => nu.ndw.TunnelLights
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tunnelVentilation")) => nu.ndw.TunnelVentilation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("variableMessageSigns")) => nu.ndw.VariableMessageSigns
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue39

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.EquipmentOrSystemTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.EquipmentOrSystemTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_EquipmentTypeEnumFormat = new DefaultNundw_EquipmentTypeEnumFormat {}
  trait DefaultNundw_EquipmentTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.EquipmentTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.EquipmentTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("toilet")) => nu.ndw.Toilet
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shower")) => nu.ndw.Shower
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("informationPoint")) => nu.ndw.InformationPoint
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("informatonStele")) => nu.ndw.InformatonStele
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("internetTerminal")) => nu.ndw.InternetTerminal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("internetWireless")) => nu.ndw.InternetWireless
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("payDesk")) => nu.ndw.PayDesk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("paymentMachine")) => nu.ndw.PaymentMachine
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cashMachine")) => nu.ndw.CashMachine
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vendingMachine")) => nu.ndw.VendingMachine
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("faxMachineOrService")) => nu.ndw.FaxMachineOrService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("copyMachineOrService")) => nu.ndw.CopyMachineOrService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("safeDeposit")) => nu.ndw.SafeDeposit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("luggageLocker")) => nu.ndw.LuggageLocker
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicPhone")) => nu.ndw.PublicPhone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicCoinPhone")) => nu.ndw.PublicCoinPhone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicCardPhone")) => nu.ndw.PublicCardPhone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("elevator")) => nu.ndw.Elevator
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("picnicFacilities")) => nu.ndw.PicnicFacilities
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dumpingStation")) => nu.ndw.DumpingStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freshWater")) => nu.ndw.FreshWater
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wasteDisposal")) => nu.ndw.WasteDisposal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("refuseBin")) => nu.ndw.RefuseBin
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("iceFreeScaffold")) => nu.ndw.IceFreeScaffold
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("playground")) => nu.ndw.Playground
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("electricChargingStation")) => nu.ndw.ElectricChargingStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bikeParking")) => nu.ndw.BikeParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tollTerminal")) => nu.ndw.TollTerminal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("defibrillator")) => nu.ndw.Defibrillator
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("firstAidEquipment")) => nu.ndw.FirstAidEquipment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fireHose")) => nu.ndw.FireHose
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fireExtingiusher")) => nu.ndw.FireExtingiusher
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fireHydrant")) => nu.ndw.FireHydrant
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => nu.ndw.NoneTypeValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue30
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue58

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.EquipmentTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.EquipmentTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ExchangeFormat extends scalaxb.ElemNameParser[nu.ndw.Exchange] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Exchange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Exchange] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "changedFlag")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "clientIdentification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "deliveryBreak")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "denyReason")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "historicalStartDate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "historicalStopDate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "keepAlive")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "requestType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "response")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subscriptionReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplierIdentification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "target")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subscription")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "filterReference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "catalogueReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "exchangeExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      nu.ndw.Exchange(p1.headOption map { scalaxb.fromXML[nu.ndw.ChangedFlagEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.DenyReasonEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.RequestTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.ResponseEnum](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[nu.ndw.Target](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw.Subscription](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.FilterReference](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.CatalogueReference](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Exchange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.changedFlag map { scalaxb.toXML[nu.ndw.ChangedFlagEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("changedFlag"), __scope, false) } getOrElse {Nil},
        __obj.clientIdentification map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("clientIdentification"), __scope, false) } getOrElse {Nil},
        __obj.deliveryBreak map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("deliveryBreak"), __scope, false) } getOrElse {Nil},
        __obj.denyReason map { scalaxb.toXML[nu.ndw.DenyReasonEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("denyReason"), __scope, false) } getOrElse {Nil},
        __obj.historicalStartDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("historicalStartDate"), __scope, false) } getOrElse {Nil},
        __obj.historicalStopDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("historicalStopDate"), __scope, false) } getOrElse {Nil},
        __obj.keepAlive map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("keepAlive"), __scope, false) } getOrElse {Nil},
        __obj.requestType map { scalaxb.toXML[nu.ndw.RequestTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("requestType"), __scope, false) } getOrElse {Nil},
        __obj.response map { scalaxb.toXML[nu.ndw.ResponseEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("response"), __scope, false) } getOrElse {Nil},
        __obj.subscriptionReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("subscriptionReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.supplierIdentification, Some("http://datex2.eu/schema/2/2_0"), Some("supplierIdentification"), __scope, false),
        __obj.target map { scalaxb.toXML[nu.ndw.Target](_, Some("http://datex2.eu/schema/2/2_0"), Some("target"), __scope, false) } getOrElse {Nil},
        __obj.subscription map { scalaxb.toXML[nu.ndw.Subscription](_, Some("http://datex2.eu/schema/2/2_0"), Some("subscription"), __scope, false) } getOrElse {Nil},
        __obj.filterReference flatMap { scalaxb.toXML[nu.ndw.FilterReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("filterReference"), __scope, false) },
        __obj.catalogueReference flatMap { scalaxb.toXML[nu.ndw.CatalogueReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("catalogueReference"), __scope, false) },
        __obj.exchangeExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("exchangeExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ExternalReferencingFormat extends scalaxb.ElemNameParser[nu.ndw.ExternalReferencing] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ExternalReferencing")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ExternalReferencing] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "externalLocationCode")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "externalReferencingSystem")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "externalReferencingExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.ExternalReferencing(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ExternalReferencing, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.externalLocationCode, Some("http://datex2.eu/schema/2/2_0"), Some("externalLocationCode"), __scope, false),
        scalaxb.toXML[String](__obj.externalReferencingSystem, Some("http://datex2.eu/schema/2/2_0"), Some("externalReferencingSystem"), __scope, false),
        __obj.externalReferencingExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("externalReferencingExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_FaultableFormat extends scalaxb.XMLFormat[nu.ndw.Faultable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Faultable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VmsFault")) => Right(scalaxb.fromXML[nu.ndw.VmsFault](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ElaboratedDataFault")) => Right(scalaxb.fromXML[nu.ndw.ElaboratedDataFault](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("MeasurementEquipmentFault")) => Right(scalaxb.fromXML[nu.ndw.MeasurementEquipmentFault](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VmsUnitFault")) => Right(scalaxb.fromXML[nu.ndw.VmsUnitFault](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.Fault](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Faultable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.VmsFault => scalaxb.toXML[nu.ndw.VmsFault](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ElaboratedDataFault => scalaxb.toXML[nu.ndw.ElaboratedDataFault](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.MeasurementEquipmentFault => scalaxb.toXML[nu.ndw.MeasurementEquipmentFault](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.VmsUnitFault => scalaxb.toXML[nu.ndw.VmsUnitFault](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.Fault => scalaxb.toXML[nu.ndw.Fault](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_FaultFormat extends scalaxb.ElemNameParser[nu.ndw.Fault] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Fault")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Fault] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultCreationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultLastUpdateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultSeverity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.Fault(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw.FaultSeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Fault, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.faultIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.faultDescription map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultDescription"), __scope, false) } getOrElse {Nil},
        __obj.faultCreationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultCreationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.faultLastUpdateTime, Some("http://datex2.eu/schema/2/2_0"), Some("faultLastUpdateTime"), __scope, false),
        __obj.faultSeverity map { scalaxb.toXML[nu.ndw.FaultSeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultSeverity"), __scope, false) } getOrElse {Nil},
        __obj.faultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_FaultSeverityEnumFormat = new DefaultNundw_FaultSeverityEnumFormat {}
  trait DefaultNundw_FaultSeverityEnumFormat extends scalaxb.XMLFormat[nu.ndw.FaultSeverityEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.FaultSeverityEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("low")) => nu.ndw.LowValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("medium")) => nu.ndw.MediumValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("high")) => nu.ndw.HighValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue31

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.FaultSeverityEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.FaultSeverityEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_FilterExitManagementFormat extends scalaxb.ElemNameParser[nu.ndw.FilterExitManagement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("FilterExitManagement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.FilterExitManagement] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "filterEnd")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "filterOutOfRange")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "filterExitManagementExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.FilterExitManagement(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.FilterExitManagement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.filterEnd, Some("http://datex2.eu/schema/2/2_0"), Some("filterEnd"), __scope, false),
        scalaxb.toXML[Boolean](__obj.filterOutOfRange, Some("http://datex2.eu/schema/2/2_0"), Some("filterOutOfRange"), __scope, false),
        __obj.filterExitManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("filterExitManagementExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_FilterReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.FilterReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("FilterReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.FilterReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "deleteFilter")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "filterOperationApproved")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "keyFilterReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "filterReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.FilterReference(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.FilterReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.deleteFilter map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("deleteFilter"), __scope, false) } getOrElse {Nil},
        __obj.filterOperationApproved map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("filterOperationApproved"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.keyFilterReference, Some("http://datex2.eu/schema/2/2_0"), Some("keyFilterReference"), __scope, false),
        __obj.filterReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("filterReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_FloatingPointMetreDistanceValueFormat extends scalaxb.ElemNameParser[nu.ndw.FloatingPointMetreDistanceValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("FloatingPointMetreDistanceValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.FloatingPointMetreDistanceValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "floatingPointMetreDistance")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "floatingPointMetreDistanceValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.FloatingPointMetreDistanceValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.FloatingPointMetreDistanceValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.FloatingPointMetreDistanceValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.floatingPointMetreDistance, Some("http://datex2.eu/schema/2/2_0"), Some("floatingPointMetreDistance"), __scope, false),
        __obj.floatingPointMetreDistanceValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("floatingPointMetreDistanceValueExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_FuelType2EnumFormat = new DefaultNundw_FuelType2EnumFormat {}
  trait DefaultNundw_FuelType2EnumFormat extends scalaxb.XMLFormat[nu.ndw.FuelType2Enum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.FuelType2Enum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("all")) => nu.ndw.AllType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrol95Octane")) => nu.ndw.Petrol95Octane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrol98Octane")) => nu.ndw.Petrol98Octane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrolLeaded")) => nu.ndw.PetrolLeaded
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrolUnleaded")) => nu.ndw.PetrolUnleaded
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue21
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue38

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.FuelType2Enum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.FuelType2Enum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_FuelTypeEnumFormat = new DefaultNundw_FuelTypeEnumFormat {}
  trait DefaultNundw_FuelTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.FuelTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.FuelTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("battery")) => nu.ndw.Battery
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("biodiesel")) => nu.ndw.Biodiesel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("diesel")) => nu.ndw.Diesel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dieselBatteryHybrid")) => nu.ndw.DieselBatteryHybrid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ethanol")) => nu.ndw.Ethanol
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hydrogen")) => nu.ndw.Hydrogen
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("liquidGas")) => nu.ndw.LiquidGas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lpg")) => nu.ndw.Lpg
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("methane")) => nu.ndw.Methane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrol")) => nu.ndw.PetrolValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrolBatteryHybrid")) => nu.ndw.PetrolBatteryHybrid

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.FuelTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.FuelTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_GeneralInstructionOrMessageToRoadUsersFormat extends scalaxb.ElemNameParser[nu.ndw.GeneralInstructionOrMessageToRoadUsers] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GeneralInstructionOrMessageToRoadUsers")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GeneralInstructionOrMessageToRoadUsers] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "complianceOption")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficDirection")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "placesAtWhichApplicable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "automaticallyInitiated")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "networkManagementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalInstructionToRoadUsersType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalMessageToRoadUsers")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalInstructionOrMessageToRoadUsersExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      nu.ndw.GeneralInstructionOrMessageToRoadUsers(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ComplianceOptionEnum](p23, scalaxb.ElemName(node) :: stack),
        p24 map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw.TrafficTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw.PlacesEnum](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[nu.ndw.GeneralInstructionToRoadUsersTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.GeneralInstructionOrMessageToRoadUsers, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.GeneralInstructionOrMessageToRoadUsers, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ComplianceOptionEnum](__obj.complianceOption, Some("http://datex2.eu/schema/2/2_0"), Some("complianceOption"), __scope, false),
        __obj.applicableForTrafficDirection flatMap { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficDirection"), __scope, false) },
        __obj.applicableForTrafficType flatMap { scalaxb.toXML[nu.ndw.TrafficTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficType"), __scope, false) },
        __obj.placesAtWhichApplicable flatMap { scalaxb.toXML[nu.ndw.PlacesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("placesAtWhichApplicable"), __scope, false) },
        __obj.automaticallyInitiated map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("automaticallyInitiated"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) },
        __obj.networkManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("networkManagementExtension"), __scope, false) } getOrElse {Nil},
        __obj.generalInstructionToRoadUsersType map { scalaxb.toXML[nu.ndw.GeneralInstructionToRoadUsersTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalInstructionToRoadUsersType"), __scope, false) } getOrElse {Nil},
        __obj.generalMessageToRoadUsers map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalMessageToRoadUsers"), __scope, false) } getOrElse {Nil},
        __obj.generalInstructionOrMessageToRoadUsersExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalInstructionOrMessageToRoadUsersExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_GeneralInstructionToRoadUsersTypeEnumFormat = new DefaultNundw_GeneralInstructionToRoadUsersTypeEnumFormat {}
  trait DefaultNundw_GeneralInstructionToRoadUsersTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.GeneralInstructionToRoadUsersTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.GeneralInstructionToRoadUsersTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("allowEmergencyVehiclesToPass")) => nu.ndw.AllowEmergencyVehiclesToPass
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("approachWithCare")) => nu.ndw.ApproachWithCare
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("avoidTheArea")) => nu.ndw.AvoidTheArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("closeAllWindowsTurnOffHeaterAndVents")) => nu.ndw.CloseAllWindowsTurnOffHeaterAndVents
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("crossJunctionWithCare")) => nu.ndw.CrossJunctionWithCare
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotAllowUnnecessaryGaps")) => nu.ndw.DoNotAllowUnnecessaryGaps
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotLeaveYourVehicle")) => nu.ndw.DoNotLeaveYourVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotThrowOutAnyBurningObjects")) => nu.ndw.DoNotThrowOutAnyBurningObjects
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotUseNavigationSystems")) => nu.ndw.DoNotUseNavigationSystems
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("driveCarefully")) => nu.ndw.DriveCarefully
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("driveWithExtremeCaution")) => nu.ndw.DriveWithExtremeCaution
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("flashYourLights")) => nu.ndw.FlashYourLights
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("followTheVehicleInFrontSmoothly")) => nu.ndw.FollowTheVehicleInFrontSmoothly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("increaseNormalFollowingDistance")) => nu.ndw.IncreaseNormalFollowingDistance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inEmergencyWaitForPatrolService")) => nu.ndw.InEmergencyWaitForPatrolService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("keepYourDistance")) => nu.ndw.KeepYourDistance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("leaveYourVehicleProceedToNextSafePlace")) => nu.ndw.LeaveYourVehicleProceedToNextSafePlace
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noNakedFlames")) => nu.ndw.NoNakedFlames
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noOvertaking")) => nu.ndw.NoOvertaking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noSmoking")) => nu.ndw.NoSmoking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noStopping")) => nu.ndw.NoStopping
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noUturns")) => nu.ndw.NoUturns
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("observeAmberAlert")) => nu.ndw.ObserveAmberAlert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("observeSignals")) => nu.ndw.ObserveSignals
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("observeSigns")) => nu.ndw.ObserveSigns
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onlyTravelIfAbsolutelyNecessary")) => nu.ndw.OnlyTravelIfAbsolutelyNecessary
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overtakeWithCare")) => nu.ndw.OvertakeWithCare
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pullOverToTheEdgeOfTheRoadway")) => nu.ndw.PullOverToTheEdgeOfTheRoadway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopAtNextSafePlace")) => nu.ndw.StopAtNextSafePlace
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopAtNextServiceArea")) => nu.ndw.StopAtNextServiceArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("switchOffEngine")) => nu.ndw.SwitchOffEngine
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("switchOffMobilePhonesAndTwoWayRadios")) => nu.ndw.SwitchOffMobilePhonesAndTwoWayRadios
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("testYourBrakes")) => nu.ndw.TestYourBrakes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useBusService")) => nu.ndw.UseBusService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useFogLights")) => nu.ndw.UseFogLights
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useHazardWarningLights")) => nu.ndw.UseHazardWarningLights
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useHeadlights")) => nu.ndw.UseHeadlights
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useRailService")) => nu.ndw.UseRailService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useTramService")) => nu.ndw.UseTramService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useUndergroundService")) => nu.ndw.UseUndergroundService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("waitForEscortVehicle")) => nu.ndw.WaitForEscortVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue59

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.GeneralInstructionToRoadUsersTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.GeneralInstructionToRoadUsersTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_GeneralNetworkManagementFormat extends scalaxb.ElemNameParser[nu.ndw.GeneralNetworkManagement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GeneralNetworkManagement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GeneralNetworkManagement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "complianceOption")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficDirection")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "placesAtWhichApplicable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "automaticallyInitiated")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "networkManagementExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalNetworkManagementType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficManuallyDirectedBy")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalNetworkManagementExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      nu.ndw.GeneralNetworkManagement(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ComplianceOptionEnum](p23, scalaxb.ElemName(node) :: stack),
        p24 map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw.TrafficTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw.PlacesEnum](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GeneralNetworkManagementTypeEnum](p30, scalaxb.ElemName(node) :: stack),
        p31.headOption map { scalaxb.fromXML[nu.ndw.PersonCategoryEnum](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.GeneralNetworkManagement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.GeneralNetworkManagement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ComplianceOptionEnum](__obj.complianceOption, Some("http://datex2.eu/schema/2/2_0"), Some("complianceOption"), __scope, false),
        __obj.applicableForTrafficDirection flatMap { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficDirection"), __scope, false) },
        __obj.applicableForTrafficType flatMap { scalaxb.toXML[nu.ndw.TrafficTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficType"), __scope, false) },
        __obj.placesAtWhichApplicable flatMap { scalaxb.toXML[nu.ndw.PlacesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("placesAtWhichApplicable"), __scope, false) },
        __obj.automaticallyInitiated map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("automaticallyInitiated"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) },
        __obj.networkManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("networkManagementExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.GeneralNetworkManagementTypeEnum](__obj.generalNetworkManagementType, Some("http://datex2.eu/schema/2/2_0"), Some("generalNetworkManagementType"), __scope, false),
        __obj.trafficManuallyDirectedBy map { scalaxb.toXML[nu.ndw.PersonCategoryEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficManuallyDirectedBy"), __scope, false) } getOrElse {Nil},
        __obj.generalNetworkManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalNetworkManagementExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_GeneralNetworkManagementTypeEnumFormat = new DefaultNundw_GeneralNetworkManagementTypeEnumFormat {}
  trait DefaultNundw_GeneralNetworkManagementTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.GeneralNetworkManagementTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.GeneralNetworkManagementTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bridgeSwingInOperation")) => nu.ndw.BridgeSwingInOperationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("convoyService")) => nu.ndw.ConvoyService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("obstacleSignalling")) => nu.ndw.ObstacleSignalling
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rampMeteringInOperation")) => nu.ndw.RampMeteringInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temporaryTrafficLights")) => nu.ndw.TemporaryTrafficLightsValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tollGatesOpen")) => nu.ndw.TollGatesOpen
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficBeingManuallyDirected")) => nu.ndw.TrafficBeingManuallyDirected
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficHeld")) => nu.ndw.TrafficHeld
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue60

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.GeneralNetworkManagementTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.GeneralNetworkManagementTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_GeneralObstructionFormat extends scalaxb.ElemNameParser[nu.ndw.GeneralObstruction] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GeneralObstruction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GeneralObstruction] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfObstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityOfObstruction")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "obstructionExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "obstructionType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfPeopleInvolved")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalObstructionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 =>
      nu.ndw.GeneralObstruction(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[nu.ndw.ObstructionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[nu.ndw.GroupOfPeopleInvolved](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.GeneralObstruction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.GeneralObstruction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.numberOfObstructions map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfObstructions"), __scope, false) } getOrElse {Nil},
        __obj.mobilityOfObstruction map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityOfObstruction"), __scope, false) } getOrElse {Nil},
        __obj.obstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("obstructionExtension"), __scope, false) } getOrElse {Nil},
        __obj.obstructionType flatMap { scalaxb.toXML[nu.ndw.ObstructionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("obstructionType"), __scope, false) },
        __obj.groupOfPeopleInvolved flatMap { scalaxb.toXML[nu.ndw.GroupOfPeopleInvolved](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfPeopleInvolved"), __scope, false) },
        __obj.generalObstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalObstructionExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_GenericPublicationFormat extends scalaxb.ElemNameParser[nu.ndw.GenericPublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GenericPublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GenericPublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationCreator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublicationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "genericPublicationName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "genericPublicationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.GenericPublication(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._GenericPublicationExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.GenericPublication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.GenericPublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.feedDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedDescription"), __scope, false) } getOrElse {Nil},
        __obj.feedType map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.publicationTime, Some("http://datex2.eu/schema/2/2_0"), Some("publicationTime"), __scope, false),
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.publicationCreator, Some("http://datex2.eu/schema/2/2_0"), Some("publicationCreator"), __scope, false),
        __obj.payloadPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublicationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.genericPublicationName, Some("http://datex2.eu/schema/2/2_0"), Some("genericPublicationName"), __scope, false),
        __obj.genericPublicationExtension map { scalaxb.toXML[nu.ndw._GenericPublicationExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("genericPublicationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_GenericSituationRecordFormat extends scalaxb.ElemNameParser[nu.ndw.GenericSituationRecord] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GenericSituationRecord")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GenericSituationRecord] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "genericSituationRecordName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "genericSituationRecordExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      nu.ndw.GenericSituationRecord(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p19, scalaxb.ElemName(node) :: stack),
        p20.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.GenericSituationRecord, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.GenericSituationRecord, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.genericSituationRecordName, Some("http://datex2.eu/schema/2/2_0"), Some("genericSituationRecordName"), __scope, false),
        __obj.genericSituationRecordExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("genericSituationRecordExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_GrossWeightCharacteristicFormat extends scalaxb.ElemNameParser[nu.ndw.GrossWeightCharacteristic] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GrossWeightCharacteristic")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GrossWeightCharacteristic] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "comparisonOperator")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "grossVehicleWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "grossWeightCharacteristicExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.GrossWeightCharacteristic(scalaxb.fromXML[nu.ndw.ComparisonOperatorEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.GrossWeightCharacteristic, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.ComparisonOperatorEnum](__obj.comparisonOperator, Some("http://datex2.eu/schema/2/2_0"), Some("comparisonOperator"), __scope, false),
        scalaxb.toXML[Float](__obj.grossVehicleWeight, Some("http://datex2.eu/schema/2/2_0"), Some("grossVehicleWeight"), __scope, false),
        __obj.grossWeightCharacteristicExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("grossWeightCharacteristicExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_GroupOfLocationsFormat extends scalaxb.XMLFormat[nu.ndw.GroupOfLocations] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.GroupOfLocations] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Location")) => Right(scalaxb.fromXML[nu.ndw.Location](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Area")) => Right(scalaxb.fromXML[nu.ndw.Area](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("LocationByReference")) => Right(scalaxb.fromXML[nu.ndw.LocationByReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NetworkLocation")) => Right(scalaxb.fromXML[nu.ndw.NetworkLocation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Point")) => Right(scalaxb.fromXML[nu.ndw.Point](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Linear")) => Right(scalaxb.fromXML[nu.ndw.Linear](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Itinerary")) => Right(scalaxb.fromXML[nu.ndw.Itinerary](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ItineraryByIndexedLocations")) => Right(scalaxb.fromXML[nu.ndw.ItineraryByIndexedLocations](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ItineraryByReference")) => Right(scalaxb.fromXML[nu.ndw.ItineraryByReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonOrderedLocations")) => Right(scalaxb.fromXML[nu.ndw.NonOrderedLocations](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonOrderedLocationGroupByReference")) => Right(scalaxb.fromXML[nu.ndw.NonOrderedLocationGroupByReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonOrderedLocationGroupByList")) => Right(scalaxb.fromXML[nu.ndw.NonOrderedLocationGroupByList](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.GroupOfLocations, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.Location => scalaxb.toXML[nu.ndw.Location](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.Itinerary => scalaxb.toXML[nu.ndw.Itinerary](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.NonOrderedLocations => scalaxb.toXML[nu.ndw.NonOrderedLocations](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_GroupOfParkingSitesFormat extends scalaxb.ElemNameParser[nu.ndw.GroupOfParkingSites] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GroupOfParkingSites")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GroupOfParkingSites] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAlias")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingDescription")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPrincipalNumberOfSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumParkingDuration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "photoUrl")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupanyDetectionType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "emergencyContact")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "owner")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "responisbleAuthority")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "securityService")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operator")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "servicePartner")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingVMS")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingLocation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRoute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingColour")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "onlyAssignedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "assignedParkingAmongOthers")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "prohibitedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tariffsAndPayment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpace")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingThresholds")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "permitsAndProhibitions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "emergencyAssemblyPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "entireArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSitesType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteByReference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSite")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSitesExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 =>
      nu.ndw.GroupOfParkingSites(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.OccupancyDetectionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[nu.ndw.ParkingVMS](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p18, scalaxb.ElemName(node) :: stack),
        p19 map { scalaxb.fromXML[nu.ndw.ParkingRoute](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.RGBColour](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.TariffsAndPayment](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw._ParkingSpace](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[nu.ndw._GroupOfParkingSpaces](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[nu.ndw.ParkingThresholds](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[nu.ndw.PermitsAndProhibitions](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[nu.ndw.Area](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw.Dimension](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[nu.ndw.GroupOfParkingSitesTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[nu.ndw._ParkingRecordVersionedReference](_, scalaxb.ElemName(node) :: stack) },
        p36 map { scalaxb.fromXML[nu.ndw.ParkingSite](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.GroupOfParkingSites, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.GroupOfParkingSites, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingName"), __scope, false) } getOrElse {Nil},
        __obj.parkingAlias flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAlias"), __scope, false) },
        __obj.parkingDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingDescription"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.parkingRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordVersionTime"), __scope, false),
        __obj.parkingNumberOfSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfSpaces"), __scope, false) } getOrElse {Nil},
        __obj.parkingPrincipalNumberOfSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPrincipalNumberOfSpaces"), __scope, false) } getOrElse {Nil},
        __obj.maximumParkingDuration map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumParkingDuration"), __scope, false) } getOrElse {Nil},
        __obj.photoUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("photoUrl"), __scope, false) } getOrElse {Nil},
        __obj.urlLinkAddress map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkAddress"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupanyDetectionType flatMap { scalaxb.toXML[nu.ndw.OccupancyDetectionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupanyDetectionType"), __scope, false) },
        __obj.emergencyContact flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("emergencyContact"), __scope, false) },
        __obj.owner flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("owner"), __scope, false) },
        __obj.responisbleAuthority flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("responisbleAuthority"), __scope, false) },
        __obj.securityService flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("securityService"), __scope, false) },
        __obj.operator flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("operator"), __scope, false) },
        __obj.servicePartner flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("servicePartner"), __scope, false) },
        __obj.parkingVMS flatMap { scalaxb.toXML[nu.ndw.ParkingVMS](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingVMS"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.parkingLocation, Some("http://datex2.eu/schema/2/2_0"), Some("parkingLocation"), __scope, false),
        __obj.parkingRoute flatMap { scalaxb.toXML[nu.ndw.ParkingRoute](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRoute"), __scope, false) },
        __obj.parkingColour map { scalaxb.toXML[nu.ndw.RGBColour](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingColour"), __scope, false) } getOrElse {Nil},
        __obj.onlyAssignedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("onlyAssignedParking"), __scope, false) } getOrElse {Nil},
        __obj.assignedParkingAmongOthers map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("assignedParkingAmongOthers"), __scope, false) } getOrElse {Nil},
        __obj.prohibitedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("prohibitedParking"), __scope, false) } getOrElse {Nil},
        __obj.tariffsAndPayment map { scalaxb.toXML[nu.ndw.TariffsAndPayment](_, Some("http://datex2.eu/schema/2/2_0"), Some("tariffsAndPayment"), __scope, false) } getOrElse {Nil},
        __obj.parkingEquipmentOrServiceFacility flatMap { scalaxb.toXML[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacility"), __scope, false) },
        __obj.parkingSpace flatMap { scalaxb.toXML[nu.ndw._ParkingSpace](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpace"), __scope, false) },
        __obj.groupOfParkingSpaces flatMap { scalaxb.toXML[nu.ndw._GroupOfParkingSpaces](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpaces"), __scope, false) },
        __obj.parkingThresholds map { scalaxb.toXML[nu.ndw.ParkingThresholds](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingThresholds"), __scope, false) } getOrElse {Nil},
        __obj.permitsAndProhibitions flatMap { scalaxb.toXML[nu.ndw.PermitsAndProhibitions](_, Some("http://datex2.eu/schema/2/2_0"), Some("permitsAndProhibitions"), __scope, false) },
        __obj.emergencyAssemblyPoint map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("emergencyAssemblyPoint"), __scope, false) } getOrElse {Nil},
        __obj.entireArea map { scalaxb.toXML[nu.ndw.Area](_, Some("http://datex2.eu/schema/2/2_0"), Some("entireArea"), __scope, false) } getOrElse {Nil},
        __obj.parkingRecordDimension map { scalaxb.toXML[nu.ndw.Dimension](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordDimension"), __scope, false) } getOrElse {Nil},
        __obj.parkingRecordExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.groupOfParkingSitesType map { scalaxb.toXML[nu.ndw.GroupOfParkingSitesTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSitesType"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteByReference flatMap { scalaxb.toXML[nu.ndw._ParkingRecordVersionedReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteByReference"), __scope, false) },
        __obj.parkingSite flatMap { scalaxb.toXML[nu.ndw.ParkingSite](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSite"), __scope, false) },
        __obj.groupOfParkingSitesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSitesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_GroupOfParkingSitesStatusFormat extends scalaxb.ElemNameParser[nu.ndw.GroupOfParkingSitesStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GroupOfParkingSitesStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GroupOfParkingSitesStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusOriginTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingQueueingTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingConditions")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "blurredAvailability")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingFault")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "winterEquipmentManagementType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceStatus")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancy")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpacesStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusValidity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overrideParkingThresholds")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacilityStatus")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenarioStatus")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAccessStatus")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordStatusExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSitesStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSitesStatusExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      nu.ndw.GroupOfParkingSitesStatus(scalaxb.fromXML[nu.ndw._ParkingRecordVersionedReference](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.ParkingConditionsEnum](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[nu.ndw.ParkingFaultEnum](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[nu.ndw.WinterEquipmentManagementTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ParkingOccupancyable](p10, scalaxb.ElemName(node) :: stack),
        p11 map { scalaxb.fromXML[nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.ParkingStatusValidity](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw.ParkingThresholds](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[nu.ndw.ParkingAccessStatus](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[nu.ndw.ParkingRouteStatus](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.GroupOfParkingSitesStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.GroupOfParkingSitesStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._ParkingRecordVersionedReference](__obj.parkingRecordReference, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordReference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.parkingStatusOriginTime, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusOriginTime"), __scope, false),
        __obj.parkingStatusDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusDescription"), __scope, false) } getOrElse {Nil},
        __obj.parkingQueueingTime map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingQueueingTime"), __scope, false) } getOrElse {Nil},
        __obj.parkingConditions map { scalaxb.toXML[nu.ndw.ParkingConditionsEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingConditions"), __scope, false) } getOrElse {Nil},
        __obj.blurredAvailability flatMap { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("blurredAvailability"), __scope, false) },
        __obj.parkingFault flatMap { scalaxb.toXML[nu.ndw.ParkingFaultEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingFault"), __scope, false) },
        __obj.winterEquipmentManagementType flatMap { scalaxb.toXML[nu.ndw.WinterEquipmentManagementTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("winterEquipmentManagementType"), __scope, false) },
        __obj.parkingSpaceStatus flatMap { scalaxb.toXML[nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceStatus"), __scope, false) },
        scalaxb.toXML[nu.ndw.ParkingOccupancyable](__obj.parkingOccupancy, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancy"), __scope, false),
        __obj.groupOfParkingSpacesStatus flatMap { scalaxb.toXML[nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpacesStatus"), __scope, false) },
        __obj.parkingStatusValidity map { scalaxb.toXML[nu.ndw.ParkingStatusValidity](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusValidity"), __scope, false) } getOrElse {Nil},
        __obj.overrideParkingThresholds map { scalaxb.toXML[nu.ndw.ParkingThresholds](_, Some("http://datex2.eu/schema/2/2_0"), Some("overrideParkingThresholds"), __scope, false) } getOrElse {Nil},
        __obj.parkingEquipmentOrServiceFacilityStatus flatMap { scalaxb.toXML[nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacilityStatus"), __scope, false) },
        __obj.parkingUsageScenarioStatus flatMap { scalaxb.toXML[nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenarioStatus"), __scope, false) },
        __obj.parkingAccessStatus flatMap { scalaxb.toXML[nu.ndw.ParkingAccessStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAccessStatus"), __scope, false) },
        __obj.parkingRouteStatus flatMap { scalaxb.toXML[nu.ndw.ParkingRouteStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteStatus"), __scope, false) },
        __obj.parkingRecordStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordStatusExtension"), __scope, false) } getOrElse {Nil},
        __obj.groupOfParkingSitesStatus map { scalaxb.toXML[nu.ndw.GroupOfParkingSitesStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSitesStatus"), __scope, false) } getOrElse {Nil},
        __obj.groupOfParkingSitesStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSitesStatusExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_GroupOfParkingSitesStatusEnumFormat = new DefaultNundw_GroupOfParkingSitesStatusEnumFormat {}
  trait DefaultNundw_GroupOfParkingSitesStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.GroupOfParkingSitesStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.GroupOfParkingSitesStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("allParkingsFull")) => nu.ndw.AllParkingsFull
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("multiStoreyParkingsFull")) => nu.ndw.MultiStoreyParkingsFull
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noMoreParkingSpacesAvailable")) => nu.ndw.NoMoreParkingSpacesAvailableValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("enoughSpacesAvailable")) => nu.ndw.EnoughSpacesAvailableValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue32
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue61

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.GroupOfParkingSitesStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.GroupOfParkingSitesStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_GroupOfParkingSitesTypeEnumFormat = new DefaultNundw_GroupOfParkingSitesTypeEnumFormat {}
  trait DefaultNundw_GroupOfParkingSitesTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.GroupOfParkingSitesTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.GroupOfParkingSitesTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkingArea")) => nu.ndw.ParkingArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("truckParkingPriorityZone")) => nu.ndw.TruckParkingPriorityZone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("aggregationOfInformation")) => nu.ndw.AggregationOfInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inhabitantZone")) => nu.ndw.InhabitantZone

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.GroupOfParkingSitesTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.GroupOfParkingSitesTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_GroupOfParkingSpacesFormat extends scalaxb.ElemNameParser[nu.ndw.GroupOfParkingSpaces] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GroupOfParkingSpaces")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GroupOfParkingSpaces] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceOrGroupIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingFloorOrLevel")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessibility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceAccessibility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpacePhysics")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingMode")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingReservation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumParkingDuration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceFromPrimaryRoad")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupanyDetectionType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSecurity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dedicatedAccess")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "onlyAssignedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "assignedParkingAmongOthers")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "prohibitedParking")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenario")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceBasicsExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfSpaces")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingTypeOfGroup")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "identicalToGroup")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "realSubsetOfGroup")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "minimumParkingSpaceDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dimensionOfGroup")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumParkingSpaceDimension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpace")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpacesExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      nu.ndw.GroupOfParkingSpaces(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.AccessibilityEnum](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.ParkingSpaceAccessibilityEnum](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.ParkingSpacePhysicsEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ParkingModeEnum](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.ReservationTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.OccupancyDetectionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[nu.ndw.ParkingSecurityEnum](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[nu.ndw.DedicatedAccess](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p19, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.ParkingTypeOfGroup](p20, scalaxb.ElemName(node) :: stack),
        p21 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.Dimension](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.Dimension](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[nu.ndw.Dimension](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw._GroupOfParkingSpacesParkingSpaceIndexParkingSpace](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.GroupOfParkingSpaces, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingSpaceOrGroupIdentifier map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceOrGroupIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.parkingFloorOrLevel map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingFloorOrLevel"), __scope, false) } getOrElse {Nil},
        __obj.accessibility flatMap { scalaxb.toXML[nu.ndw.AccessibilityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessibility"), __scope, false) },
        __obj.parkingSpaceAccessibility flatMap { scalaxb.toXML[nu.ndw.ParkingSpaceAccessibilityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceAccessibility"), __scope, false) },
        __obj.parkingSpacePhysics flatMap { scalaxb.toXML[nu.ndw.ParkingSpacePhysicsEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpacePhysics"), __scope, false) },
        __obj.parkingMode map { scalaxb.toXML[nu.ndw.ParkingModeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingMode"), __scope, false) } getOrElse {Nil},
        __obj.parkingReservation map { scalaxb.toXML[nu.ndw.ReservationTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingReservation"), __scope, false) } getOrElse {Nil},
        __obj.maximumParkingDuration map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumParkingDuration"), __scope, false) } getOrElse {Nil},
        __obj.distanceFromPrimaryRoad map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceFromPrimaryRoad"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupanyDetectionType flatMap { scalaxb.toXML[nu.ndw.OccupancyDetectionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupanyDetectionType"), __scope, false) },
        __obj.parkingSecurity flatMap { scalaxb.toXML[nu.ndw.ParkingSecurityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSecurity"), __scope, false) },
        __obj.dedicatedAccess flatMap { scalaxb.toXML[nu.ndw.DedicatedAccess](_, Some("http://datex2.eu/schema/2/2_0"), Some("dedicatedAccess"), __scope, false) },
        __obj.onlyAssignedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("onlyAssignedParking"), __scope, false) } getOrElse {Nil},
        __obj.assignedParkingAmongOthers map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("assignedParkingAmongOthers"), __scope, false) } getOrElse {Nil},
        __obj.prohibitedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("prohibitedParking"), __scope, false) } getOrElse {Nil},
        __obj.parkingEquipmentOrServiceFacility flatMap { scalaxb.toXML[nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacility"), __scope, false) },
        __obj.parkingUsageScenario flatMap { scalaxb.toXML[nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenario"), __scope, false) },
        __obj.parkingSpaceBasicsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceBasicsExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.parkingNumberOfSpaces, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfSpaces"), __scope, false),
        scalaxb.toXML[nu.ndw.ParkingTypeOfGroup](__obj.parkingTypeOfGroup, Some("http://datex2.eu/schema/2/2_0"), Some("parkingTypeOfGroup"), __scope, false),
        __obj.identicalToGroup flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("identicalToGroup"), __scope, false) },
        __obj.realSubsetOfGroup flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("realSubsetOfGroup"), __scope, false) },
        __obj.minimumParkingSpaceDimension map { scalaxb.toXML[nu.ndw.Dimension](_, Some("http://datex2.eu/schema/2/2_0"), Some("minimumParkingSpaceDimension"), __scope, false) } getOrElse {Nil},
        __obj.dimensionOfGroup map { scalaxb.toXML[nu.ndw.Dimension](_, Some("http://datex2.eu/schema/2/2_0"), Some("dimensionOfGroup"), __scope, false) } getOrElse {Nil},
        __obj.maximumParkingSpaceDimension map { scalaxb.toXML[nu.ndw.Dimension](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumParkingSpaceDimension"), __scope, false) } getOrElse {Nil},
        __obj.parkingSpace flatMap { scalaxb.toXML[nu.ndw._GroupOfParkingSpacesParkingSpaceIndexParkingSpace](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpace"), __scope, false) },
        __obj.groupOfLocations map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false) } getOrElse {Nil},
        __obj.groupOfParkingSpacesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpacesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_GroupOfParkingSpacesStatusFormat extends scalaxb.ElemNameParser[nu.ndw.GroupOfParkingSpacesStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GroupOfParkingSpacesStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GroupOfParkingSpacesStatus] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfSpacesOverride")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVacantSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVacantSpacesLowerThan")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVacantSpacesHigherThan")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVacantSpacesGraded")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfOccupiedSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancy")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancyGraded")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancyTrend")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNotAllowed")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCountAndRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancyExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupDeclarationValidNow")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpacesClosed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpacesStatusExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      nu.ndw.GroupOfParkingSpacesStatus(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.ParkingVacantSpacesEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.ParkingOccupancyEnum](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.ParkingOccupancyTrendEnum](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[nu.ndw.VehicleCountAndRate](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.GroupOfParkingSpacesStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingNumberOfSpacesOverride map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfSpacesOverride"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVacantSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVacantSpaces"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVacantSpacesLowerThan map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVacantSpacesLowerThan"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVacantSpacesHigherThan map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVacantSpacesHigherThan"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVacantSpacesGraded map { scalaxb.toXML[nu.ndw.ParkingVacantSpacesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVacantSpacesGraded"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfOccupiedSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfOccupiedSpaces"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVehicles map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVehicles"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupancy map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancy"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupancyGraded map { scalaxb.toXML[nu.ndw.ParkingOccupancyEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancyGraded"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupancyTrend map { scalaxb.toXML[nu.ndw.ParkingOccupancyTrendEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancyTrend"), __scope, false) } getOrElse {Nil},
        __obj.parkingNotAllowed map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNotAllowed"), __scope, false) } getOrElse {Nil},
        __obj.vehicleCountAndRate flatMap { scalaxb.toXML[nu.ndw.VehicleCountAndRate](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCountAndRate"), __scope, false) },
        __obj.parkingOccupancyExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancyExtension"), __scope, false) } getOrElse {Nil},
        __obj.groupDeclarationValidNow map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupDeclarationValidNow"), __scope, false) } getOrElse {Nil},
        __obj.groupOfParkingSpacesClosed map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpacesClosed"), __scope, false) } getOrElse {Nil},
        __obj.groupOfParkingSpacesStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpacesStatusExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_GroupOfPeopleInvolvedFormat extends scalaxb.ElemNameParser[nu.ndw.GroupOfPeopleInvolved] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GroupOfPeopleInvolved")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GroupOfPeopleInvolved] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfPeople")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "injuryStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "involvementRole")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "categoryOfPeopleInvolved")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfPeopleInvolvedExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.GroupOfPeopleInvolved(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.InjuryStatusTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.InvolvementRolesEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.PersonCategoryEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.GroupOfPeopleInvolved, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.numberOfPeople map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfPeople"), __scope, false) } getOrElse {Nil},
        __obj.injuryStatus map { scalaxb.toXML[nu.ndw.InjuryStatusTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("injuryStatus"), __scope, false) } getOrElse {Nil},
        __obj.involvementRole map { scalaxb.toXML[nu.ndw.InvolvementRolesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("involvementRole"), __scope, false) } getOrElse {Nil},
        __obj.categoryOfPeopleInvolved map { scalaxb.toXML[nu.ndw.PersonCategoryEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("categoryOfPeopleInvolved"), __scope, false) } getOrElse {Nil},
        __obj.groupOfPeopleInvolvedExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfPeopleInvolvedExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_GroupOfVehiclesInvolvedFormat extends scalaxb.ElemNameParser[nu.ndw.GroupOfVehiclesInvolved] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("GroupOfVehiclesInvolved")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.GroupOfVehiclesInvolved] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCharacteristics")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfVehiclesInvolvedExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.GroupOfVehiclesInvolved(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.VehicleStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.GroupOfVehiclesInvolved, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.numberOfVehicles map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfVehicles"), __scope, false) } getOrElse {Nil},
        __obj.vehicleStatus map { scalaxb.toXML[nu.ndw.VehicleStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleStatus"), __scope, false) } getOrElse {Nil},
        __obj.vehicleCharacteristics map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCharacteristics"), __scope, false) } getOrElse {Nil},
        __obj.groupOfVehiclesInvolvedExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfVehiclesInvolvedExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_HazardousMaterialsTypeFormat extends scalaxb.ElemNameParser[nu.ndw.HazardousMaterialsType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("HazardousMaterials")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.HazardousMaterialsType] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chemicalName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dangerousGoodsFlashPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dangerousGoodsRegulations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "hazardCodeIdentification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "hazardCodeVersionNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "hazardSubstanceItemPageNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tremCardNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "undgNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "volumeOfDangerousGoods")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weightOfDangerousGoods")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "hazardousMaterialsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      nu.ndw.HazardousMaterialsType(scalaxb.fromXML[nu.ndw.MultilingualString](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.DangerousGoodsRegulationsEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.HazardousMaterialsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.MultilingualString](__obj.chemicalName, Some("http://datex2.eu/schema/2/2_0"), Some("chemicalName"), __scope, false),
        __obj.dangerousGoodsFlashPoint map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("dangerousGoodsFlashPoint"), __scope, false) } getOrElse {Nil},
        __obj.dangerousGoodsRegulations map { scalaxb.toXML[nu.ndw.DangerousGoodsRegulationsEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("dangerousGoodsRegulations"), __scope, false) } getOrElse {Nil},
        __obj.hazardCodeIdentification map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("hazardCodeIdentification"), __scope, false) } getOrElse {Nil},
        __obj.hazardCodeVersionNumber map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("hazardCodeVersionNumber"), __scope, false) } getOrElse {Nil},
        __obj.hazardSubstanceItemPageNumber map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("hazardSubstanceItemPageNumber"), __scope, false) } getOrElse {Nil},
        __obj.tremCardNumber map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("tremCardNumber"), __scope, false) } getOrElse {Nil},
        __obj.undgNumber map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("undgNumber"), __scope, false) } getOrElse {Nil},
        __obj.volumeOfDangerousGoods map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("volumeOfDangerousGoods"), __scope, false) } getOrElse {Nil},
        __obj.weightOfDangerousGoods map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("weightOfDangerousGoods"), __scope, false) } getOrElse {Nil},
        __obj.hazardousMaterialsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("hazardousMaterialsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_HeaderInformationFormat extends scalaxb.ElemNameParser[nu.ndw.HeaderInformation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("HeaderInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.HeaderInformation] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "areaOfInterest")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentiality")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "informationStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urgency")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.HeaderInformation(p1.headOption map { scalaxb.fromXML[nu.ndw.AreaOfInterestEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InformationStatusEnum](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw.UrgencyEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.HeaderInformation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.areaOfInterest map { scalaxb.toXML[nu.ndw.AreaOfInterestEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("areaOfInterest"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](__obj.confidentiality, Some("http://datex2.eu/schema/2/2_0"), Some("confidentiality"), __scope, false),
        scalaxb.toXML[nu.ndw.InformationStatusEnum](__obj.informationStatus, Some("http://datex2.eu/schema/2/2_0"), Some("informationStatus"), __scope, false),
        __obj.urgency map { scalaxb.toXML[nu.ndw.UrgencyEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("urgency"), __scope, false) } getOrElse {Nil},
        __obj.headerInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_HeaviestAxleWeightCharacteristicFormat extends scalaxb.ElemNameParser[nu.ndw.HeaviestAxleWeightCharacteristic] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("HeaviestAxleWeightCharacteristic")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.HeaviestAxleWeightCharacteristic] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "comparisonOperator")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "heaviestAxleWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "heaviestAxleWeightCharacteristicExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.HeaviestAxleWeightCharacteristic(scalaxb.fromXML[nu.ndw.ComparisonOperatorEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.HeaviestAxleWeightCharacteristic, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.ComparisonOperatorEnum](__obj.comparisonOperator, Some("http://datex2.eu/schema/2/2_0"), Some("comparisonOperator"), __scope, false),
        scalaxb.toXML[Float](__obj.heaviestAxleWeight, Some("http://datex2.eu/schema/2/2_0"), Some("heaviestAxleWeight"), __scope, false),
        __obj.heaviestAxleWeightCharacteristicExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("heaviestAxleWeightCharacteristicExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_HeightCharacteristicFormat extends scalaxb.ElemNameParser[nu.ndw.HeightCharacteristic] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("HeightCharacteristic")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.HeightCharacteristic] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "comparisonOperator")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "heightCharacteristicExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.HeightCharacteristic(scalaxb.fromXML[nu.ndw.ComparisonOperatorEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.HeightCharacteristic, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.ComparisonOperatorEnum](__obj.comparisonOperator, Some("http://datex2.eu/schema/2/2_0"), Some("comparisonOperator"), __scope, false),
        scalaxb.toXML[Float](__obj.vehicleHeight, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleHeight"), __scope, false),
        __obj.heightCharacteristicExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("heightCharacteristicExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_HeightGradeEnumFormat = new DefaultNundw_HeightGradeEnumFormat {}
  trait DefaultNundw_HeightGradeEnumFormat extends scalaxb.XMLFormat[nu.ndw.HeightGradeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.HeightGradeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("aboveGrade")) => nu.ndw.AboveGrade
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atGrade")) => nu.ndw.AtGrade
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("belowGrade")) => nu.ndw.BelowGrade

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.HeightGradeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.HeightGradeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_HumidityFormat extends scalaxb.ElemNameParser[nu.ndw.Humidity] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Humidity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Humidity] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "relativeHumidity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "humidityExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.Humidity(scalaxb.fromXML[nu.ndw.PercentageValue](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Humidity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.PercentageValue](__obj.relativeHumidity, Some("http://datex2.eu/schema/2/2_0"), Some("relativeHumidity"), __scope, false),
        __obj.humidityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("humidityExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_HumidityInformationTypeFormat extends scalaxb.ElemNameParser[nu.ndw.HumidityInformationType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("HumidityInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.HumidityInformationType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherDataExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "humidity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "humidityInformationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.HumidityInformationType(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Humidity](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.HumidityInformationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.HumidityInformationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.weatherDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherDataExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Humidity](__obj.humidity, Some("http://datex2.eu/schema/2/2_0"), Some("humidity"), __scope, false),
        __obj.humidityInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("humidityInformationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ImpactFormat extends scalaxb.ElemNameParser[nu.ndw.Impact] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Impact")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Impact] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "capacityRemaining")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfLanesRestricted")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfOperationalLanes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "originalNumberOfLanes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "residualRoadWidth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficConstrictionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "delays")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impactExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.Impact(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.TrafficConstrictionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.Delays](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Impact, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.capacityRemaining map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("capacityRemaining"), __scope, false) } getOrElse {Nil},
        __obj.numberOfLanesRestricted map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfLanesRestricted"), __scope, false) } getOrElse {Nil},
        __obj.numberOfOperationalLanes map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfOperationalLanes"), __scope, false) } getOrElse {Nil},
        __obj.originalNumberOfLanes map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("originalNumberOfLanes"), __scope, false) } getOrElse {Nil},
        __obj.residualRoadWidth map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("residualRoadWidth"), __scope, false) } getOrElse {Nil},
        __obj.trafficConstrictionType map { scalaxb.toXML[nu.ndw.TrafficConstrictionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficConstrictionType"), __scope, false) } getOrElse {Nil},
        __obj.delays map { scalaxb.toXML[nu.ndw.Delays](_, Some("http://datex2.eu/schema/2/2_0"), Some("delays"), __scope, false) } getOrElse {Nil},
        __obj.impactExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("impactExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_IndividualChargeFormat extends scalaxb.ElemNameParser[nu.ndw.IndividualCharge] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("IndividualCharge")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.IndividualCharge] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeBandReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargePaid")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeCurrency")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "usedMeansOfPayment")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "withReservation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "usedPaymentCard")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "individualChargeExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.IndividualCharge(p1.headOption map { scalaxb.fromXML[nu.ndw._ChargeBandVersionedReference](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw.CurrencyEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MeansOfPaymentEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.UsedPaymentCard](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.IndividualCharge, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.chargeBandReference map { scalaxb.toXML[nu.ndw._ChargeBandVersionedReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeBandReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.chargePaid, Some("http://datex2.eu/schema/2/2_0"), Some("chargePaid"), __scope, false),
        __obj.chargeCurrency map { scalaxb.toXML[nu.ndw.CurrencyEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeCurrency"), __scope, false) } getOrElse {Nil},
        __obj.usedMeansOfPayment map { scalaxb.toXML[nu.ndw.MeansOfPaymentEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("usedMeansOfPayment"), __scope, false) } getOrElse {Nil},
        __obj.withReservation map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("withReservation"), __scope, false) } getOrElse {Nil},
        __obj.usedPaymentCard map { scalaxb.toXML[nu.ndw.UsedPaymentCard](_, Some("http://datex2.eu/schema/2/2_0"), Some("usedPaymentCard"), __scope, false) } getOrElse {Nil},
        __obj.individualChargeExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("individualChargeExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_IndividualVehicleDataValuesFormat extends scalaxb.ElemNameParser[nu.ndw.IndividualVehicleDataValues] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("IndividualVehicleDataValues")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.IndividualVehicleDataValues] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "individualVehicleSpeed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "arrivalTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "exitTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "passageDurationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "presenceDurationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "timeGap")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "timeHeadway")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceGap")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceHeadway")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "individualVehicleDataValuesExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      nu.ndw.IndividualVehicleDataValues(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.SpeedValue](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.DateTimeValue](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.DateTimeValue](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.DurationValue](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.DurationValue](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.DurationValue](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw.DurationValue](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[nu.ndw.FloatingPointMetreDistanceValue](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[nu.ndw.FloatingPointMetreDistanceValue](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.IndividualVehicleDataValues, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.IndividualVehicleDataValues, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) } getOrElse {Nil},
        __obj.trafficDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.individualVehicleSpeed map { scalaxb.toXML[nu.ndw.SpeedValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("individualVehicleSpeed"), __scope, false) } getOrElse {Nil},
        __obj.arrivalTime map { scalaxb.toXML[nu.ndw.DateTimeValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("arrivalTime"), __scope, false) } getOrElse {Nil},
        __obj.exitTime map { scalaxb.toXML[nu.ndw.DateTimeValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("exitTime"), __scope, false) } getOrElse {Nil},
        __obj.passageDurationTime map { scalaxb.toXML[nu.ndw.DurationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("passageDurationTime"), __scope, false) } getOrElse {Nil},
        __obj.presenceDurationTime map { scalaxb.toXML[nu.ndw.DurationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("presenceDurationTime"), __scope, false) } getOrElse {Nil},
        __obj.timeGap map { scalaxb.toXML[nu.ndw.DurationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("timeGap"), __scope, false) } getOrElse {Nil},
        __obj.timeHeadway map { scalaxb.toXML[nu.ndw.DurationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("timeHeadway"), __scope, false) } getOrElse {Nil},
        __obj.distanceGap map { scalaxb.toXML[nu.ndw.FloatingPointMetreDistanceValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceGap"), __scope, false) } getOrElse {Nil},
        __obj.distanceHeadway map { scalaxb.toXML[nu.ndw.FloatingPointMetreDistanceValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceHeadway"), __scope, false) } getOrElse {Nil},
        __obj.individualVehicleDataValuesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("individualVehicleDataValuesExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_InformationStatusEnumFormat = new DefaultNundw_InformationStatusEnumFormat {}
  trait DefaultNundw_InformationStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.InformationStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.InformationStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("real")) => nu.ndw.Real
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityExercise")) => nu.ndw.SecurityExercise
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("technicalExercise")) => nu.ndw.TechnicalExercise
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("test")) => nu.ndw.Test

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.InformationStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.InformationStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_InfrastructureDamageObstructionFormat extends scalaxb.ElemNameParser[nu.ndw.InfrastructureDamageObstruction] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("InfrastructureDamageObstruction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.InfrastructureDamageObstruction] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfObstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityOfObstruction")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "obstructionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "infrastructureDamageType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "infrastructureDamageObstructionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      nu.ndw.InfrastructureDamageObstruction(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.InfrastructureDamageTypeEnum](p23, scalaxb.ElemName(node) :: stack),
        p24.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.InfrastructureDamageObstruction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.InfrastructureDamageObstruction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.numberOfObstructions map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfObstructions"), __scope, false) } getOrElse {Nil},
        __obj.mobilityOfObstruction map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityOfObstruction"), __scope, false) } getOrElse {Nil},
        __obj.obstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("obstructionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.InfrastructureDamageTypeEnum](__obj.infrastructureDamageType, Some("http://datex2.eu/schema/2/2_0"), Some("infrastructureDamageType"), __scope, false),
        __obj.infrastructureDamageObstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("infrastructureDamageObstructionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_InfrastructureDamageTypeEnumFormat = new DefaultNundw_InfrastructureDamageTypeEnumFormat {}
  trait DefaultNundw_InfrastructureDamageTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.InfrastructureDamageTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.InfrastructureDamageTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("burstPipe")) => nu.ndw.BurstPipe
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("burstWaterMain")) => nu.ndw.BurstWaterMain
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("collapsedSewer")) => nu.ndw.CollapsedSewer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedBridge")) => nu.ndw.DamagedBridge
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedCrashBarrier")) => nu.ndw.DamagedCrashBarrier
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedFlyover")) => nu.ndw.DamagedFlyover
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedGallery")) => nu.ndw.DamagedGallery
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedGantry")) => nu.ndw.DamagedGantry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedRoadSurface")) => nu.ndw.DamagedRoadSurface
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedTunnel")) => nu.ndw.DamagedTunnel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedViaduct")) => nu.ndw.DamagedViaduct
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fallenPowerCables")) => nu.ndw.FallenPowerCables
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gasLeak")) => nu.ndw.GasLeak
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("weakBridge")) => nu.ndw.WeakBridge
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue37

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.InfrastructureDamageTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.InfrastructureDamageTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_InjuryStatusTypeEnumFormat = new DefaultNundw_InjuryStatusTypeEnumFormat {}
  trait DefaultNundw_InjuryStatusTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.InjuryStatusTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.InjuryStatusTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dead")) => nu.ndw.Dead
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("injured")) => nu.ndw.Injured
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("seriouslyInjured")) => nu.ndw.SeriouslyInjured
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slightlyInjured")) => nu.ndw.SlightlyInjured
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("uninjured")) => nu.ndw.Uninjured
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue33

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.InjuryStatusTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.InjuryStatusTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_IntegerMetreDistanceValueFormat extends scalaxb.ElemNameParser[nu.ndw.IntegerMetreDistanceValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("IntegerMetreDistanceValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.IntegerMetreDistanceValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "integerMetreDistance")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "integerMetreDistanceValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.IntegerMetreDistanceValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.IntegerMetreDistanceValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.IntegerMetreDistanceValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.integerMetreDistance, Some("http://datex2.eu/schema/2/2_0"), Some("integerMetreDistance"), __scope, false),
        __obj.integerMetreDistanceValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("integerMetreDistanceValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_InternationalIdentifierFormat extends scalaxb.ElemNameParser[nu.ndw.InternationalIdentifier] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("InternationalIdentifier")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.InternationalIdentifier] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "country")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nationalIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "internationalIdentifierExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.InternationalIdentifier(scalaxb.fromXML[nu.ndw.CountryEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.InternationalIdentifier, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.CountryEnum](__obj.country, Some("http://datex2.eu/schema/2/2_0"), Some("country"), __scope, false),
        scalaxb.toXML[String](__obj.nationalIdentifier, Some("http://datex2.eu/schema/2/2_0"), Some("nationalIdentifier"), __scope, false),
        __obj.internationalIdentifierExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("internationalIdentifierExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_InterUrbanParkingSiteFormat extends scalaxb.ElemNameParser[nu.ndw.InterUrbanParkingSite] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("InterUrbanParkingSite")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.InterUrbanParkingSite] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAlias")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingDescription")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPrincipalNumberOfSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumParkingDuration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "photoUrl")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupanyDetectionType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "emergencyContact")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "owner")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "responisbleAuthority")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "securityService")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operator")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "servicePartner")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingVMS")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingLocation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRoute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingColour")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "onlyAssignedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "assignedParkingAmongOthers")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "prohibitedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tariffsAndPayment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpace")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingThresholds")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "permitsAndProhibitions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "emergencyAssemblyPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "entireArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingReservation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingLayout")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "highestFloor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lowestFloor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temporaryParking")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reservationService")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenario")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openingTimes")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAccess")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStandardsAndSecurity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "interUrbanParkingSiteLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "interUrbanParkingSiteExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 ~ p46 ~ p47 =>
      nu.ndw.InterUrbanParkingSite(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.OccupancyDetectionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[nu.ndw.ParkingVMS](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p18, scalaxb.ElemName(node) :: stack),
        p19 map { scalaxb.fromXML[nu.ndw.ParkingRoute](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.RGBColour](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.TariffsAndPayment](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw._ParkingSpace](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[nu.ndw._GroupOfParkingSpaces](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[nu.ndw.ParkingThresholds](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[nu.ndw.PermitsAndProhibitions](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[nu.ndw.Area](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw.Dimension](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[nu.ndw.ReservationTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[nu.ndw.ParkingLayoutEnum](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p39 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p40 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p41 map { scalaxb.fromXML[nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[nu.ndw.OpeningTimes](_, scalaxb.ElemName(node) :: stack) },
        p43 map { scalaxb.fromXML[nu.ndw.ParkingAccess](_, scalaxb.ElemName(node) :: stack) },
        p44.headOption map { scalaxb.fromXML[nu.ndw.ParkingStandardsAndSecurity](_, scalaxb.ElemName(node) :: stack) },
        p45.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.InterUrbanParkingSiteLocationEnum](p46, scalaxb.ElemName(node) :: stack),
        p47.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.InterUrbanParkingSite, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.InterUrbanParkingSite, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingName"), __scope, false) } getOrElse {Nil},
        __obj.parkingAlias flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAlias"), __scope, false) },
        __obj.parkingDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingDescription"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.parkingRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordVersionTime"), __scope, false),
        __obj.parkingNumberOfSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfSpaces"), __scope, false) } getOrElse {Nil},
        __obj.parkingPrincipalNumberOfSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPrincipalNumberOfSpaces"), __scope, false) } getOrElse {Nil},
        __obj.maximumParkingDuration map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumParkingDuration"), __scope, false) } getOrElse {Nil},
        __obj.photoUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("photoUrl"), __scope, false) } getOrElse {Nil},
        __obj.urlLinkAddress map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkAddress"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupanyDetectionType flatMap { scalaxb.toXML[nu.ndw.OccupancyDetectionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupanyDetectionType"), __scope, false) },
        __obj.emergencyContact flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("emergencyContact"), __scope, false) },
        __obj.owner flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("owner"), __scope, false) },
        __obj.responisbleAuthority flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("responisbleAuthority"), __scope, false) },
        __obj.securityService flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("securityService"), __scope, false) },
        __obj.operator flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("operator"), __scope, false) },
        __obj.servicePartner flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("servicePartner"), __scope, false) },
        __obj.parkingVMS flatMap { scalaxb.toXML[nu.ndw.ParkingVMS](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingVMS"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.parkingLocation, Some("http://datex2.eu/schema/2/2_0"), Some("parkingLocation"), __scope, false),
        __obj.parkingRoute flatMap { scalaxb.toXML[nu.ndw.ParkingRoute](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRoute"), __scope, false) },
        __obj.parkingColour map { scalaxb.toXML[nu.ndw.RGBColour](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingColour"), __scope, false) } getOrElse {Nil},
        __obj.onlyAssignedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("onlyAssignedParking"), __scope, false) } getOrElse {Nil},
        __obj.assignedParkingAmongOthers map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("assignedParkingAmongOthers"), __scope, false) } getOrElse {Nil},
        __obj.prohibitedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("prohibitedParking"), __scope, false) } getOrElse {Nil},
        __obj.tariffsAndPayment map { scalaxb.toXML[nu.ndw.TariffsAndPayment](_, Some("http://datex2.eu/schema/2/2_0"), Some("tariffsAndPayment"), __scope, false) } getOrElse {Nil},
        __obj.parkingEquipmentOrServiceFacility flatMap { scalaxb.toXML[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacility"), __scope, false) },
        __obj.parkingSpace flatMap { scalaxb.toXML[nu.ndw._ParkingSpace](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpace"), __scope, false) },
        __obj.groupOfParkingSpaces flatMap { scalaxb.toXML[nu.ndw._GroupOfParkingSpaces](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpaces"), __scope, false) },
        __obj.parkingThresholds map { scalaxb.toXML[nu.ndw.ParkingThresholds](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingThresholds"), __scope, false) } getOrElse {Nil},
        __obj.permitsAndProhibitions flatMap { scalaxb.toXML[nu.ndw.PermitsAndProhibitions](_, Some("http://datex2.eu/schema/2/2_0"), Some("permitsAndProhibitions"), __scope, false) },
        __obj.emergencyAssemblyPoint map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("emergencyAssemblyPoint"), __scope, false) } getOrElse {Nil},
        __obj.entireArea map { scalaxb.toXML[nu.ndw.Area](_, Some("http://datex2.eu/schema/2/2_0"), Some("entireArea"), __scope, false) } getOrElse {Nil},
        __obj.parkingRecordDimension map { scalaxb.toXML[nu.ndw.Dimension](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordDimension"), __scope, false) } getOrElse {Nil},
        __obj.parkingRecordExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.parkingReservation map { scalaxb.toXML[nu.ndw.ReservationTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingReservation"), __scope, false) } getOrElse {Nil},
        __obj.parkingLayout flatMap { scalaxb.toXML[nu.ndw.ParkingLayoutEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingLayout"), __scope, false) },
        __obj.highestFloor map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("highestFloor"), __scope, false) } getOrElse {Nil},
        __obj.lowestFloor map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("lowestFloor"), __scope, false) } getOrElse {Nil},
        __obj.temporaryParking map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("temporaryParking"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteAddress flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteAddress"), __scope, false) },
        __obj.reservationService flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("reservationService"), __scope, false) },
        __obj.parkingUsageScenario flatMap { scalaxb.toXML[nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenario"), __scope, false) },
        __obj.openingTimes map { scalaxb.toXML[nu.ndw.OpeningTimes](_, Some("http://datex2.eu/schema/2/2_0"), Some("openingTimes"), __scope, false) } getOrElse {Nil},
        __obj.parkingAccess flatMap { scalaxb.toXML[nu.ndw.ParkingAccess](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAccess"), __scope, false) },
        __obj.parkingStandardsAndSecurity map { scalaxb.toXML[nu.ndw.ParkingStandardsAndSecurity](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStandardsAndSecurity"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.InterUrbanParkingSiteLocationEnum](__obj.interUrbanParkingSiteLocation, Some("http://datex2.eu/schema/2/2_0"), Some("interUrbanParkingSiteLocation"), __scope, false),
        __obj.interUrbanParkingSiteExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("interUrbanParkingSiteExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_InterUrbanParkingSiteLocationEnumFormat = new DefaultNundw_InterUrbanParkingSiteLocationEnumFormat {}
  trait DefaultNundw_InterUrbanParkingSiteLocationEnumFormat extends scalaxb.XMLFormat[nu.ndw.InterUrbanParkingSiteLocationEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.InterUrbanParkingSiteLocationEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorway")) => nu.ndw.MotorwayValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nearbyMotorway")) => nu.ndw.NearbyMotorway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("layBy")) => nu.ndw.LayBy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onStreet")) => nu.ndw.OnStreet
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue36

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.InterUrbanParkingSiteLocationEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.InterUrbanParkingSiteLocationEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_InvolvementRolesEnumFormat = new DefaultNundw_InvolvementRolesEnumFormat {}
  trait DefaultNundw_InvolvementRolesEnumFormat extends scalaxb.XMLFormat[nu.ndw.InvolvementRolesEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.InvolvementRolesEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cyclist")) => nu.ndw.Cyclist
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pedestrian")) => nu.ndw.Pedestrian
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue34
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleDriver")) => nu.ndw.VehicleDriver
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleOccupant")) => nu.ndw.VehicleOccupant
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehiclePassenger")) => nu.ndw.VehiclePassenger
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("witness")) => nu.ndw.Witness

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.InvolvementRolesEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.InvolvementRolesEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ItineraryFormat extends scalaxb.XMLFormat[nu.ndw.Itinerary] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Itinerary] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ItineraryByIndexedLocations")) => Right(scalaxb.fromXML[nu.ndw.ItineraryByIndexedLocations](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ItineraryByReference")) => Right(scalaxb.fromXML[nu.ndw.ItineraryByReference](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Itinerary, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.ItineraryByIndexedLocations => scalaxb.toXML[nu.ndw.ItineraryByIndexedLocations](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ItineraryByReference => scalaxb.toXML[nu.ndw.ItineraryByReference](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_ItineraryByIndexedLocationsFormat extends scalaxb.ElemNameParser[nu.ndw.ItineraryByIndexedLocations] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ItineraryByIndexedLocations")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ItineraryByIndexedLocations] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocationsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "routeDestination")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "itineraryExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationContainedInItinerary")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "itineraryByIndexedLocationsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.ItineraryByIndexedLocations(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.Destination](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw._LocationContainedInItinerary](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ItineraryByIndexedLocations, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupOfLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocationsExtension"), __scope, false) } getOrElse {Nil},
        __obj.routeDestination flatMap { scalaxb.toXML[nu.ndw.Destination](_, Some("http://datex2.eu/schema/2/2_0"), Some("routeDestination"), __scope, false) },
        __obj.itineraryExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("itineraryExtension"), __scope, false) } getOrElse {Nil},
        __obj.locationContainedInItinerary flatMap { scalaxb.toXML[nu.ndw._LocationContainedInItinerary](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationContainedInItinerary"), __scope, false) },
        __obj.itineraryByIndexedLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("itineraryByIndexedLocationsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ItineraryByReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.ItineraryByReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ItineraryByReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ItineraryByReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocationsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "routeDestination")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "itineraryExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedItineraryReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "itineraryByReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.ItineraryByReference(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.Destination](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw._PredefinedItineraryVersionedReference](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ItineraryByReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupOfLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocationsExtension"), __scope, false) } getOrElse {Nil},
        __obj.routeDestination flatMap { scalaxb.toXML[nu.ndw.Destination](_, Some("http://datex2.eu/schema/2/2_0"), Some("routeDestination"), __scope, false) },
        __obj.itineraryExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("itineraryExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw._PredefinedItineraryVersionedReference](__obj.predefinedItineraryReference, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedItineraryReference"), __scope, false),
        __obj.itineraryByReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("itineraryByReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_JunctionTypeFormat extends scalaxb.ElemNameParser[nu.ndw.JunctionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Junction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.JunctionType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "junctionClassification")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "junctionName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "junctionNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "motorway")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "destinationMotorway")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "junctionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.JunctionType(p1.headOption map { scalaxb.fromXML[nu.ndw.JunctionClassificationEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.MultilingualString](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.Roadable](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.Roadable](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.JunctionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.junctionClassification map { scalaxb.toXML[nu.ndw.JunctionClassificationEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("junctionClassification"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.MultilingualString](__obj.junctionName, Some("http://datex2.eu/schema/2/2_0"), Some("junctionName"), __scope, false),
        __obj.junctionNumber map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("junctionNumber"), __scope, false) } getOrElse {Nil},
        __obj.motorway map { scalaxb.toXML[nu.ndw.Roadable](_, Some("http://datex2.eu/schema/2/2_0"), Some("motorway"), __scope, false) } getOrElse {Nil},
        __obj.destinationMotorway flatMap { scalaxb.toXML[nu.ndw.Roadable](_, Some("http://datex2.eu/schema/2/2_0"), Some("destinationMotorway"), __scope, false) },
        __obj.junctionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("junctionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_JunctionClassificationEnumFormat = new DefaultNundw_JunctionClassificationEnumFormat {}
  trait DefaultNundw_JunctionClassificationEnumFormat extends scalaxb.XMLFormat[nu.ndw.JunctionClassificationEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.JunctionClassificationEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("threeWayInterchange")) => nu.ndw.ThreeWayInterchange
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("interchange")) => nu.ndw.Interchange
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorwayConnection")) => nu.ndw.MotorwayConnection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("junction")) => nu.ndw.Junction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temporaryJunction")) => nu.ndw.TemporaryJunction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("borderCrossing")) => nu.ndw.BorderCrossing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("junctionInOneDirection")) => nu.ndw.JunctionInOneDirection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("operationalServiceJunction")) => nu.ndw.OperationalServiceJunction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue35

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.JunctionClassificationEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.JunctionClassificationEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_KilogramsConcentrationValueFormat extends scalaxb.ElemNameParser[nu.ndw.KilogramsConcentrationValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("KilogramsConcentrationValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.KilogramsConcentrationValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "kilogramsConcentration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "kilogramsConcentrationValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.KilogramsConcentrationValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.KilogramsConcentrationValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.KilogramsConcentrationValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.kilogramsConcentration, Some("http://datex2.eu/schema/2/2_0"), Some("kilogramsConcentration"), __scope, false),
        __obj.kilogramsConcentrationValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("kilogramsConcentrationValueExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_LABELSecurityLevelEnumFormat = new DefaultNundw_LABELSecurityLevelEnumFormat {}
  trait DefaultNundw_LABELSecurityLevelEnumFormat extends scalaxb.XMLFormat[nu.ndw.LABELSecurityLevelEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.LABELSecurityLevelEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => nu.ndw.NoneTypeValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityLevel1")) => nu.ndw.SecurityLevel1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityLevel2")) => nu.ndw.SecurityLevel2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityLevel3")) => nu.ndw.SecurityLevel3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityLevel4")) => nu.ndw.SecurityLevel4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityLevel5")) => nu.ndw.SecurityLevel5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue35

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.LABELSecurityLevelEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.LABELSecurityLevelEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_LABELServiceLevelEnumFormat = new DefaultNundw_LABELServiceLevelEnumFormat {}
  trait DefaultNundw_LABELServiceLevelEnumFormat extends scalaxb.XMLFormat[nu.ndw.LABELServiceLevelEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.LABELServiceLevelEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => nu.ndw.NoneTypeValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceLevel1")) => nu.ndw.ServiceLevel1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceLevel2")) => nu.ndw.ServiceLevel2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceLevel3")) => nu.ndw.ServiceLevel3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceLevel4")) => nu.ndw.ServiceLevel4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceLevel5")) => nu.ndw.ServiceLevel5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue20

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.LABELServiceLevelEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.LABELServiceLevelEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_LaneEnumFormat = new DefaultNundw_LaneEnumFormat {}
  trait DefaultNundw_LaneEnumFormat extends scalaxb.XMLFormat[nu.ndw.LaneEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.LaneEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("allLanesCompleteCarriageway")) => nu.ndw.AllLanesCompleteCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("busLane")) => nu.ndw.BusLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("busStop")) => nu.ndw.BusStop
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carPoolLane")) => nu.ndw.CarPoolLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("centralReservation")) => nu.ndw.CentralReservation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("crawlerLane")) => nu.ndw.CrawlerLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("emergencyLane")) => nu.ndw.EmergencyLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("escapeLane")) => nu.ndw.EscapeLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("expressLane")) => nu.ndw.ExpressLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hardShoulder")) => nu.ndw.HardShoulder
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heavyVehicleLane")) => nu.ndw.HeavyVehicleLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane1")) => nu.ndw.Lane1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane2")) => nu.ndw.Lane2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane3")) => nu.ndw.Lane3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane4")) => nu.ndw.Lane4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane5")) => nu.ndw.Lane5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane6")) => nu.ndw.Lane6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane7")) => nu.ndw.Lane7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane8")) => nu.ndw.Lane8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane9")) => nu.ndw.Lane9
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("layBy")) => nu.ndw.LayByValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("leftHandTurningLane")) => nu.ndw.LeftHandTurningLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("leftLane")) => nu.ndw.LeftLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("localTrafficLane")) => nu.ndw.LocalTrafficLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("middleLane")) => nu.ndw.MiddleLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("opposingLanes")) => nu.ndw.OpposingLanes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overtakingLane")) => nu.ndw.OvertakingLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rightHandTurningLane")) => nu.ndw.RightHandTurningLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rightLane")) => nu.ndw.RightLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rushHourLane")) => nu.ndw.RushHourLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("setDownArea")) => nu.ndw.SetDownArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slowVehicleLane")) => nu.ndw.SlowVehicleLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("throughTrafficLane")) => nu.ndw.ThroughTrafficLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tidalFlowLane")) => nu.ndw.TidalFlowLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("turningLane")) => nu.ndw.TurningLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("verge")) => nu.ndw.Verge

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.LaneEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.LaneEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_LengthCharacteristicFormat extends scalaxb.ElemNameParser[nu.ndw.LengthCharacteristic] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("LengthCharacteristic")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.LengthCharacteristic] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "comparisonOperator")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleLength")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lengthCharacteristicExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.LengthCharacteristic(scalaxb.fromXML[nu.ndw.ComparisonOperatorEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.LengthCharacteristic, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.ComparisonOperatorEnum](__obj.comparisonOperator, Some("http://datex2.eu/schema/2/2_0"), Some("comparisonOperator"), __scope, false),
        scalaxb.toXML[Float](__obj.vehicleLength, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleLength"), __scope, false),
        __obj.lengthCharacteristicExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("lengthCharacteristicExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_LifeCycleManagementFormat extends scalaxb.ElemNameParser[nu.ndw.LifeCycleManagement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("LifeCycleManagement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.LifeCycleManagement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cancel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "end")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lifeCycleManagementExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.LifeCycleManagement(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.LifeCycleManagement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.cancel map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("cancel"), __scope, false) } getOrElse {Nil},
        __obj.end map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("end"), __scope, false) } getOrElse {Nil},
        __obj.lifeCycleManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("lifeCycleManagementExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_LinearFormat extends scalaxb.ElemNameParser[nu.ndw.Linear] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Linear")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Linear] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocationsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "externalReferencing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationForDisplay")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPositionalDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "destination")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "networkLocationExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegLinearLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCLinear")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearWithinLinearElement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      nu.ndw.Linear(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.ExternalReferencing](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.PointCoordinates](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.SupplementaryPositionalDescription](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.Destination](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.TpegLinearLocation](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.AlertCLinear](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.LinearWithinLinearElement](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw._LinearExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Linear, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupOfLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocationsExtension"), __scope, false) } getOrElse {Nil},
        __obj.externalReferencing flatMap { scalaxb.toXML[nu.ndw.ExternalReferencing](_, Some("http://datex2.eu/schema/2/2_0"), Some("externalReferencing"), __scope, false) },
        __obj.locationForDisplay map { scalaxb.toXML[nu.ndw.PointCoordinates](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationForDisplay"), __scope, false) } getOrElse {Nil},
        __obj.locationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationExtension"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPositionalDescription map { scalaxb.toXML[nu.ndw.SupplementaryPositionalDescription](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPositionalDescription"), __scope, false) } getOrElse {Nil},
        __obj.destination map { scalaxb.toXML[nu.ndw.Destination](_, Some("http://datex2.eu/schema/2/2_0"), Some("destination"), __scope, false) } getOrElse {Nil},
        __obj.networkLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("networkLocationExtension"), __scope, false) } getOrElse {Nil},
        __obj.tpegLinearLocation map { scalaxb.toXML[nu.ndw.TpegLinearLocation](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegLinearLocation"), __scope, false) } getOrElse {Nil},
        __obj.alertCLinear map { scalaxb.toXML[nu.ndw.AlertCLinear](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCLinear"), __scope, false) } getOrElse {Nil},
        __obj.linearWithinLinearElement map { scalaxb.toXML[nu.ndw.LinearWithinLinearElement](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearWithinLinearElement"), __scope, false) } getOrElse {Nil},
        __obj.linearExtension map { scalaxb.toXML[nu.ndw._LinearExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_LinearElementableFormat extends scalaxb.XMLFormat[nu.ndw.LinearElementable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.LinearElementable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("LinearElementByCode")) => Right(scalaxb.fromXML[nu.ndw.LinearElementByCode](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("LinearElementByPoints")) => Right(scalaxb.fromXML[nu.ndw.LinearElementByPoints](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.LinearElement](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.LinearElementable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.LinearElementByCode => scalaxb.toXML[nu.ndw.LinearElementByCode](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.LinearElementByPoints => scalaxb.toXML[nu.ndw.LinearElementByPoints](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.LinearElement => scalaxb.toXML[nu.ndw.LinearElement](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_LinearElementFormat extends scalaxb.ElemNameParser[nu.ndw.LinearElement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("LinearElement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.LinearElement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementReferenceModel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementReferenceModelVersion")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementNature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.LinearElement(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.LinearElementNatureEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.LinearElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.roadName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadName"), __scope, false) } getOrElse {Nil},
        __obj.roadNumber map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadNumber"), __scope, false) } getOrElse {Nil},
        __obj.linearElementReferenceModel map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementReferenceModel"), __scope, false) } getOrElse {Nil},
        __obj.linearElementReferenceModelVersion map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementReferenceModelVersion"), __scope, false) } getOrElse {Nil},
        __obj.linearElementNature map { scalaxb.toXML[nu.ndw.LinearElementNatureEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementNature"), __scope, false) } getOrElse {Nil},
        __obj.linearElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_LinearElementByCodeFormat extends scalaxb.ElemNameParser[nu.ndw.LinearElementByCode] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("LinearElementByCode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.LinearElementByCode] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementReferenceModel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementReferenceModelVersion")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementNature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementByCodeExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.LinearElementByCode(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.LinearElementNatureEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.LinearElementByCode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.roadName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadName"), __scope, false) } getOrElse {Nil},
        __obj.roadNumber map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadNumber"), __scope, false) } getOrElse {Nil},
        __obj.linearElementReferenceModel map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementReferenceModel"), __scope, false) } getOrElse {Nil},
        __obj.linearElementReferenceModelVersion map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementReferenceModelVersion"), __scope, false) } getOrElse {Nil},
        __obj.linearElementNature map { scalaxb.toXML[nu.ndw.LinearElementNatureEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementNature"), __scope, false) } getOrElse {Nil},
        __obj.linearElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.linearElementIdentifier, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementIdentifier"), __scope, false),
        __obj.linearElementByCodeExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementByCodeExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_LinearElementByPointsFormat extends scalaxb.ElemNameParser[nu.ndw.LinearElementByPoints] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("LinearElementByPoints")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.LinearElementByPoints] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementReferenceModel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementReferenceModelVersion")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementNature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "startPointOfLinearElement")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "intermediatePointOnLinearElement")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "endPointOfLinearElement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElementByPointsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      nu.ndw.LinearElementByPoints(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.LinearElementNatureEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Referent](p7, scalaxb.ElemName(node) :: stack),
        p8 map { scalaxb.fromXML[nu.ndw._IntermediatePointOnLinearElement](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Referent](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.LinearElementByPoints, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.roadName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadName"), __scope, false) } getOrElse {Nil},
        __obj.roadNumber map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadNumber"), __scope, false) } getOrElse {Nil},
        __obj.linearElementReferenceModel map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementReferenceModel"), __scope, false) } getOrElse {Nil},
        __obj.linearElementReferenceModelVersion map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementReferenceModelVersion"), __scope, false) } getOrElse {Nil},
        __obj.linearElementNature map { scalaxb.toXML[nu.ndw.LinearElementNatureEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementNature"), __scope, false) } getOrElse {Nil},
        __obj.linearElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Referent](__obj.startPointOfLinearElement, Some("http://datex2.eu/schema/2/2_0"), Some("startPointOfLinearElement"), __scope, false),
        __obj.intermediatePointOnLinearElement flatMap { scalaxb.toXML[nu.ndw._IntermediatePointOnLinearElement](_, Some("http://datex2.eu/schema/2/2_0"), Some("intermediatePointOnLinearElement"), __scope, false) },
        scalaxb.toXML[nu.ndw.Referent](__obj.endPointOfLinearElement, Some("http://datex2.eu/schema/2/2_0"), Some("endPointOfLinearElement"), __scope, false),
        __obj.linearElementByPointsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearElementByPointsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_LinearElementNatureEnumFormat = new DefaultNundw_LinearElementNatureEnumFormat {}
  trait DefaultNundw_LinearElementNatureEnumFormat extends scalaxb.XMLFormat[nu.ndw.LinearElementNatureEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.LinearElementNatureEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("road")) => nu.ndw.Road
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadSection")) => nu.ndw.RoadSection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slipRoad")) => nu.ndw.SlipRoadValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue62

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.LinearElementNatureEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.LinearElementNatureEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_LinearReferencingDirectionEnumFormat = new DefaultNundw_LinearReferencingDirectionEnumFormat {}
  trait DefaultNundw_LinearReferencingDirectionEnumFormat extends scalaxb.XMLFormat[nu.ndw.LinearReferencingDirectionEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.LinearReferencingDirectionEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("both")) => nu.ndw.BothValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("opposite")) => nu.ndw.Opposite
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("aligned")) => nu.ndw.Aligned
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue19

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.LinearReferencingDirectionEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.LinearReferencingDirectionEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_LinearTrafficViewFormat extends scalaxb.ElemNameParser[nu.ndw.LinearTrafficView] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("LinearTrafficView")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.LinearTrafficView] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearPredefinedLocationReference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficViewRecord")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearTrafficViewExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.LinearTrafficView(scalaxb.fromXML[nu.ndw._PredefinedLocationVersionedReference](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[nu.ndw.TrafficViewRecord](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.LinearTrafficView, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.LinearTrafficView, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._PredefinedLocationVersionedReference](__obj.linearPredefinedLocationReference, Some("http://datex2.eu/schema/2/2_0"), Some("linearPredefinedLocationReference"), __scope, false),
        __obj.trafficViewRecord flatMap { scalaxb.toXML[nu.ndw.TrafficViewRecord](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficViewRecord"), __scope, false) },
        __obj.linearTrafficViewExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearTrafficViewExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_LinearWithinLinearElementFormat extends scalaxb.ElemNameParser[nu.ndw.LinearWithinLinearElement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("LinearWithinLinearElement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.LinearWithinLinearElement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "administrativeAreaOfLinearSection")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "directionBoundOnLinearSection")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "directionRelativeOnLinearSection")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "heightGradeOfLinearSection")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElement")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "fromPoint")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "toPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearWithinLinearElementExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.LinearWithinLinearElement(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.LinearReferencingDirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.HeightGradeEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.LinearElementable](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.DistanceAlongLinearElement](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.DistanceAlongLinearElement](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.LinearWithinLinearElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.administrativeAreaOfLinearSection map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("administrativeAreaOfLinearSection"), __scope, false) } getOrElse {Nil},
        __obj.directionBoundOnLinearSection map { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("directionBoundOnLinearSection"), __scope, false) } getOrElse {Nil},
        __obj.directionRelativeOnLinearSection map { scalaxb.toXML[nu.ndw.LinearReferencingDirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("directionRelativeOnLinearSection"), __scope, false) } getOrElse {Nil},
        __obj.heightGradeOfLinearSection map { scalaxb.toXML[nu.ndw.HeightGradeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("heightGradeOfLinearSection"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.LinearElementable](__obj.linearElement, Some("http://datex2.eu/schema/2/2_0"), Some("linearElement"), __scope, false),
        scalaxb.toXML[nu.ndw.DistanceAlongLinearElement](__obj.fromPoint, Some("http://datex2.eu/schema/2/2_0"), Some("fromPoint"), __scope, false),
        scalaxb.toXML[nu.ndw.DistanceAlongLinearElement](__obj.toPoint, Some("http://datex2.eu/schema/2/2_0"), Some("toPoint"), __scope, false),
        __obj.linearWithinLinearElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearWithinLinearElementExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_LoadType2EnumFormat = new DefaultNundw_LoadType2EnumFormat {}
  trait DefaultNundw_LoadType2EnumFormat extends scalaxb.XMLFormat[nu.ndw.LoadType2Enum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.LoadType2Enum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("refrigeratedGoods")) => nu.ndw.RefrigeratedGoods

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.LoadType2Enum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.LoadType2Enum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_LoadTypeEnumFormat = new DefaultNundw_LoadTypeEnumFormat {}
  trait DefaultNundw_LoadTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.LoadTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.LoadTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("abnormalLoad")) => nu.ndw.AbnormalLoadValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ammunition")) => nu.ndw.Ammunition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("chemicals")) => nu.ndw.Chemicals
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("combustibleMaterials")) => nu.ndw.CombustibleMaterials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("corrosiveMaterials")) => nu.ndw.CorrosiveMaterials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("debris")) => nu.ndw.DebrisValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("empty")) => nu.ndw.Empty
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("explosiveMaterials")) => nu.ndw.ExplosiveMaterials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extraHighLoad")) => nu.ndw.ExtraHighLoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extraLongLoad")) => nu.ndw.ExtraLongLoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extraWideLoad")) => nu.ndw.ExtraWideLoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fuel")) => nu.ndw.Fuel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("glass")) => nu.ndw.Glass
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("goods")) => nu.ndw.Goods
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hazardousMaterials")) => nu.ndw.HazardousMaterials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("liquid")) => nu.ndw.Liquid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("livestock")) => nu.ndw.Livestock
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("materials")) => nu.ndw.Materials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("materialsDangerousForPeople")) => nu.ndw.MaterialsDangerousForPeople
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("materialsDangerousForTheEnvironment")) => nu.ndw.MaterialsDangerousForTheEnvironment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("materialsDangerousForWater")) => nu.ndw.MaterialsDangerousForWater
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("oil")) => nu.ndw.Oil
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ordinary")) => nu.ndw.Ordinary
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("perishableProducts")) => nu.ndw.PerishableProducts
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrol")) => nu.ndw.Petrol
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pharmaceuticalMaterials")) => nu.ndw.PharmaceuticalMaterials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("radioactiveMaterials")) => nu.ndw.RadioactiveMaterials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("refuse")) => nu.ndw.Refuse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("toxicMaterials")) => nu.ndw.ToxicMaterials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicles")) => nu.ndw.Vehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue34

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.LoadTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.LoadTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_LocationFormat extends scalaxb.XMLFormat[nu.ndw.Location] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Location] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Area")) => Right(scalaxb.fromXML[nu.ndw.Area](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("LocationByReference")) => Right(scalaxb.fromXML[nu.ndw.LocationByReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NetworkLocation")) => Right(scalaxb.fromXML[nu.ndw.NetworkLocation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Point")) => Right(scalaxb.fromXML[nu.ndw.Point](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Linear")) => Right(scalaxb.fromXML[nu.ndw.Linear](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Location, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.Area => scalaxb.toXML[nu.ndw.Area](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.LocationByReference => scalaxb.toXML[nu.ndw.LocationByReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.NetworkLocation => scalaxb.toXML[nu.ndw.NetworkLocation](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_LocationByReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.LocationByReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("LocationByReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.LocationByReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocationsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "externalReferencing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationForDisplay")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocationReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationByReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.LocationByReference(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.ExternalReferencing](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.PointCoordinates](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw._PredefinedLocationVersionedReference](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.LocationByReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupOfLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocationsExtension"), __scope, false) } getOrElse {Nil},
        __obj.externalReferencing flatMap { scalaxb.toXML[nu.ndw.ExternalReferencing](_, Some("http://datex2.eu/schema/2/2_0"), Some("externalReferencing"), __scope, false) },
        __obj.locationForDisplay map { scalaxb.toXML[nu.ndw.PointCoordinates](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationForDisplay"), __scope, false) } getOrElse {Nil},
        __obj.locationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw._PredefinedLocationVersionedReference](__obj.predefinedLocationReference, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocationReference"), __scope, false),
        __obj.locationByReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationByReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_LocationCharacteristicsOverrideFormat extends scalaxb.ElemNameParser[nu.ndw.LocationCharacteristicsOverride] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("LocationCharacteristicsOverride")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.LocationCharacteristicsOverride] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementLanesOverride")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reversedFlow")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationCharacteristicsOverrideExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.LocationCharacteristicsOverride(p1.headOption map { scalaxb.fromXML[nu.ndw.LaneEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.LocationCharacteristicsOverride, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementLanesOverride map { scalaxb.toXML[nu.ndw.LaneEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementLanesOverride"), __scope, false) } getOrElse {Nil},
        __obj.reversedFlow map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("reversedFlow"), __scope, false) } getOrElse {Nil},
        __obj.locationCharacteristicsOverrideExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationCharacteristicsOverrideExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_LocationDescriptorEnumFormat = new DefaultNundw_LocationDescriptorEnumFormat {}
  trait DefaultNundw_LocationDescriptorEnumFormat extends scalaxb.XMLFormat[nu.ndw.LocationDescriptorEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.LocationDescriptorEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("aroundABendInRoad")) => nu.ndw.AroundABendInRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atMotorwayInterchange")) => nu.ndw.AtMotorwayInterchange
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atRestArea")) => nu.ndw.AtRestArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atServiceArea")) => nu.ndw.AtServiceArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atTollPlaza")) => nu.ndw.AtTollPlaza
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atTunnelEntryOrExit")) => nu.ndw.AtTunnelEntryOrExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inbound")) => nu.ndw.Inbound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inGallery")) => nu.ndw.InGallery
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inTheCentre")) => nu.ndw.InTheCentre
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inTheOppositeDirection")) => nu.ndw.InTheOppositeDirection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inTunnel")) => nu.ndw.InTunnel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onBorder")) => nu.ndw.OnBorder
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onBridge")) => nu.ndw.OnBridge
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onConnector")) => nu.ndw.OnConnector
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onElevatedSection")) => nu.ndw.OnElevatedSection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onFlyover")) => nu.ndw.OnFlyover
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onIceRoad")) => nu.ndw.OnIceRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onLevelCrossing")) => nu.ndw.OnLevelCrossing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onLinkRoad")) => nu.ndw.OnLinkRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onPass")) => nu.ndw.OnPass
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onRoundabout")) => nu.ndw.OnRoundabout
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onTheLeft")) => nu.ndw.OnTheLeft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onTheRight")) => nu.ndw.OnTheRight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onTheRoadway")) => nu.ndw.OnTheRoadway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onUndergroundSection")) => nu.ndw.OnUndergroundSection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onUnderpass")) => nu.ndw.OnUnderpass
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("outbound")) => nu.ndw.Outbound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overCrestOfHill")) => nu.ndw.OverCrestOfHill
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("withinJunction")) => nu.ndw.WithinJunction

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.LocationDescriptorEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.LocationDescriptorEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_MaintenanceVehicleActionsEnumFormat = new DefaultNundw_MaintenanceVehicleActionsEnumFormat {}
  trait DefaultNundw_MaintenanceVehicleActionsEnumFormat extends scalaxb.XMLFormat[nu.ndw.MaintenanceVehicleActionsEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.MaintenanceVehicleActionsEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("maintenanceVehiclesMergingIntoTrafficFlow")) => nu.ndw.MaintenanceVehiclesMergingIntoTrafficFlow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("saltAndGritSpreading")) => nu.ndw.SaltAndGritSpreading
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slowMoving")) => nu.ndw.SlowMoving
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowClearing")) => nu.ndw.SnowClearing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stoppingToServiceEquipments")) => nu.ndw.StoppingToServiceEquipments

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.MaintenanceVehicleActionsEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.MaintenanceVehicleActionsEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_MaintenanceVehiclesFormat extends scalaxb.ElemNameParser[nu.ndw.MaintenanceVehicles] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MaintenanceVehicles")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MaintenanceVehicles] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfMaintenanceVehicles")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maintenanceVehicleActions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maintenanceVehiclesExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.MaintenanceVehicles(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.MaintenanceVehicleActionsEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.MaintenanceVehicles, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.numberOfMaintenanceVehicles map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfMaintenanceVehicles"), __scope, false) } getOrElse {Nil},
        __obj.maintenanceVehicleActions flatMap { scalaxb.toXML[nu.ndw.MaintenanceVehicleActionsEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("maintenanceVehicleActions"), __scope, false) },
        __obj.maintenanceVehiclesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("maintenanceVehiclesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_MaintenanceWorksFormat extends scalaxb.ElemNameParser[nu.ndw.MaintenanceWorks] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MaintenanceWorks")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MaintenanceWorks] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadworksDuration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadworksScale")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "underTraffic")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urgentRoadworks")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobility")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subjects")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maintenanceVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadworksExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadMaintenanceType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maintenanceWorksExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      nu.ndw.MaintenanceWorks(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.RoadworksDurationEnum](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.RoadworksScaleEnum](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[nu.ndw.Subjects](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[nu.ndw.MaintenanceVehicles](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[nu.ndw.RoadMaintenanceTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.MaintenanceWorks, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.MaintenanceWorks, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        __obj.roadworksDuration map { scalaxb.toXML[nu.ndw.RoadworksDurationEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadworksDuration"), __scope, false) } getOrElse {Nil},
        __obj.roadworksScale map { scalaxb.toXML[nu.ndw.RoadworksScaleEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadworksScale"), __scope, false) } getOrElse {Nil},
        __obj.underTraffic map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("underTraffic"), __scope, false) } getOrElse {Nil},
        __obj.urgentRoadworks map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("urgentRoadworks"), __scope, false) } getOrElse {Nil},
        __obj.mobility map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobility"), __scope, false) } getOrElse {Nil},
        __obj.subjects map { scalaxb.toXML[nu.ndw.Subjects](_, Some("http://datex2.eu/schema/2/2_0"), Some("subjects"), __scope, false) } getOrElse {Nil},
        __obj.maintenanceVehicles map { scalaxb.toXML[nu.ndw.MaintenanceVehicles](_, Some("http://datex2.eu/schema/2/2_0"), Some("maintenanceVehicles"), __scope, false) } getOrElse {Nil},
        __obj.roadworksExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadworksExtension"), __scope, false) } getOrElse {Nil},
        __obj.roadMaintenanceType flatMap { scalaxb.toXML[nu.ndw.RoadMaintenanceTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadMaintenanceType"), __scope, false) },
        __obj.maintenanceWorksExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("maintenanceWorksExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ManagedCauseFormat extends scalaxb.ElemNameParser[nu.ndw.ManagedCause] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ManagedCause")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ManagedCause] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "causeExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "managedCause")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "managedCauseExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.ManagedCause(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordVersionedReference](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ManagedCause, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.causeExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("causeExtension"), __scope, false) } getOrElse {Nil},
        __obj.managedCause map { scalaxb.toXML[nu.ndw._SituationRecordVersionedReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("managedCause"), __scope, false) } getOrElse {Nil},
        __obj.managedCauseExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("managedCauseExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ManagementFormat extends scalaxb.ElemNameParser[nu.ndw.Management] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Management")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Management] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lifeCycleManagement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "filterExitManagement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "managementExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.Management(p1.headOption map { scalaxb.fromXML[nu.ndw.LifeCycleManagement](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.FilterExitManagement](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Management, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.lifeCycleManagement map { scalaxb.toXML[nu.ndw.LifeCycleManagement](_, Some("http://datex2.eu/schema/2/2_0"), Some("lifeCycleManagement"), __scope, false) } getOrElse {Nil},
        __obj.filterExitManagement map { scalaxb.toXML[nu.ndw.FilterExitManagement](_, Some("http://datex2.eu/schema/2/2_0"), Some("filterExitManagement"), __scope, false) } getOrElse {Nil},
        __obj.managementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("managementExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_MeansOfPaymentEnumFormat = new DefaultNundw_MeansOfPaymentEnumFormat {}
  trait DefaultNundw_MeansOfPaymentEnumFormat extends scalaxb.XMLFormat[nu.ndw.MeansOfPaymentEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.MeansOfPaymentEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("paymentCard")) => nu.ndw.PaymentCard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cash")) => nu.ndw.Cash
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cashCoinsOnly")) => nu.ndw.CashCoinsOnly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("directCashTransfer")) => nu.ndw.DirectCashTransfer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("electronicSettlement")) => nu.ndw.ElectronicSettlement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rfid")) => nu.ndw.Rfid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mobileApp")) => nu.ndw.MobileApp
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("payBySMS")) => nu.ndw.PayBySMS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mobilePhone")) => nu.ndw.MobilePhone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue18
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue33

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.MeansOfPaymentEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.MeansOfPaymentEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_MeasuredDataPublicationFormat extends scalaxb.ElemNameParser[nu.ndw.MeasuredDataPublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MeasuredDataPublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MeasuredDataPublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationCreator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublicationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteTableReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "siteMeasurements")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measuredDataPublicationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      nu.ndw.MeasuredDataPublication(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw._MeasurementSiteTableVersionedReference](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.HeaderInformation](p7, scalaxb.ElemName(node) :: stack),
        p8 map { scalaxb.fromXML[nu.ndw.SiteMeasurements](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.MeasuredDataPublication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.MeasuredDataPublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.feedDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedDescription"), __scope, false) } getOrElse {Nil},
        __obj.feedType map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.publicationTime, Some("http://datex2.eu/schema/2/2_0"), Some("publicationTime"), __scope, false),
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.publicationCreator, Some("http://datex2.eu/schema/2/2_0"), Some("publicationCreator"), __scope, false),
        __obj.payloadPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublicationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw._MeasurementSiteTableVersionedReference](__obj.measurementSiteTableReference, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteTableReference"), __scope, false),
        scalaxb.toXML[nu.ndw.HeaderInformation](__obj.headerInformation, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false),
        __obj.siteMeasurements flatMap { scalaxb.toXML[nu.ndw.SiteMeasurements](_, Some("http://datex2.eu/schema/2/2_0"), Some("siteMeasurements"), __scope, false) },
        __obj.measuredDataPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("measuredDataPublicationExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_MeasuredOrDerivedDataTypeEnumFormat = new DefaultNundw_MeasuredOrDerivedDataTypeEnumFormat {}
  trait DefaultNundw_MeasuredOrDerivedDataTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.MeasuredOrDerivedDataTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.MeasuredOrDerivedDataTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("humidityInformation")) => nu.ndw.HumidityInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("individualVehicleMeasurements")) => nu.ndw.IndividualVehicleMeasurements
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pollutionInformation")) => nu.ndw.PollutionInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("precipitationInformation")) => nu.ndw.PrecipitationInformationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pressureInformation")) => nu.ndw.PressureInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("radiationInformation")) => nu.ndw.RadiationInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadSurfaceConditionInformation")) => nu.ndw.RoadSurfaceConditionInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temperatureInformation")) => nu.ndw.TemperatureInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficConcentration")) => nu.ndw.TrafficConcentration
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficFlow")) => nu.ndw.TrafficFlow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficHeadway")) => nu.ndw.TrafficHeadway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficSpeed")) => nu.ndw.TrafficSpeedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficStatusInformation")) => nu.ndw.TrafficStatusInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("travelTimeInformation")) => nu.ndw.TravelTimeInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("visibilityInformation")) => nu.ndw.VisibilityInformationValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("windInformation")) => nu.ndw.WindInformationValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.MeasuredOrDerivedDataTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.MeasuredOrDerivedDataTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_MeasuredValueFormat extends scalaxb.ElemNameParser[nu.ndw.MeasuredValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MeasuredValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MeasuredValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementEquipmentTypeUsed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationCharacteristicsOverride")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementEquipmentFault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicData")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measuredValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.MeasuredValue(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.LocationCharacteristicsOverride](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.MeasurementEquipmentFault](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.BasicData](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.MeasuredValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementEquipmentTypeUsed map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementEquipmentTypeUsed"), __scope, false) } getOrElse {Nil},
        __obj.locationCharacteristicsOverride map { scalaxb.toXML[nu.ndw.LocationCharacteristicsOverride](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationCharacteristicsOverride"), __scope, false) } getOrElse {Nil},
        __obj.measurementEquipmentFault flatMap { scalaxb.toXML[nu.ndw.MeasurementEquipmentFault](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementEquipmentFault"), __scope, false) },
        __obj.basicData map { scalaxb.toXML[nu.ndw.BasicData](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicData"), __scope, false) } getOrElse {Nil},
        __obj.measuredValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("measuredValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_MeasurementEquipmentFaultFormat extends scalaxb.ElemNameParser[nu.ndw.MeasurementEquipmentFault] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MeasurementEquipmentFault")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MeasurementEquipmentFault] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultCreationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultLastUpdateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultSeverity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementEquipmentFault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementEquipmentFaultExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.MeasurementEquipmentFault(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw.FaultSeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.MeasurementEquipmentFaultEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.MeasurementEquipmentFault, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.faultIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.faultDescription map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultDescription"), __scope, false) } getOrElse {Nil},
        __obj.faultCreationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultCreationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.faultLastUpdateTime, Some("http://datex2.eu/schema/2/2_0"), Some("faultLastUpdateTime"), __scope, false),
        __obj.faultSeverity map { scalaxb.toXML[nu.ndw.FaultSeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultSeverity"), __scope, false) } getOrElse {Nil},
        __obj.faultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.MeasurementEquipmentFaultEnum](__obj.measurementEquipmentFault, Some("http://datex2.eu/schema/2/2_0"), Some("measurementEquipmentFault"), __scope, false),
        __obj.measurementEquipmentFaultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementEquipmentFaultExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_MeasurementEquipmentFaultEnumFormat = new DefaultNundw_MeasurementEquipmentFaultEnumFormat {}
  trait DefaultNundw_MeasurementEquipmentFaultEnumFormat extends scalaxb.XMLFormat[nu.ndw.MeasurementEquipmentFaultEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.MeasurementEquipmentFaultEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("intermittentDataValues")) => nu.ndw.IntermittentDataValuesValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noDataValuesAvailable")) => nu.ndw.NoDataValuesAvailableValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("spuriousUnreliableDataValues")) => nu.ndw.SpuriousUnreliableDataValuesValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecifiedOrUnknownFault")) => nu.ndw.UnspecifiedOrUnknownFaultValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue63

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.MeasurementEquipmentFaultEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.MeasurementEquipmentFaultEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_MeasurementSiteRecordFormat extends scalaxb.ElemNameParser[nu.ndw.MeasurementSiteRecord] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MeasurementSiteRecord")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MeasurementSiteRecord] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "computationMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementEquipmentReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementEquipmentTypeUsed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteNumberOfLanes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteIdentification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSide")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSpecificCharacteristics")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteRecordExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      nu.ndw.MeasurementSiteRecord(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.ComputationMethodEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[nu.ndw._MeasurementSiteRecordIndexMeasurementSpecificCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.MeasurementSiteRecord, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.MeasurementSiteRecord, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementSiteRecordVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteRecordVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.computationMethod map { scalaxb.toXML[nu.ndw.ComputationMethodEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("computationMethod"), __scope, false) } getOrElse {Nil},
        __obj.measurementEquipmentReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementEquipmentReference"), __scope, false) } getOrElse {Nil},
        __obj.measurementEquipmentTypeUsed map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementEquipmentTypeUsed"), __scope, false) } getOrElse {Nil},
        __obj.measurementSiteName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteName"), __scope, false) } getOrElse {Nil},
        __obj.measurementSiteNumberOfLanes map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteNumberOfLanes"), __scope, false) } getOrElse {Nil},
        __obj.measurementSiteIdentification map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteIdentification"), __scope, false) } getOrElse {Nil},
        __obj.measurementSide map { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSide"), __scope, false) } getOrElse {Nil},
        __obj.measurementSpecificCharacteristics flatMap { scalaxb.toXML[nu.ndw._MeasurementSiteRecordIndexMeasurementSpecificCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSpecificCharacteristics"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.measurementSiteLocation, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteLocation"), __scope, false),
        __obj.measurementSiteRecordExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteRecordExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_MeasurementSiteTableFormat extends scalaxb.ElemNameParser[nu.ndw.MeasurementSiteTable] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MeasurementSiteTable")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MeasurementSiteTable] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteTableIdentification")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteRecord")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteTableExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.MeasurementSiteTable(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.MeasurementSiteRecord](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.MeasurementSiteTable, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.MeasurementSiteTable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementSiteTableIdentification map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteTableIdentification"), __scope, false) } getOrElse {Nil},
        __obj.measurementSiteRecord flatMap { scalaxb.toXML[nu.ndw.MeasurementSiteRecord](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteRecord"), __scope, false) },
        __obj.measurementSiteTableExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteTableExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_MeasurementSiteTablePublicationFormat extends scalaxb.ElemNameParser[nu.ndw.MeasurementSiteTablePublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MeasurementSiteTablePublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MeasurementSiteTablePublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationCreator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublicationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteTable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteTablePublicationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.MeasurementSiteTablePublication(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.HeaderInformation](p6, scalaxb.ElemName(node) :: stack),
        p7 map { scalaxb.fromXML[nu.ndw.MeasurementSiteTable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.MeasurementSiteTablePublication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.MeasurementSiteTablePublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.feedDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedDescription"), __scope, false) } getOrElse {Nil},
        __obj.feedType map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.publicationTime, Some("http://datex2.eu/schema/2/2_0"), Some("publicationTime"), __scope, false),
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.publicationCreator, Some("http://datex2.eu/schema/2/2_0"), Some("publicationCreator"), __scope, false),
        __obj.payloadPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublicationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.HeaderInformation](__obj.headerInformation, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false),
        __obj.measurementSiteTable flatMap { scalaxb.toXML[nu.ndw.MeasurementSiteTable](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteTable"), __scope, false) },
        __obj.measurementSiteTablePublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteTablePublicationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_MeasurementSpecificCharacteristicsFormat extends scalaxb.ElemNameParser[nu.ndw.MeasurementSpecificCharacteristics] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MeasurementSpecificCharacteristics")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MeasurementSpecificCharacteristics] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accuracy")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "period")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "smoothingFactor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "specificLane")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "specificMeasurementValueType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "specificVehicleCharacteristics")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSpecificCharacteristicsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.MeasurementSpecificCharacteristics(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.LaneEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.MeasuredOrDerivedDataTypeEnum](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.MeasurementSpecificCharacteristics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.accuracy map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("accuracy"), __scope, false) } getOrElse {Nil},
        __obj.period map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("period"), __scope, false) } getOrElse {Nil},
        __obj.smoothingFactor map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("smoothingFactor"), __scope, false) } getOrElse {Nil},
        __obj.specificLane map { scalaxb.toXML[nu.ndw.LaneEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("specificLane"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.MeasuredOrDerivedDataTypeEnum](__obj.specificMeasurementValueType, Some("http://datex2.eu/schema/2/2_0"), Some("specificMeasurementValueType"), __scope, false),
        __obj.specificVehicleCharacteristics map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("specificVehicleCharacteristics"), __scope, false) } getOrElse {Nil},
        __obj.measurementSpecificCharacteristicsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSpecificCharacteristicsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_MicrogramsConcentrationValueFormat extends scalaxb.ElemNameParser[nu.ndw.MicrogramsConcentrationValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MicrogramsConcentrationValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MicrogramsConcentrationValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "microgramsConcentration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "microgramsConcentrationValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.MicrogramsConcentrationValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.MicrogramsConcentrationValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.MicrogramsConcentrationValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.microgramsConcentration, Some("http://datex2.eu/schema/2/2_0"), Some("microgramsConcentration"), __scope, false),
        __obj.microgramsConcentrationValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("microgramsConcentrationValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_MobilityFormat extends scalaxb.ElemNameParser[nu.ndw.Mobility] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Mobility")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Mobility] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.Mobility(scalaxb.fromXML[nu.ndw.MobilityEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Mobility, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.MobilityEnum](__obj.mobilityType, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityType"), __scope, false),
        __obj.mobilityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_MobilityEnumFormat = new DefaultNundw_MobilityEnumFormat {}
  trait DefaultNundw_MobilityEnumFormat extends scalaxb.XMLFormat[nu.ndw.MobilityEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.MobilityEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mobile")) => nu.ndw.Mobile
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stationary")) => nu.ndw.Stationary
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue17

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.MobilityEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.MobilityEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_MonthOfYearEnumFormat = new DefaultNundw_MonthOfYearEnumFormat {}
  trait DefaultNundw_MonthOfYearEnumFormat extends scalaxb.XMLFormat[nu.ndw.MonthOfYearEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.MonthOfYearEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("january")) => nu.ndw.January
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("february")) => nu.ndw.February
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("march")) => nu.ndw.MarchValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("april")) => nu.ndw.April
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("may")) => nu.ndw.May
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("june")) => nu.ndw.June
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("july")) => nu.ndw.July
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("august")) => nu.ndw.August
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("september")) => nu.ndw.September
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("october")) => nu.ndw.October
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("november")) => nu.ndw.November
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("december")) => nu.ndw.December

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.MonthOfYearEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.MonthOfYearEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ValuesFormat extends scalaxb.ElemNameParser[nu.ndw.Values] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Values] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "value")) ^^
      { case p1 =>
      nu.ndw.Values(p1 map { scalaxb.fromXML[nu.ndw.MultilingualStringValue](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Values, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.value flatMap { scalaxb.toXML[nu.ndw.MultilingualStringValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("value"), __scope, false) })

  }

  trait DefaultNundw_MultilingualStringFormat extends scalaxb.ElemNameParser[nu.ndw.MultilingualString] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("MultilingualString")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.MultilingualString] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "values")) ^^
      { case p1 =>
      nu.ndw.MultilingualString(scalaxb.fromXML[nu.ndw.Values](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: nu.ndw.MultilingualString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.Values](__obj.values, Some("http://datex2.eu/schema/2/2_0"), Some("values"), __scope, false))

  }

  trait DefaultNundw_MultilingualStringValueFormat extends scalaxb.XMLFormat[nu.ndw.MultilingualStringValue] with scalaxb.CanWriteChildNodes[nu.ndw.MultilingualStringValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.MultilingualStringValue] = seq match {
      case node: scala.xml.Node => Right(nu.ndw.MultilingualStringValue(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw.MultilingualStringValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => __obj.lang foreach { x => attr = scala.xml.Attribute(null, "lang", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.MultilingualStringValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultNundw_NamedAreaFormat extends scalaxb.ElemNameParser[nu.ndw.NamedArea] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("NamedArea")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.NamedArea] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "country")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "county")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "areaName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "policeForceControlArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadOperatorControlArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "namedAreaExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.NamedArea(p1.headOption map { scalaxb.fromXML[nu.ndw.CountryEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.NamedArea, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.country map { scalaxb.toXML[nu.ndw.CountryEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("country"), __scope, false) } getOrElse {Nil},
        __obj.nation map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("nation"), __scope, false) } getOrElse {Nil},
        __obj.county map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("county"), __scope, false) } getOrElse {Nil},
        __obj.areaName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("areaName"), __scope, false) } getOrElse {Nil},
        __obj.policeForceControlArea map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("policeForceControlArea"), __scope, false) } getOrElse {Nil},
        __obj.roadOperatorControlArea map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadOperatorControlArea"), __scope, false) } getOrElse {Nil},
        __obj.namedAreaExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("namedAreaExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_NetworkLocationFormat extends scalaxb.XMLFormat[nu.ndw.NetworkLocation] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.NetworkLocation] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Point")) => Right(scalaxb.fromXML[nu.ndw.Point](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Linear")) => Right(scalaxb.fromXML[nu.ndw.Linear](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.NetworkLocation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.Point => scalaxb.toXML[nu.ndw.Point](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.Linear => scalaxb.toXML[nu.ndw.Linear](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_NetworkManagementFormat extends scalaxb.XMLFormat[nu.ndw.NetworkManagement] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.NetworkManagement] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WinterDrivingManagement")) => Right(scalaxb.fromXML[nu.ndw.WinterDrivingManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadOrCarriagewayOrLaneManagement")) => Right(scalaxb.fromXML[nu.ndw.RoadOrCarriagewayOrLaneManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ReroutingManagement")) => Right(scalaxb.fromXML[nu.ndw.ReroutingManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GeneralInstructionOrMessageToRoadUsers")) => Right(scalaxb.fromXML[nu.ndw.GeneralInstructionOrMessageToRoadUsers](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GeneralNetworkManagement")) => Right(scalaxb.fromXML[nu.ndw.GeneralNetworkManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("SpeedManagement")) => Right(scalaxb.fromXML[nu.ndw.SpeedManagement](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.NetworkManagement, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.WinterDrivingManagement => scalaxb.toXML[nu.ndw.WinterDrivingManagement](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.RoadOrCarriagewayOrLaneManagement => scalaxb.toXML[nu.ndw.RoadOrCarriagewayOrLaneManagement](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ReroutingManagement => scalaxb.toXML[nu.ndw.ReroutingManagement](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.GeneralInstructionOrMessageToRoadUsers => scalaxb.toXML[nu.ndw.GeneralInstructionOrMessageToRoadUsers](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.GeneralNetworkManagement => scalaxb.toXML[nu.ndw.GeneralNetworkManagement](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.SpeedManagement => scalaxb.toXML[nu.ndw.SpeedManagement](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_NonManagedCauseFormat extends scalaxb.ElemNameParser[nu.ndw.NonManagedCause] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("NonManagedCause")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.NonManagedCause] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "causeExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "causeDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "causeType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonManagedCauseExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.NonManagedCause(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.CauseTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.NonManagedCause, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.causeExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("causeExtension"), __scope, false) } getOrElse {Nil},
        __obj.causeDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("causeDescription"), __scope, false) } getOrElse {Nil},
        __obj.causeType map { scalaxb.toXML[nu.ndw.CauseTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("causeType"), __scope, false) } getOrElse {Nil},
        __obj.nonManagedCauseExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonManagedCauseExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_NonOrderedLocationGroupByListFormat extends scalaxb.ElemNameParser[nu.ndw.NonOrderedLocationGroupByList] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("NonOrderedLocationGroupByList")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.NonOrderedLocationGroupByList] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocationsExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonOrderedLocationsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationContainedInGroup")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonOrderedLocationGroupByListExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.NonOrderedLocationGroupByList(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.Location](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.NonOrderedLocationGroupByList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupOfLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocationsExtension"), __scope, false) } getOrElse {Nil},
        __obj.nonOrderedLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonOrderedLocationsExtension"), __scope, false) } getOrElse {Nil},
        __obj.locationContainedInGroup flatMap { scalaxb.toXML[nu.ndw.Location](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationContainedInGroup"), __scope, false) },
        __obj.nonOrderedLocationGroupByListExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonOrderedLocationGroupByListExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_NonOrderedLocationGroupByReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.NonOrderedLocationGroupByReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("NonOrderedLocationGroupByReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.NonOrderedLocationGroupByReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocationsExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonOrderedLocationsExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedNonOrderedLocationGroupReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonOrderedLocationGroupByReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.NonOrderedLocationGroupByReference(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.NonOrderedLocationGroupByReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupOfLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocationsExtension"), __scope, false) } getOrElse {Nil},
        __obj.nonOrderedLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonOrderedLocationsExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference](__obj.predefinedNonOrderedLocationGroupReference, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedNonOrderedLocationGroupReference"), __scope, false),
        __obj.nonOrderedLocationGroupByReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonOrderedLocationGroupByReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_NonOrderedLocationsFormat extends scalaxb.XMLFormat[nu.ndw.NonOrderedLocations] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.NonOrderedLocations] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonOrderedLocationGroupByReference")) => Right(scalaxb.fromXML[nu.ndw.NonOrderedLocationGroupByReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonOrderedLocationGroupByList")) => Right(scalaxb.fromXML[nu.ndw.NonOrderedLocationGroupByList](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.NonOrderedLocations, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.NonOrderedLocationGroupByReference => scalaxb.toXML[nu.ndw.NonOrderedLocationGroupByReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.NonOrderedLocationGroupByList => scalaxb.toXML[nu.ndw.NonOrderedLocationGroupByList](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_NonRoadEventInformationFormat extends scalaxb.XMLFormat[nu.ndw.NonRoadEventInformation] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.NonRoadEventInformation] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TransitInformation")) => Right(scalaxb.fromXML[nu.ndw.TransitInformation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadsideServiceDisruption")) => Right(scalaxb.fromXML[nu.ndw.RoadsideServiceDisruption](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadOperatorServiceDisruption")) => Right(scalaxb.fromXML[nu.ndw.RoadOperatorServiceDisruption](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("CarParks")) => Right(scalaxb.fromXML[nu.ndw.CarParks](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.NonRoadEventInformation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TransitInformation => scalaxb.toXML[nu.ndw.TransitInformation](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.RoadsideServiceDisruption => scalaxb.toXML[nu.ndw.RoadsideServiceDisruption](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.RoadOperatorServiceDisruption => scalaxb.toXML[nu.ndw.RoadOperatorServiceDisruption](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.CarParks => scalaxb.toXML[nu.ndw.CarParks](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_NonWeatherRelatedRoadConditionsFormat extends scalaxb.ElemNameParser[nu.ndw.NonWeatherRelatedRoadConditions] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("NonWeatherRelatedRoadConditions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.NonWeatherRelatedRoadConditions] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "drivingConditionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "conditionsExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadConditionsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonWeatherRelatedRoadConditionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonWeatherRelatedRoadConditionsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      nu.ndw.NonWeatherRelatedRoadConditions(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.DrivingConditionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[nu.ndw.NonWeatherRelatedRoadConditionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.NonWeatherRelatedRoadConditions, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.NonWeatherRelatedRoadConditions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.drivingConditionType map { scalaxb.toXML[nu.ndw.DrivingConditionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("drivingConditionType"), __scope, false) } getOrElse {Nil},
        __obj.conditionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("conditionsExtension"), __scope, false) } getOrElse {Nil},
        __obj.roadConditionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadConditionsExtension"), __scope, false) } getOrElse {Nil},
        __obj.nonWeatherRelatedRoadConditionType flatMap { scalaxb.toXML[nu.ndw.NonWeatherRelatedRoadConditionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonWeatherRelatedRoadConditionType"), __scope, false) },
        __obj.nonWeatherRelatedRoadConditionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonWeatherRelatedRoadConditionsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_NonWeatherRelatedRoadConditionTypeEnumFormat = new DefaultNundw_NonWeatherRelatedRoadConditionTypeEnumFormat {}
  trait DefaultNundw_NonWeatherRelatedRoadConditionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.NonWeatherRelatedRoadConditionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.NonWeatherRelatedRoadConditionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dieselOnRoad")) => nu.ndw.DieselOnRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("leavesOnRoad")) => nu.ndw.LeavesOnRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("looseChippings")) => nu.ndw.LooseChippings
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("looseSandOnRoad")) => nu.ndw.LooseSandOnRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mudOnRoad")) => nu.ndw.MudOnRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("oilOnRoad")) => nu.ndw.OilOnRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrolOnRoad")) => nu.ndw.PetrolOnRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadSurfaceInPoorCondition")) => nu.ndw.RoadSurfaceInPoorCondition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slipperyRoad")) => nu.ndw.SlipperyRoadValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue64

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.NonWeatherRelatedRoadConditionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.NonWeatherRelatedRoadConditionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_NumberOfAxlesCharacteristicFormat extends scalaxb.ElemNameParser[nu.ndw.NumberOfAxlesCharacteristic] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("NumberOfAxlesCharacteristic")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.NumberOfAxlesCharacteristic] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "comparisonOperator")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfAxles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfAxlesCharacteristicExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.NumberOfAxlesCharacteristic(scalaxb.fromXML[nu.ndw.ComparisonOperatorEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.NumberOfAxlesCharacteristic, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.ComparisonOperatorEnum](__obj.comparisonOperator, Some("http://datex2.eu/schema/2/2_0"), Some("comparisonOperator"), __scope, false),
        scalaxb.toXML[Int](__obj.numberOfAxles, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfAxles"), __scope, false),
        __obj.numberOfAxlesCharacteristicExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfAxlesCharacteristicExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ObstructionTypeFormat extends scalaxb.XMLFormat[nu.ndw.ObstructionType] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ObstructionType] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VehicleObstruction")) => Right(scalaxb.fromXML[nu.ndw.VehicleObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("InfrastructureDamageObstruction")) => Right(scalaxb.fromXML[nu.ndw.InfrastructureDamageObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("EnvironmentalObstruction")) => Right(scalaxb.fromXML[nu.ndw.EnvironmentalObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AnimalPresenceObstruction")) => Right(scalaxb.fromXML[nu.ndw.AnimalPresenceObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GeneralObstruction")) => Right(scalaxb.fromXML[nu.ndw.GeneralObstruction](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.ObstructionType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.VehicleObstruction => scalaxb.toXML[nu.ndw.VehicleObstruction](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.InfrastructureDamageObstruction => scalaxb.toXML[nu.ndw.InfrastructureDamageObstruction](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.EnvironmentalObstruction => scalaxb.toXML[nu.ndw.EnvironmentalObstruction](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.AnimalPresenceObstruction => scalaxb.toXML[nu.ndw.AnimalPresenceObstruction](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.GeneralObstruction => scalaxb.toXML[nu.ndw.GeneralObstruction](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildNundw_ObstructionTypeEnumFormat = new DefaultNundw_ObstructionTypeEnumFormat {}
  trait DefaultNundw_ObstructionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ObstructionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ObstructionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("airCrash")) => nu.ndw.AirCrash
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("childrenOnRoadway")) => nu.ndw.ChildrenOnRoadway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("clearanceWork")) => nu.ndw.ClearanceWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("craneOperating")) => nu.ndw.CraneOperating
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cyclistsOnRoadway")) => nu.ndw.CyclistsOnRoadway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("debris")) => nu.ndw.Debris
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("explosion")) => nu.ndw.Explosion
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("explosionHazard")) => nu.ndw.ExplosionHazard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hazardsOnTheRoad")) => nu.ndw.HazardsOnTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("highSpeedChase")) => nu.ndw.HighSpeedChase
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("houseFire")) => nu.ndw.HouseFire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("incident")) => nu.ndw.Incident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("industrialAccident")) => nu.ndw.IndustrialAccident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("objectOnTheRoad")) => nu.ndw.ObjectOnTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("objectsFallingFromMovingVehicle")) => nu.ndw.ObjectsFallingFromMovingVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("obstructionOnTheRoad")) => nu.ndw.ObstructionOnTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("peopleOnRoadway")) => nu.ndw.PeopleOnRoadway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("railCrash")) => nu.ndw.RailCrash
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("recklessDriver")) => nu.ndw.RecklessDriver
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rescueAndRecoveryWork")) => nu.ndw.RescueAndRecoveryWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("severeFrostDamagedRoadway")) => nu.ndw.SevereFrostDamagedRoadway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shedLoad")) => nu.ndw.ShedLoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowAndIceDebris")) => nu.ndw.SnowAndIceDebris
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("spillageOccurringFromMovingVehicle")) => nu.ndw.SpillageOccurringFromMovingVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("spillageOnTheRoad")) => nu.ndw.SpillageOnTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unprotectedAccidentArea")) => nu.ndw.UnprotectedAccidentArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue32

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ObstructionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ObstructionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_OccupancyChangeValueFormat extends scalaxb.ElemNameParser[nu.ndw.OccupancyChangeValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OccupancyChangeValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OccupancyChangeValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "occupancyChange")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "occupancyChangeValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.OccupancyChangeValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.OccupancyChangeValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.OccupancyChangeValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.occupancyChange, Some("http://datex2.eu/schema/2/2_0"), Some("occupancyChange"), __scope, false),
        __obj.occupancyChangeValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("occupancyChangeValueExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_OccupancyDetectionTypeEnumFormat = new DefaultNundw_OccupancyDetectionTypeEnumFormat {}
  trait DefaultNundw_OccupancyDetectionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.OccupancyDetectionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OccupancyDetectionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => nu.ndw.NoneTypeValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("balancing")) => nu.ndw.Balancing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("singleSpaceDetection")) => nu.ndw.SingleSpaceDetection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("modelBased")) => nu.ndw.ModelBased
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("manual")) => nu.ndw.Manual
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecified")) => nu.ndw.UnspecifiedValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue31
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue16

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OccupancyDetectionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OccupancyDetectionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_OffsetDistanceFormat extends scalaxb.ElemNameParser[nu.ndw.OffsetDistance] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OffsetDistance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OffsetDistance] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "offsetDistance")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "offsetDistanceExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.OffsetDistance(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OffsetDistance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.offsetDistance, Some("http://datex2.eu/schema/2/2_0"), Some("offsetDistance"), __scope, false),
        __obj.offsetDistanceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("offsetDistanceExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_OpeningStatusEnumFormat = new DefaultNundw_OpeningStatusEnumFormat {}
  trait DefaultNundw_OpeningStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.OpeningStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OpeningStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("open")) => nu.ndw.Open
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("closed")) => nu.ndw.Closed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("closedAbnormal")) => nu.ndw.ClosedAbnormal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("openingTimesInForce")) => nu.ndw.OpeningTimesInForce
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("statusUnknown")) => nu.ndw.StatusUnknown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue30

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OpeningStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OpeningStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_OpeningTimesFormat extends scalaxb.ElemNameParser[nu.ndw.OpeningTimes] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpeningTimes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpeningTimes] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lastUpdated")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openAllYear")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "available24hours")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openingTimesUnknown")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openingTimesNotSpecified")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openingTimesExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.OpeningTimes(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.Validity](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpeningTimes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("lastUpdated"), __scope, false) } getOrElse {Nil},
        __obj.openAllYear map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("openAllYear"), __scope, false) } getOrElse {Nil},
        __obj.available24hours map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("available24hours"), __scope, false) } getOrElse {Nil},
        __obj.urlLinkAddress map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkAddress"), __scope, false) } getOrElse {Nil},
        __obj.openingTimesUnknown map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("openingTimesUnknown"), __scope, false) } getOrElse {Nil},
        __obj.openingTimesNotSpecified map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("openingTimesNotSpecified"), __scope, false) } getOrElse {Nil},
        __obj.validity map { scalaxb.toXML[nu.ndw.Validity](_, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false) } getOrElse {Nil},
        __obj.openingTimesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openingTimesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrAreaLocationReferencableFormat extends scalaxb.XMLFormat[nu.ndw.OpenlrAreaLocationReferencable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OpenlrAreaLocationReferencable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OpenlrCircleLocationReference")) => Right(scalaxb.fromXML[nu.ndw.OpenlrCircleLocationReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OpenlrClosedLineLocationReference")) => Right(scalaxb.fromXML[nu.ndw.OpenlrClosedLineLocationReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OpenlrGridLocationReference")) => Right(scalaxb.fromXML[nu.ndw.OpenlrGridLocationReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OpenlrPolygonLocationReference")) => Right(scalaxb.fromXML[nu.ndw.OpenlrPolygonLocationReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OpenlrRectangleLocationReference")) => Right(scalaxb.fromXML[nu.ndw.OpenlrRectangleLocationReference](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.OpenlrAreaLocationReference](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.OpenlrAreaLocationReferencable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.OpenlrCircleLocationReference => scalaxb.toXML[nu.ndw.OpenlrCircleLocationReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OpenlrClosedLineLocationReference => scalaxb.toXML[nu.ndw.OpenlrClosedLineLocationReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OpenlrGridLocationReference => scalaxb.toXML[nu.ndw.OpenlrGridLocationReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OpenlrPolygonLocationReference => scalaxb.toXML[nu.ndw.OpenlrPolygonLocationReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OpenlrRectangleLocationReference => scalaxb.toXML[nu.ndw.OpenlrRectangleLocationReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OpenlrAreaLocationReference => scalaxb.toXML[nu.ndw.OpenlrAreaLocationReference](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_OpenlrAreaLocationReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrAreaLocationReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrAreaLocationReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrAreaLocationReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrAreaLocationReferenceExtension")) ^^
      { case p1 =>
      nu.ndw.OpenlrAreaLocationReference(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrAreaLocationReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.openlrAreaLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrAreaLocationReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrBaseLocationReferencePointFormat extends scalaxb.XMLFormat[nu.ndw.OpenlrBaseLocationReferencePoint] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OpenlrBaseLocationReferencePoint] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OpenlrLastLocationReferencePoint")) => Right(scalaxb.fromXML[nu.ndw.OpenlrLastLocationReferencePoint](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OpenlrLocationReferencePoint")) => Right(scalaxb.fromXML[nu.ndw.OpenlrLocationReferencePoint](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.OpenlrBaseLocationReferencePoint, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.OpenlrLastLocationReferencePoint => scalaxb.toXML[nu.ndw.OpenlrLastLocationReferencePoint](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OpenlrLocationReferencePoint => scalaxb.toXML[nu.ndw.OpenlrLocationReferencePoint](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_OpenlrBasePointLocationFormat extends scalaxb.XMLFormat[nu.ndw.OpenlrBasePointLocation] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OpenlrBasePointLocation] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OpenlrPointAlongLine")) => Right(scalaxb.fromXML[nu.ndw.OpenlrPointAlongLine](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OpenlrPoiWithAccessPoint")) => Right(scalaxb.fromXML[nu.ndw.OpenlrPoiWithAccessPoint](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.OpenlrBasePointLocation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.OpenlrPointAlongLine => scalaxb.toXML[nu.ndw.OpenlrPointAlongLine](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OpenlrPoiWithAccessPoint => scalaxb.toXML[nu.ndw.OpenlrPoiWithAccessPoint](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_OpenlrCircleLocationReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrCircleLocationReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrCircleLocationReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrCircleLocationReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrAreaLocationReferenceExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "radius")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrGeoCoordinate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrCircleLocationReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.OpenlrCircleLocationReference(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OpenlrGeoCoordinate](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrCircleLocationReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrAreaLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrAreaLocationReferenceExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.radius, Some("http://datex2.eu/schema/2/2_0"), Some("radius"), __scope, false),
        scalaxb.toXML[nu.ndw.OpenlrGeoCoordinate](__obj.openlrGeoCoordinate, Some("http://datex2.eu/schema/2/2_0"), Some("openlrGeoCoordinate"), __scope, false),
        __obj.openlrCircleLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrCircleLocationReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrClosedLineLocationReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrClosedLineLocationReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrClosedLineLocationReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrClosedLineLocationReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrAreaLocationReferenceExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLocationReferencePoint")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLastLine")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrClosedLineLocationReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.OpenlrClosedLineLocationReference(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.OpenlrLocationReferencePoint](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OpenlrLineAttributes](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrClosedLineLocationReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrAreaLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrAreaLocationReferenceExtension"), __scope, false) } getOrElse {Nil},
        __obj.openlrLocationReferencePoint flatMap { scalaxb.toXML[nu.ndw.OpenlrLocationReferencePoint](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLocationReferencePoint"), __scope, false) },
        scalaxb.toXML[nu.ndw.OpenlrLineAttributes](__obj.openlrLastLine, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLastLine"), __scope, false),
        __obj.openlrClosedLineLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrClosedLineLocationReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrExtendedAreaFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrExtendedArea] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrExtendedArea")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrExtendedArea] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrAreaLocationReference")) ^^
      { case p1 =>
      nu.ndw.OpenlrExtendedArea(scalaxb.fromXML[nu.ndw.OpenlrAreaLocationReferencable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrExtendedArea, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.OpenlrAreaLocationReferencable](__obj.openlrAreaLocationReference, Some("http://datex2.eu/schema/2/2_0"), Some("openlrAreaLocationReference"), __scope, false))

  }

  trait DefaultNundw_OpenlrExtendedLinearFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrExtendedLinear] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrExtendedLinear")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrExtendedLinear] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "firstDirection")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "oppositeDirection")) ^^
      { case p1 ~ p2 =>
      nu.ndw.OpenlrExtendedLinear(scalaxb.fromXML[nu.ndw.OpenlrLineLocationReference](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw.OpenlrLineLocationReference](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrExtendedLinear, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.OpenlrLineLocationReference](__obj.firstDirection, Some("http://datex2.eu/schema/2/2_0"), Some("firstDirection"), __scope, false),
        __obj.oppositeDirection map { scalaxb.toXML[nu.ndw.OpenlrLineLocationReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("oppositeDirection"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrExtendedPointFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrExtendedPoint] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrExtendedPoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrExtendedPoint] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPointLocationReference")) ^^
      { case p1 =>
      nu.ndw.OpenlrExtendedPoint(scalaxb.fromXML[nu.ndw.OpenlrPointLocationReference](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrExtendedPoint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[nu.ndw.OpenlrPointLocationReference](__obj.openlrPointLocationReference, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPointLocationReference"), __scope, false))

  }

  def buildNundw_OpenlrFormOfWayEnumFormat = new DefaultNundw_OpenlrFormOfWayEnumFormat {}
  trait DefaultNundw_OpenlrFormOfWayEnumFormat extends scalaxb.XMLFormat[nu.ndw.OpenlrFormOfWayEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OpenlrFormOfWayEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("undefined")) => nu.ndw.Undefined
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorway")) => nu.ndw.Motorway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("multipleCarriageway")) => nu.ndw.MultipleCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("singleCarriageway")) => nu.ndw.SingleCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roundabout")) => nu.ndw.Roundabout
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slipRoad")) => nu.ndw.SlipRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficSquare")) => nu.ndw.TrafficSquare
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue29

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OpenlrFormOfWayEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OpenlrFormOfWayEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_OpenlrFunctionalRoadClassEnumFormat = new DefaultNundw_OpenlrFunctionalRoadClassEnumFormat {}
  trait DefaultNundw_OpenlrFunctionalRoadClassEnumFormat extends scalaxb.XMLFormat[nu.ndw.OpenlrFunctionalRoadClassEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OpenlrFunctionalRoadClassEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FRC0")) => nu.ndw.FRC0
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FRC1")) => nu.ndw.FRC1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FRC2")) => nu.ndw.FRC2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FRC3")) => nu.ndw.FRC3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FRC4")) => nu.ndw.FRC4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FRC5")) => nu.ndw.FRC5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FRC6")) => nu.ndw.FRC6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("FRC7")) => nu.ndw.FRC7

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OpenlrFunctionalRoadClassEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OpenlrFunctionalRoadClassEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_OpenlrGeoCoordinateFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrGeoCoordinate] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrGeoCoordinate")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrGeoCoordinate] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrCoordinate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrGeoCoordinateExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.OpenlrGeoCoordinate(scalaxb.fromXML[nu.ndw.PointCoordinates](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrGeoCoordinate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.PointCoordinates](__obj.openlrCoordinate, Some("http://datex2.eu/schema/2/2_0"), Some("openlrCoordinate"), __scope, false),
        __obj.openlrGeoCoordinateExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrGeoCoordinateExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrGridAttributesFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrGridAttributes] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrGridAttributes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrGridAttributes] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrNumColumns")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrNumRows")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrGridAttributesExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.OpenlrGridAttributes(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrGridAttributes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.openlrNumColumns, Some("http://datex2.eu/schema/2/2_0"), Some("openlrNumColumns"), __scope, false),
        scalaxb.toXML[Int](__obj.openlrNumRows, Some("http://datex2.eu/schema/2/2_0"), Some("openlrNumRows"), __scope, false),
        __obj.openlrGridAttributesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrGridAttributesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrGridLocationReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrGridLocationReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrGridLocationReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrGridLocationReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrAreaLocationReferenceExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrRectangle")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrGridAttributes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrGridLocationReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.OpenlrGridLocationReference(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OpenlrRectangle](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OpenlrGridAttributes](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrGridLocationReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrAreaLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrAreaLocationReferenceExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.OpenlrRectangle](__obj.openlrRectangle, Some("http://datex2.eu/schema/2/2_0"), Some("openlrRectangle"), __scope, false),
        scalaxb.toXML[nu.ndw.OpenlrGridAttributes](__obj.openlrGridAttributes, Some("http://datex2.eu/schema/2/2_0"), Some("openlrGridAttributes"), __scope, false),
        __obj.openlrGridLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrGridLocationReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrLastLocationReferencePointFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrLastLocationReferencePoint] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrLastLocationReferencePoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrLastLocationReferencePoint] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrCoordinate")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLineAttributes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrBaseLocationReferencePointExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLastLocationReferencePointExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.OpenlrLastLocationReferencePoint(scalaxb.fromXML[nu.ndw.PointCoordinates](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OpenlrLineAttributes](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrLastLocationReferencePoint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.PointCoordinates](__obj.openlrCoordinate, Some("http://datex2.eu/schema/2/2_0"), Some("openlrCoordinate"), __scope, false),
        scalaxb.toXML[nu.ndw.OpenlrLineAttributes](__obj.openlrLineAttributes, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLineAttributes"), __scope, false),
        __obj.openlrBaseLocationReferencePointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrBaseLocationReferencePointExtension"), __scope, false) } getOrElse {Nil},
        __obj.openlrLastLocationReferencePointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLastLocationReferencePointExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrLineAttributesFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrLineAttributes] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrLineAttributes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrLineAttributes] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrFunctionalRoadClass")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrFormOfWay")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrBearing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLineAttributesExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.OpenlrLineAttributes(scalaxb.fromXML[nu.ndw.OpenlrFunctionalRoadClassEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OpenlrFormOfWayEnum](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrLineAttributes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.OpenlrFunctionalRoadClassEnum](__obj.openlrFunctionalRoadClass, Some("http://datex2.eu/schema/2/2_0"), Some("openlrFunctionalRoadClass"), __scope, false),
        scalaxb.toXML[nu.ndw.OpenlrFormOfWayEnum](__obj.openlrFormOfWay, Some("http://datex2.eu/schema/2/2_0"), Some("openlrFormOfWay"), __scope, false),
        scalaxb.toXML[Int](__obj.openlrBearing, Some("http://datex2.eu/schema/2/2_0"), Some("openlrBearing"), __scope, false),
        __obj.openlrLineAttributesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLineAttributesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrLineLocationReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrLineLocationReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrLineLocationReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrLineLocationReference] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLocationReferencePoint")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLastLocationReferencePoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrOffsets")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLineLocationReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.OpenlrLineLocationReference(p1 map { scalaxb.fromXML[nu.ndw.OpenlrLocationReferencePoint](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OpenlrLastLocationReferencePoint](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw.OpenlrOffsets](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrLineLocationReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrLocationReferencePoint flatMap { scalaxb.toXML[nu.ndw.OpenlrLocationReferencePoint](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLocationReferencePoint"), __scope, false) },
        scalaxb.toXML[nu.ndw.OpenlrLastLocationReferencePoint](__obj.openlrLastLocationReferencePoint, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLastLocationReferencePoint"), __scope, false),
        __obj.openlrOffsets map { scalaxb.toXML[nu.ndw.OpenlrOffsets](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrOffsets"), __scope, false) } getOrElse {Nil},
        __obj.openlrLineLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLineLocationReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrLocationReferencePointFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrLocationReferencePoint] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrLocationReferencePoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrLocationReferencePoint] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrCoordinate")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLineAttributes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrBaseLocationReferencePointExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPathAttributes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLocationReferencePointExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.OpenlrLocationReferencePoint(scalaxb.fromXML[nu.ndw.PointCoordinates](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OpenlrLineAttributes](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OpenlrPathAttributes](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrLocationReferencePoint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.PointCoordinates](__obj.openlrCoordinate, Some("http://datex2.eu/schema/2/2_0"), Some("openlrCoordinate"), __scope, false),
        scalaxb.toXML[nu.ndw.OpenlrLineAttributes](__obj.openlrLineAttributes, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLineAttributes"), __scope, false),
        __obj.openlrBaseLocationReferencePointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrBaseLocationReferencePointExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.OpenlrPathAttributes](__obj.openlrPathAttributes, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPathAttributes"), __scope, false),
        __obj.openlrLocationReferencePointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLocationReferencePointExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrOffsetsFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrOffsets] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrOffsets")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrOffsets] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPositiveOffset")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrNegativeOffset")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrOffsetsExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.OpenlrOffsets(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrOffsets, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrPositiveOffset map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPositiveOffset"), __scope, false) } getOrElse {Nil},
        __obj.openlrNegativeOffset map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrNegativeOffset"), __scope, false) } getOrElse {Nil},
        __obj.openlrOffsetsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrOffsetsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_OpenlrOrientationEnumFormat = new DefaultNundw_OpenlrOrientationEnumFormat {}
  trait DefaultNundw_OpenlrOrientationEnumFormat extends scalaxb.XMLFormat[nu.ndw.OpenlrOrientationEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OpenlrOrientationEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noOrientationOrUnknown")) => nu.ndw.NoOrientationOrUnknown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("withLineDirection")) => nu.ndw.WithLineDirection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("againstLineDirection")) => nu.ndw.AgainstLineDirection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("both")) => nu.ndw.Both

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OpenlrOrientationEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OpenlrOrientationEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_OpenlrPathAttributesFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrPathAttributes] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrPathAttributes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrPathAttributes] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLowestFRCToNextLRPoint")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrDistanceToNextLRPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPathAttributesExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.OpenlrPathAttributes(scalaxb.fromXML[nu.ndw.OpenlrFunctionalRoadClassEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrPathAttributes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.OpenlrFunctionalRoadClassEnum](__obj.openlrLowestFRCToNextLRPoint, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLowestFRCToNextLRPoint"), __scope, false),
        scalaxb.toXML[Int](__obj.openlrDistanceToNextLRPoint, Some("http://datex2.eu/schema/2/2_0"), Some("openlrDistanceToNextLRPoint"), __scope, false),
        __obj.openlrPathAttributesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPathAttributesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrPointAlongLineFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrPointAlongLine] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrPointAlongLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrPointAlongLine] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrSideOfRoad")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrOrientation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPositiveOffset")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLocationReferencePoint")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLastLocationReferencePoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrBasePointLocationExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPointAlongLineExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.OpenlrPointAlongLine(scalaxb.fromXML[nu.ndw.OpenlrSideOfRoadEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OpenlrOrientationEnum](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OpenlrLocationReferencePoint](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OpenlrLastLocationReferencePoint](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrPointAlongLine, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.OpenlrSideOfRoadEnum](__obj.openlrSideOfRoad, Some("http://datex2.eu/schema/2/2_0"), Some("openlrSideOfRoad"), __scope, false),
        scalaxb.toXML[nu.ndw.OpenlrOrientationEnum](__obj.openlrOrientation, Some("http://datex2.eu/schema/2/2_0"), Some("openlrOrientation"), __scope, false),
        __obj.openlrPositiveOffset map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPositiveOffset"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.OpenlrLocationReferencePoint](__obj.openlrLocationReferencePoint, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLocationReferencePoint"), __scope, false),
        scalaxb.toXML[nu.ndw.OpenlrLastLocationReferencePoint](__obj.openlrLastLocationReferencePoint, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLastLocationReferencePoint"), __scope, false),
        __obj.openlrBasePointLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrBasePointLocationExtension"), __scope, false) } getOrElse {Nil},
        __obj.openlrPointAlongLineExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPointAlongLineExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrPointLocationReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrPointLocationReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrPointLocationReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrPointLocationReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrGeoCoordinate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPoiWithAccessPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPointAlongLine")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPointLocationReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.OpenlrPointLocationReference(p1.headOption map { scalaxb.fromXML[nu.ndw.OpenlrGeoCoordinate](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.OpenlrPoiWithAccessPoint](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.OpenlrPointAlongLine](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrPointLocationReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrGeoCoordinate map { scalaxb.toXML[nu.ndw.OpenlrGeoCoordinate](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrGeoCoordinate"), __scope, false) } getOrElse {Nil},
        __obj.openlrPoiWithAccessPoint map { scalaxb.toXML[nu.ndw.OpenlrPoiWithAccessPoint](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPoiWithAccessPoint"), __scope, false) } getOrElse {Nil},
        __obj.openlrPointAlongLine map { scalaxb.toXML[nu.ndw.OpenlrPointAlongLine](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPointAlongLine"), __scope, false) } getOrElse {Nil},
        __obj.openlrPointLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPointLocationReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrPoiWithAccessPointFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrPoiWithAccessPoint] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrPoiWithAccessPoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrPoiWithAccessPoint] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrSideOfRoad")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrOrientation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPositiveOffset")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLocationReferencePoint")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLastLocationReferencePoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrBasePointLocationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrCoordinate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPoiWithAccessPointExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.OpenlrPoiWithAccessPoint(scalaxb.fromXML[nu.ndw.OpenlrSideOfRoadEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OpenlrOrientationEnum](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OpenlrLocationReferencePoint](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.OpenlrLastLocationReferencePoint](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.PointCoordinates](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrPoiWithAccessPoint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.OpenlrSideOfRoadEnum](__obj.openlrSideOfRoad, Some("http://datex2.eu/schema/2/2_0"), Some("openlrSideOfRoad"), __scope, false),
        scalaxb.toXML[nu.ndw.OpenlrOrientationEnum](__obj.openlrOrientation, Some("http://datex2.eu/schema/2/2_0"), Some("openlrOrientation"), __scope, false),
        __obj.openlrPositiveOffset map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPositiveOffset"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.OpenlrLocationReferencePoint](__obj.openlrLocationReferencePoint, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLocationReferencePoint"), __scope, false),
        scalaxb.toXML[nu.ndw.OpenlrLastLocationReferencePoint](__obj.openlrLastLocationReferencePoint, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLastLocationReferencePoint"), __scope, false),
        __obj.openlrBasePointLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrBasePointLocationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.PointCoordinates](__obj.openlrCoordinate, Some("http://datex2.eu/schema/2/2_0"), Some("openlrCoordinate"), __scope, false),
        __obj.openlrPoiWithAccessPointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPoiWithAccessPointExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrPolygonCornersFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrPolygonCorners] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrPolygonCorners")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrPolygonCorners] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrCoordinate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPolygonCornersExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.OpenlrPolygonCorners(p1 map { scalaxb.fromXML[nu.ndw.PointCoordinates](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrPolygonCorners, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrCoordinate flatMap { scalaxb.toXML[nu.ndw.PointCoordinates](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrCoordinate"), __scope, false) },
        __obj.openlrPolygonCornersExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPolygonCornersExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrPolygonLocationReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrPolygonLocationReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrPolygonLocationReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrPolygonLocationReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrAreaLocationReferenceExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPolygonCorners")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrPolygonLocationReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.OpenlrPolygonLocationReference(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OpenlrPolygonCorners](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrPolygonLocationReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrAreaLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrAreaLocationReferenceExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.OpenlrPolygonCorners](__obj.openlrPolygonCorners, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPolygonCorners"), __scope, false),
        __obj.openlrPolygonLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrPolygonLocationReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrRectangleFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrRectangle] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrRectangle")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrRectangle] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrLowerLeft")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrUpperRight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrRectangleExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.OpenlrRectangle(scalaxb.fromXML[nu.ndw.PointCoordinates](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.PointCoordinates](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrRectangle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.PointCoordinates](__obj.openlrLowerLeft, Some("http://datex2.eu/schema/2/2_0"), Some("openlrLowerLeft"), __scope, false),
        scalaxb.toXML[nu.ndw.PointCoordinates](__obj.openlrUpperRight, Some("http://datex2.eu/schema/2/2_0"), Some("openlrUpperRight"), __scope, false),
        __obj.openlrRectangleExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrRectangleExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_OpenlrRectangleLocationReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.OpenlrRectangleLocationReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OpenlrRectangleLocationReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OpenlrRectangleLocationReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrAreaLocationReferenceExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrRectangle")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openlrRectangleLocationReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.OpenlrRectangleLocationReference(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OpenlrRectangle](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OpenlrRectangleLocationReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.openlrAreaLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrAreaLocationReferenceExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.OpenlrRectangle](__obj.openlrRectangle, Some("http://datex2.eu/schema/2/2_0"), Some("openlrRectangle"), __scope, false),
        __obj.openlrRectangleLocationReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("openlrRectangleLocationReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_OpenlrSideOfRoadEnumFormat = new DefaultNundw_OpenlrSideOfRoadEnumFormat {}
  trait DefaultNundw_OpenlrSideOfRoadEnumFormat extends scalaxb.XMLFormat[nu.ndw.OpenlrSideOfRoadEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OpenlrSideOfRoadEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onRoadOrUnknown")) => nu.ndw.OnRoadOrUnknown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("right")) => nu.ndw.RightType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("left")) => nu.ndw.LeftType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("both")) => nu.ndw.BothValue3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OpenlrSideOfRoadEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OpenlrSideOfRoadEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_OperatingModeEnumFormat = new DefaultNundw_OperatingModeEnumFormat {}
  trait DefaultNundw_OperatingModeEnumFormat extends scalaxb.XMLFormat[nu.ndw.OperatingModeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OperatingModeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("operatingMode0")) => nu.ndw.OperatingMode0
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("operatingMode1")) => nu.ndw.OperatingMode1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("operatingMode2")) => nu.ndw.OperatingMode2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("operatingMode3")) => nu.ndw.OperatingMode3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OperatingModeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OperatingModeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_OperationStatusEnumFormat = new DefaultNundw_OperationStatusEnumFormat {}
  trait DefaultNundw_OperationStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.OperationStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OperationStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inOperation")) => nu.ndw.InOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("limitedOperation")) => nu.ndw.LimitedOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notInOperation")) => nu.ndw.NotInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notInOperationAbnormal")) => nu.ndw.NotInOperationAbnormal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("technicalDefect")) => nu.ndw.TechnicalDefect
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue36

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OperationStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OperationStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_OperatorActionableFormat extends scalaxb.XMLFormat[nu.ndw.OperatorActionable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OperatorActionable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("SignSetting")) => Right(scalaxb.fromXML[nu.ndw.SignSetting](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadsideAssistance")) => Right(scalaxb.fromXML[nu.ndw.RoadsideAssistance](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NetworkManagement")) => Right(scalaxb.fromXML[nu.ndw.NetworkManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WinterDrivingManagement")) => Right(scalaxb.fromXML[nu.ndw.WinterDrivingManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadOrCarriagewayOrLaneManagement")) => Right(scalaxb.fromXML[nu.ndw.RoadOrCarriagewayOrLaneManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ReroutingManagement")) => Right(scalaxb.fromXML[nu.ndw.ReroutingManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GeneralInstructionOrMessageToRoadUsers")) => Right(scalaxb.fromXML[nu.ndw.GeneralInstructionOrMessageToRoadUsers](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GeneralNetworkManagement")) => Right(scalaxb.fromXML[nu.ndw.GeneralNetworkManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("SpeedManagement")) => Right(scalaxb.fromXML[nu.ndw.SpeedManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Roadworks")) => Right(scalaxb.fromXML[nu.ndw.RoadworksType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("MaintenanceWorks")) => Right(scalaxb.fromXML[nu.ndw.MaintenanceWorks](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ConstructionWorks")) => Right(scalaxb.fromXML[nu.ndw.ConstructionWorks](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.OperatorAction](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.OperatorActionable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.SignSetting => scalaxb.toXML[nu.ndw.SignSetting](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.RoadsideAssistance => scalaxb.toXML[nu.ndw.RoadsideAssistance](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.NetworkManagement => scalaxb.toXML[nu.ndw.NetworkManagement](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.RoadworksType => scalaxb.toXML[nu.ndw.RoadworksType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OperatorAction => scalaxb.toXML[nu.ndw.OperatorAction](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_OperatorActionFormat extends scalaxb.ElemNameParser[nu.ndw.OperatorAction] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OperatorAction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OperatorAction] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      nu.ndw.OperatorAction(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.OperatorAction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.OperatorAction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_OperatorActionOriginEnumFormat = new DefaultNundw_OperatorActionOriginEnumFormat {}
  trait DefaultNundw_OperatorActionOriginEnumFormat extends scalaxb.XMLFormat[nu.ndw.OperatorActionOriginEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OperatorActionOriginEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("external")) => nu.ndw.External
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("internal")) => nu.ndw.Internal

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OperatorActionOriginEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OperatorActionOriginEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_OperatorActionStatusEnumFormat = new DefaultNundw_OperatorActionStatusEnumFormat {}
  trait DefaultNundw_OperatorActionStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.OperatorActionStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OperatorActionStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("requested")) => nu.ndw.Requested
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("approved")) => nu.ndw.Approved
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("beingImplemented")) => nu.ndw.BeingImplemented
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("implemented")) => nu.ndw.Implemented
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rejected")) => nu.ndw.Rejected
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("terminationRequested")) => nu.ndw.TerminationRequested
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("beingTerminated")) => nu.ndw.BeingTerminated

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OperatorActionStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OperatorActionStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_OverallPeriodFormat extends scalaxb.ElemNameParser[nu.ndw.OverallPeriod] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("OverallPeriod")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.OverallPeriod] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overallStartTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overallEndTime")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validPeriod")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "exceptionPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overallPeriodExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.OverallPeriod(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.Period](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.Period](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.OverallPeriod, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.overallStartTime, Some("http://datex2.eu/schema/2/2_0"), Some("overallStartTime"), __scope, false),
        __obj.overallEndTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("overallEndTime"), __scope, false) } getOrElse {Nil},
        __obj.validPeriod flatMap { scalaxb.toXML[nu.ndw.Period](_, Some("http://datex2.eu/schema/2/2_0"), Some("validPeriod"), __scope, false) },
        __obj.exceptionPeriod flatMap { scalaxb.toXML[nu.ndw.Period](_, Some("http://datex2.eu/schema/2/2_0"), Some("exceptionPeriod"), __scope, false) },
        __obj.overallPeriodExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("overallPeriodExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_OwnershipTypeEnumFormat = new DefaultNundw_OwnershipTypeEnumFormat {}
  trait DefaultNundw_OwnershipTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.OwnershipTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.OwnershipTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("public")) => nu.ndw.Public
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("private")) => nu.ndw.Private
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicPrivate")) => nu.ndw.PublicPrivate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("resident")) => nu.ndw.Resident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue15
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue28

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.OwnershipTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.OwnershipTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingAccessFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingAccess] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingAccess")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingAccess] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessCategory")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessEquipment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessibility")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "photoUrl")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessOnlyAssignedFor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessAssignedAmongOthers")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessProhibitedFor")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "primaryRoad")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "location")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openingTimes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAccessExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      nu.ndw.ParkingAccess(p1 map { scalaxb.fromXML[nu.ndw.AccessCategoryEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.AccessEquipmentEnum](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.AccessibilityEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[nu.ndw.Roadable](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.Location](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.OpeningTimes](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ParkingAccess, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ParkingAccess, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.accessCategory flatMap { scalaxb.toXML[nu.ndw.AccessCategoryEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessCategory"), __scope, false) },
        __obj.accessName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessName"), __scope, false) } getOrElse {Nil},
        __obj.accessEquipment flatMap { scalaxb.toXML[nu.ndw.AccessEquipmentEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessEquipment"), __scope, false) },
        __obj.accessibility flatMap { scalaxb.toXML[nu.ndw.AccessibilityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessibility"), __scope, false) },
        __obj.photoUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("photoUrl"), __scope, false) } getOrElse {Nil},
        __obj.accessOnlyAssignedFor map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessOnlyAssignedFor"), __scope, false) } getOrElse {Nil},
        __obj.accessAssignedAmongOthers map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessAssignedAmongOthers"), __scope, false) } getOrElse {Nil},
        __obj.accessProhibitedFor map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessProhibitedFor"), __scope, false) } getOrElse {Nil},
        __obj.primaryRoad flatMap { scalaxb.toXML[nu.ndw.Roadable](_, Some("http://datex2.eu/schema/2/2_0"), Some("primaryRoad"), __scope, false) },
        __obj.location map { scalaxb.toXML[nu.ndw.Location](_, Some("http://datex2.eu/schema/2/2_0"), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.openingTimes map { scalaxb.toXML[nu.ndw.OpeningTimes](_, Some("http://datex2.eu/schema/2/2_0"), Some("openingTimes"), __scope, false) } getOrElse {Nil},
        __obj.parkingAccessExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAccessExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ParkingAccessStatusFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingAccessStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingAccessStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingAccessStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessOpeningStatus")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessFault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAccessStatusExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.ParkingAccessStatus(scalaxb.fromXML[nu.ndw._ParkingAccessReference](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw.OpeningStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.ParkingFaultEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingAccessStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._ParkingAccessReference](__obj.accessReference, Some("http://datex2.eu/schema/2/2_0"), Some("accessReference"), __scope, false),
        __obj.accessOpeningStatus map { scalaxb.toXML[nu.ndw.OpeningStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessOpeningStatus"), __scope, false) } getOrElse {Nil},
        __obj.accessFault flatMap { scalaxb.toXML[nu.ndw.ParkingFaultEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessFault"), __scope, false) },
        __obj.parkingAccessStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAccessStatusExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ParkingAssignmentFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingAssignment] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingAssignment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingAssignment] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForUser")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingDuration")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCharacteristics")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "hazardousMaterials")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "timePeriodByHour")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPermit")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAssignmentExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.ParkingAssignment(p1 map { scalaxb.fromXML[nu.ndw.UserTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.ParkingDurationEnum](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.HazardousMaterialsType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.TimePeriodByHour](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[nu.ndw.ParkingPermit](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingAssignment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.applicableForUser flatMap { scalaxb.toXML[nu.ndw.UserTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForUser"), __scope, false) },
        __obj.parkingDuration flatMap { scalaxb.toXML[nu.ndw.ParkingDurationEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingDuration"), __scope, false) },
        __obj.vehicleCharacteristics flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCharacteristics"), __scope, false) },
        __obj.hazardousMaterials flatMap { scalaxb.toXML[nu.ndw.HazardousMaterialsType](_, Some("http://datex2.eu/schema/2/2_0"), Some("hazardousMaterials"), __scope, false) },
        __obj.timePeriodByHour flatMap { scalaxb.toXML[nu.ndw.TimePeriodByHour](_, Some("http://datex2.eu/schema/2/2_0"), Some("timePeriodByHour"), __scope, false) },
        __obj.parkingPermit flatMap { scalaxb.toXML[nu.ndw.ParkingPermit](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPermit"), __scope, false) },
        __obj.parkingAssignmentExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAssignmentExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingConditionsEnumFormat = new DefaultNundw_ParkingConditionsEnumFormat {}
  trait DefaultNundw_ParkingConditionsEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingConditionsEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingConditionsEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("normalParkingConditionsSuspended")) => nu.ndw.NormalParkingConditionsSuspended
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("specialParkingConditionsInForce")) => nu.ndw.SpecialParkingConditionsInForce
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue27

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingConditionsEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingConditionsEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ParkingDurationEnumFormat = new DefaultNundw_ParkingDurationEnumFormat {}
  trait DefaultNundw_ParkingDurationEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingDurationEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingDurationEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pickUpDropOff")) => nu.ndw.PickUpDropOff
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shortTerm")) => nu.ndw.ShortTerm
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shortTerm24hours")) => nu.ndw.ShortTerm24hours
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shortTerm48hours")) => nu.ndw.ShortTerm48hours
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shortTerm72hours")) => nu.ndw.ShortTerm72hours
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shortTerm96hours")) => nu.ndw.ShortTerm96hours
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("longTerm")) => nu.ndw.LongTerm
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue37
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue65

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingDurationEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingDurationEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingEquipmentOrServiceFacilityFormat extends scalaxb.XMLFormat[nu.ndw.ParkingEquipmentOrServiceFacility] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingEquipmentOrServiceFacility] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Equipment")) => Right(scalaxb.fromXML[nu.ndw.Equipment](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ServiceFacility")) => Right(scalaxb.fromXML[nu.ndw.ServiceFacility](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.ParkingEquipmentOrServiceFacility, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.Equipment => scalaxb.toXML[nu.ndw.Equipment](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ServiceFacility => scalaxb.toXML[nu.ndw.ServiceFacility](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_ParkingEquipmentOrServiceFacilityStatusFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingEquipmentOrServiceFacilityStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingEquipmentOrServiceFacilityStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingEquipmentOrServiceFacilityStatus] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfEquipmentOrServiceFacilityOverride")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfSubitemsOverride")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vacantEquipmentOrServiceFacilitySubitems")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "serviceFacilityOpeningStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "equipmentOperationStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacilityStatusExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.ParkingEquipmentOrServiceFacilityStatus(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.OpeningStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.OperationStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingEquipmentOrServiceFacilityStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.numberOfEquipmentOrServiceFacilityOverride map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfEquipmentOrServiceFacilityOverride"), __scope, false) } getOrElse {Nil},
        __obj.numberOfSubitemsOverride map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfSubitemsOverride"), __scope, false) } getOrElse {Nil},
        __obj.vacantEquipmentOrServiceFacilitySubitems map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("vacantEquipmentOrServiceFacilitySubitems"), __scope, false) } getOrElse {Nil},
        __obj.serviceFacilityOpeningStatus map { scalaxb.toXML[nu.ndw.OpeningStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("serviceFacilityOpeningStatus"), __scope, false) } getOrElse {Nil},
        __obj.equipmentOperationStatus map { scalaxb.toXML[nu.ndw.OperationStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("equipmentOperationStatus"), __scope, false) } getOrElse {Nil},
        __obj.parkingEquipmentOrServiceFacilityStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacilityStatusExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingFaultEnumFormat = new DefaultNundw_ParkingFaultEnumFormat {}
  trait DefaultNundw_ParkingFaultEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingFaultEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingFaultEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("communicationsFailure")) => nu.ndw.CommunicationsFailureValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("barrierMalfunction")) => nu.ndw.BarrierMalfunction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("entranceExitObstructed")) => nu.ndw.EntranceExitObstructed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("erroneousOccupancyInformation")) => nu.ndw.ErroneousOccupancyInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("erroneousOccupancyDisplayed")) => nu.ndw.ErroneousOccupancyDisplayed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("paymentMachinesInoperative")) => nu.ndw.PaymentMachinesInoperative
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reservationServiceOutOfOrder")) => nu.ndw.ReservationServiceOutOfOrder
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noParkingInformationAvailable")) => nu.ndw.NoParkingInformationAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecified")) => nu.ndw.UnspecifiedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue14
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue26

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingFaultEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingFaultEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ParkingLayoutEnumFormat = new DefaultNundw_ParkingLayoutEnumFormat {}
  trait DefaultNundw_ParkingLayoutEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingLayoutEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingLayoutEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("multiStorey")) => nu.ndw.MultiStoreyValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("singleLevel")) => nu.ndw.SingleLevelValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("underground")) => nu.ndw.UndergroundValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("undergroundAndMultistorey")) => nu.ndw.UndergroundAndMultistorey
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("automatedParkingGarage")) => nu.ndw.AutomatedParkingGarage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("openSpace")) => nu.ndw.OpenSpace
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("covered")) => nu.ndw.Covered
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nested")) => nu.ndw.Nested
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("field")) => nu.ndw.Field
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue38
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue66

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingLayoutEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingLayoutEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ParkingModeEnumFormat = new DefaultNundw_ParkingModeEnumFormat {}
  trait DefaultNundw_ParkingModeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingModeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingModeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("perpendicularParking")) => nu.ndw.PerpendicularParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parallelParking")) => nu.ndw.ParallelParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("echelonParking")) => nu.ndw.EchelonParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkingOnOppositeSideOfRoad")) => nu.ndw.ParkingOnOppositeSideOfRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue25

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingModeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingModeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingOccupancyableFormat extends scalaxb.XMLFormat[nu.ndw.ParkingOccupancyable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingOccupancyable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GroupOfParkingSpacesStatus")) => Right(scalaxb.fromXML[nu.ndw.GroupOfParkingSpacesStatus](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.ParkingOccupancy](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.ParkingOccupancyable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.GroupOfParkingSpacesStatus => scalaxb.toXML[nu.ndw.GroupOfParkingSpacesStatus](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ParkingOccupancy => scalaxb.toXML[nu.ndw.ParkingOccupancy](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_ParkingOccupancyFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingOccupancy] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingOccupancy")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingOccupancy] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfSpacesOverride")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVacantSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVacantSpacesLowerThan")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVacantSpacesHigherThan")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVacantSpacesGraded")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfOccupiedSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancy")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancyGraded")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancyTrend")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNotAllowed")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCountAndRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancyExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      nu.ndw.ParkingOccupancy(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.ParkingVacantSpacesEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.ParkingOccupancyEnum](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.ParkingOccupancyTrendEnum](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[nu.ndw.VehicleCountAndRate](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingOccupancy, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingNumberOfSpacesOverride map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfSpacesOverride"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVacantSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVacantSpaces"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVacantSpacesLowerThan map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVacantSpacesLowerThan"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVacantSpacesHigherThan map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVacantSpacesHigherThan"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVacantSpacesGraded map { scalaxb.toXML[nu.ndw.ParkingVacantSpacesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVacantSpacesGraded"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfOccupiedSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfOccupiedSpaces"), __scope, false) } getOrElse {Nil},
        __obj.parkingNumberOfVehicles map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfVehicles"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupancy map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancy"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupancyGraded map { scalaxb.toXML[nu.ndw.ParkingOccupancyEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancyGraded"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupancyTrend map { scalaxb.toXML[nu.ndw.ParkingOccupancyTrendEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancyTrend"), __scope, false) } getOrElse {Nil},
        __obj.parkingNotAllowed map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNotAllowed"), __scope, false) } getOrElse {Nil},
        __obj.vehicleCountAndRate flatMap { scalaxb.toXML[nu.ndw.VehicleCountAndRate](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCountAndRate"), __scope, false) },
        __obj.parkingOccupancyExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancyExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingOccupancyEnumFormat = new DefaultNundw_ParkingOccupancyEnumFormat {}
  trait DefaultNundw_ParkingOccupancyEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingOccupancyEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingOccupancyEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("expectCarParkToBeFull")) => nu.ndw.ExpectCarParkToBeFull
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("percentage10")) => nu.ndw.Percentage10
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("percentage20")) => nu.ndw.Percentage20
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("percentage30")) => nu.ndw.Percentage30
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("percentage40")) => nu.ndw.Percentage40
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("percentage50")) => nu.ndw.Percentage50
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("percentage60")) => nu.ndw.Percentage60
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("percentage70")) => nu.ndw.Percentage70
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("percentage80")) => nu.ndw.Percentage80
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("percentage90")) => nu.ndw.Percentage90
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("full")) => nu.ndw.FullValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue13

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingOccupancyEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingOccupancyEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ParkingOccupancyTrendEnumFormat = new DefaultNundw_ParkingOccupancyTrendEnumFormat {}
  trait DefaultNundw_ParkingOccupancyTrendEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingOccupancyTrendEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingOccupancyTrendEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("decreasing")) => nu.ndw.Decreasing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("increasing")) => nu.ndw.Increasing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stable")) => nu.ndw.Stable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("increasingQuickly")) => nu.ndw.IncreasingQuickly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("increasingSlowly")) => nu.ndw.IncreasingSlowly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("decreasingQuickly")) => nu.ndw.DecreasingQuickly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("decreasingSlowly")) => nu.ndw.DecreasingSlowly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue39
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue67

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingOccupancyTrendEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingOccupancyTrendEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ParkingPaymentModeEnumFormat = new DefaultNundw_ParkingPaymentModeEnumFormat {}
  trait DefaultNundw_ParkingPaymentModeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingPaymentModeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingPaymentModeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("payAndDisplay")) => nu.ndw.PayAndDisplay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("payManualAtExitBooth")) => nu.ndw.PayManualAtExitBooth
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("payPriorToExit")) => nu.ndw.PayPriorToExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("payByPrepaidToken")) => nu.ndw.PayByPrepaidToken
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("payAndExit")) => nu.ndw.PayAndExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue24

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingPaymentModeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingPaymentModeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingPermitFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingPermit] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingPermit")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingPermit] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPermitType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPermitScheme")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPermitIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPermitExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.ParkingPermit(scalaxb.fromXML[nu.ndw.PermitTypeEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingPermit, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.PermitTypeEnum](__obj.parkingPermitType, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPermitType"), __scope, false),
        __obj.parkingPermitScheme map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPermitScheme"), __scope, false) } getOrElse {Nil},
        __obj.parkingPermitIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPermitIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.parkingPermitExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPermitExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ParkingRecordFormat extends scalaxb.XMLFormat[nu.ndw.ParkingRecord] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingRecord] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ParkingSite")) => Right(scalaxb.fromXML[nu.ndw.ParkingSite](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("UrbanParkingSite")) => Right(scalaxb.fromXML[nu.ndw.UrbanParkingSite](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("SpecialLocationParkingSite")) => Right(scalaxb.fromXML[nu.ndw.SpecialLocationParkingSite](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("InterUrbanParkingSite")) => Right(scalaxb.fromXML[nu.ndw.InterUrbanParkingSite](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GroupOfParkingSites")) => Right(scalaxb.fromXML[nu.ndw.GroupOfParkingSites](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.ParkingRecord, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.ParkingSite => scalaxb.toXML[nu.ndw.ParkingSite](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.GroupOfParkingSites => scalaxb.toXML[nu.ndw.GroupOfParkingSites](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_ParkingRecordStatusFormat extends scalaxb.XMLFormat[nu.ndw.ParkingRecordStatus] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingRecordStatus] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ParkingSiteStatus")) => Right(scalaxb.fromXML[nu.ndw.ParkingSiteStatus](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GroupOfParkingSitesStatus")) => Right(scalaxb.fromXML[nu.ndw.GroupOfParkingSitesStatus](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.ParkingRecordStatus, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.ParkingSiteStatus => scalaxb.toXML[nu.ndw.ParkingSiteStatus](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.GroupOfParkingSitesStatus => scalaxb.toXML[nu.ndw.GroupOfParkingSitesStatus](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_ParkingRouteFormat extends scalaxb.XMLFormat[nu.ndw.ParkingRoute] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingRoute] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ParkingRouteByReference")) => Right(scalaxb.fromXML[nu.ndw.ParkingRouteByReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ParkingRouteDetails")) => Right(scalaxb.fromXML[nu.ndw.ParkingRouteDetails](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.ParkingRoute, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.ParkingRouteByReference => scalaxb.toXML[nu.ndw.ParkingRouteByReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ParkingRouteDetails => scalaxb.toXML[nu.ndw.ParkingRouteDetails](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_ParkingRouteByReferenceFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingRouteByReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingRouteByReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingRouteByReference] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteColour")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteByReferenceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.ParkingRouteByReference(p1.headOption map { scalaxb.fromXML[nu.ndw.RGBColour](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw._ParkingRouteDetailsVersionedReference](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingRouteByReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingRouteColour map { scalaxb.toXML[nu.ndw.RGBColour](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteColour"), __scope, false) } getOrElse {Nil},
        __obj.parkingRouteExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw._ParkingRouteDetailsVersionedReference](__obj.parkingRouteReference, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteReference"), __scope, false),
        __obj.parkingRouteByReferenceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteByReferenceExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ParkingRouteDetailsFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingRouteDetails] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingRouteDetails")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingRouteDetails] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteColour")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dynamicRouteManagement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteIconIndex")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteDirection")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteDirection2")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteDetailsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      nu.ndw.ParkingRouteDetails(p1.headOption map { scalaxb.fromXML[nu.ndw.RGBColour](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.ParkingRouteTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.ParkingRouteDirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ParkingRouteDetails, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ParkingRouteDetails, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingRouteColour map { scalaxb.toXML[nu.ndw.RGBColour](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteColour"), __scope, false) } getOrElse {Nil},
        __obj.parkingRouteExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteExtension"), __scope, false) } getOrElse {Nil},
        __obj.parkingRouteName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteName"), __scope, false) } getOrElse {Nil},
        __obj.parkingRouteType map { scalaxb.toXML[nu.ndw.ParkingRouteTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteType"), __scope, false) } getOrElse {Nil},
        __obj.dynamicRouteManagement map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dynamicRouteManagement"), __scope, false) } getOrElse {Nil},
        __obj.parkingRouteIconIndex map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteIconIndex"), __scope, false) } getOrElse {Nil},
        __obj.parkingRouteDirection map { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteDirection"), __scope, false) } getOrElse {Nil},
        __obj.parkingRouteDirection2 map { scalaxb.toXML[nu.ndw.ParkingRouteDirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteDirection2"), __scope, false) } getOrElse {Nil},
        __obj.groupOfLocations map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false) } getOrElse {Nil},
        __obj.parkingRouteDetailsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteDetailsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingRouteDirectionEnumFormat = new DefaultNundw_ParkingRouteDirectionEnumFormat {}
  trait DefaultNundw_ParkingRouteDirectionEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingRouteDirectionEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingRouteDirectionEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("towardsParkingSite")) => nu.ndw.TowardsParkingSite
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("awayFromParkingSite")) => nu.ndw.AwayFromParkingSite

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingRouteDirectionEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingRouteDirectionEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingRouteStatusFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingRouteStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingRouteStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingRouteStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteActive")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteStatusExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.ParkingRouteStatus(scalaxb.fromXML[nu.ndw._ParkingRouteDetailsVersionedReference](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingRouteStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._ParkingRouteDetailsVersionedReference](__obj.parkingRouteReference, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteReference"), __scope, false),
        scalaxb.toXML[Boolean](__obj.parkingRouteActive, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteActive"), __scope, false),
        __obj.parkingRouteStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteStatusExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingRouteTypeEnumFormat = new DefaultNundw_ParkingRouteTypeEnumFormat {}
  trait DefaultNundw_ParkingRouteTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingRouteTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingRouteTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pedestrian")) => nu.ndw.PedestrianValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bicycle")) => nu.ndw.Bicycle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lorry")) => nu.ndw.Lorry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue68

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingRouteTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingRouteTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ParkingSecurityEnumFormat = new DefaultNundw_ParkingSecurityEnumFormat {}
  trait DefaultNundw_ParkingSecurityEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingSecurityEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingSecurityEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("socialControl")) => nu.ndw.SocialControl
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("securityStaff")) => nu.ndw.SecurityStaff
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("externalSecurity")) => nu.ndw.ExternalSecurity
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cctv")) => nu.ndw.Cctv
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dog")) => nu.ndw.Dog
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("guard24hours")) => nu.ndw.Guard24hours
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lighting")) => nu.ndw.Lighting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("floodLight")) => nu.ndw.FloodLight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fences")) => nu.ndw.Fences
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("areaSeperatedFromSurroundings")) => nu.ndw.AreaSeperatedFromSurroundings
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => nu.ndw.NoneTypeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue12
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue23

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingSecurityEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingSecurityEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingSiteFormat extends scalaxb.XMLFormat[nu.ndw.ParkingSite] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingSite] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("UrbanParkingSite")) => Right(scalaxb.fromXML[nu.ndw.UrbanParkingSite](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("SpecialLocationParkingSite")) => Right(scalaxb.fromXML[nu.ndw.SpecialLocationParkingSite](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("InterUrbanParkingSite")) => Right(scalaxb.fromXML[nu.ndw.InterUrbanParkingSite](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.ParkingSite, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.UrbanParkingSite => scalaxb.toXML[nu.ndw.UrbanParkingSite](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.SpecialLocationParkingSite => scalaxb.toXML[nu.ndw.SpecialLocationParkingSite](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.InterUrbanParkingSite => scalaxb.toXML[nu.ndw.InterUrbanParkingSite](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildNundw_ParkingSiteOvercrowdingStatusEnumFormat = new DefaultNundw_ParkingSiteOvercrowdingStatusEnumFormat {}
  trait DefaultNundw_ParkingSiteOvercrowdingStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingSiteOvercrowdingStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingSiteOvercrowdingStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overcrowding")) => nu.ndw.Overcrowding
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noOvercrowding")) => nu.ndw.NoOvercrowding
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overcrowdingLevel1")) => nu.ndw.OvercrowdingLevel1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overcrowdingLevel2")) => nu.ndw.OvercrowdingLevel2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue11
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue22

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingSiteOvercrowdingStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingSiteOvercrowdingStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingSiteStatusFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingSiteStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingSiteStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingSiteStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusOriginTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingQueueingTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingConditions")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "blurredAvailability")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingFault")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "winterEquipmentManagementType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceStatus")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupancy")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpacesStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusValidity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overrideParkingThresholds")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacilityStatus")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenarioStatus")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAccessStatus")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRouteStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordStatusExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteOpeningStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteOvercrowdingStatus")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteFullAtFloor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteStatusExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      nu.ndw.ParkingSiteStatus(scalaxb.fromXML[nu.ndw._ParkingRecordVersionedReference](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.ParkingConditionsEnum](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[nu.ndw.ParkingFaultEnum](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[nu.ndw.WinterEquipmentManagementTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ParkingOccupancyable](p10, scalaxb.ElemName(node) :: stack),
        p11 map { scalaxb.fromXML[nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.ParkingStatusValidity](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw.ParkingThresholds](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[nu.ndw.ParkingAccessStatus](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[nu.ndw.ParkingRouteStatus](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.ParkingSiteStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.OpeningStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.ParkingSiteOvercrowdingStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingSiteStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._ParkingRecordVersionedReference](__obj.parkingRecordReference, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordReference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.parkingStatusOriginTime, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusOriginTime"), __scope, false),
        __obj.parkingStatusDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusDescription"), __scope, false) } getOrElse {Nil},
        __obj.parkingQueueingTime map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingQueueingTime"), __scope, false) } getOrElse {Nil},
        __obj.parkingConditions map { scalaxb.toXML[nu.ndw.ParkingConditionsEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingConditions"), __scope, false) } getOrElse {Nil},
        __obj.blurredAvailability flatMap { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("blurredAvailability"), __scope, false) },
        __obj.parkingFault flatMap { scalaxb.toXML[nu.ndw.ParkingFaultEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingFault"), __scope, false) },
        __obj.winterEquipmentManagementType flatMap { scalaxb.toXML[nu.ndw.WinterEquipmentManagementTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("winterEquipmentManagementType"), __scope, false) },
        __obj.parkingSpaceStatus flatMap { scalaxb.toXML[nu.ndw._ParkingRecordStatusParkingSpaceIndexParkingSpaceStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceStatus"), __scope, false) },
        scalaxb.toXML[nu.ndw.ParkingOccupancyable](__obj.parkingOccupancy, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupancy"), __scope, false),
        __obj.groupOfParkingSpacesStatus flatMap { scalaxb.toXML[nu.ndw._ParkingRecordStatusGroupIndexGroupOfParkingSpacesStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpacesStatus"), __scope, false) },
        __obj.parkingStatusValidity map { scalaxb.toXML[nu.ndw.ParkingStatusValidity](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusValidity"), __scope, false) } getOrElse {Nil},
        __obj.overrideParkingThresholds map { scalaxb.toXML[nu.ndw.ParkingThresholds](_, Some("http://datex2.eu/schema/2/2_0"), Some("overrideParkingThresholds"), __scope, false) } getOrElse {Nil},
        __obj.parkingEquipmentOrServiceFacilityStatus flatMap { scalaxb.toXML[nu.ndw._ParkingRecordStatusEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacilityStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacilityStatus"), __scope, false) },
        __obj.parkingUsageScenarioStatus flatMap { scalaxb.toXML[nu.ndw._ParkingRecordStatusScenarioIndexParkingUsageScenarioStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenarioStatus"), __scope, false) },
        __obj.parkingAccessStatus flatMap { scalaxb.toXML[nu.ndw.ParkingAccessStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAccessStatus"), __scope, false) },
        __obj.parkingRouteStatus flatMap { scalaxb.toXML[nu.ndw.ParkingRouteStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRouteStatus"), __scope, false) },
        __obj.parkingRecordStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordStatusExtension"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteStatus map { scalaxb.toXML[nu.ndw.ParkingSiteStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteStatus"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteOpeningStatus map { scalaxb.toXML[nu.ndw.OpeningStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteOpeningStatus"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteOvercrowdingStatus map { scalaxb.toXML[nu.ndw.ParkingSiteOvercrowdingStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteOvercrowdingStatus"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteFullAtFloor flatMap { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteFullAtFloor"), __scope, false) },
        __obj.parkingSiteStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteStatusExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingSiteStatusEnumFormat = new DefaultNundw_ParkingSiteStatusEnumFormat {}
  trait DefaultNundw_ParkingSiteStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingSiteStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingSiteStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("spacesAvailable")) => nu.ndw.SpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("almostFull")) => nu.ndw.AlmostFull
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fullAtEntrance")) => nu.ndw.FullAtEntrance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("full")) => nu.ndw.Full
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue10
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue21

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingSiteStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingSiteStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingSpaceFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingSpace] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingSpace")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingSpace] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceOrGroupIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingFloorOrLevel")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessibility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceAccessibility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpacePhysics")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingMode")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingReservation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumParkingDuration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceFromPrimaryRoad")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupanyDetectionType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSecurity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dedicatedAccess")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "onlyAssignedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "assignedParkingAmongOthers")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "prohibitedParking")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenario")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceBasicsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "identicalToParkingSpace")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "location")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      nu.ndw.ParkingSpace(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.AccessibilityEnum](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.ParkingSpaceAccessibilityEnum](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.ParkingSpacePhysicsEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ParkingModeEnum](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.ReservationTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.OccupancyDetectionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[nu.ndw.ParkingSecurityEnum](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[nu.ndw.DedicatedAccess](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.Location](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.Dimension](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingSpace, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingSpaceOrGroupIdentifier map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceOrGroupIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.parkingFloorOrLevel map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingFloorOrLevel"), __scope, false) } getOrElse {Nil},
        __obj.accessibility flatMap { scalaxb.toXML[nu.ndw.AccessibilityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessibility"), __scope, false) },
        __obj.parkingSpaceAccessibility flatMap { scalaxb.toXML[nu.ndw.ParkingSpaceAccessibilityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceAccessibility"), __scope, false) },
        __obj.parkingSpacePhysics flatMap { scalaxb.toXML[nu.ndw.ParkingSpacePhysicsEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpacePhysics"), __scope, false) },
        __obj.parkingMode map { scalaxb.toXML[nu.ndw.ParkingModeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingMode"), __scope, false) } getOrElse {Nil},
        __obj.parkingReservation map { scalaxb.toXML[nu.ndw.ReservationTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingReservation"), __scope, false) } getOrElse {Nil},
        __obj.maximumParkingDuration map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumParkingDuration"), __scope, false) } getOrElse {Nil},
        __obj.distanceFromPrimaryRoad map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceFromPrimaryRoad"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupanyDetectionType flatMap { scalaxb.toXML[nu.ndw.OccupancyDetectionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupanyDetectionType"), __scope, false) },
        __obj.parkingSecurity flatMap { scalaxb.toXML[nu.ndw.ParkingSecurityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSecurity"), __scope, false) },
        __obj.dedicatedAccess flatMap { scalaxb.toXML[nu.ndw.DedicatedAccess](_, Some("http://datex2.eu/schema/2/2_0"), Some("dedicatedAccess"), __scope, false) },
        __obj.onlyAssignedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("onlyAssignedParking"), __scope, false) } getOrElse {Nil},
        __obj.assignedParkingAmongOthers map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("assignedParkingAmongOthers"), __scope, false) } getOrElse {Nil},
        __obj.prohibitedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("prohibitedParking"), __scope, false) } getOrElse {Nil},
        __obj.parkingEquipmentOrServiceFacility flatMap { scalaxb.toXML[nu.ndw._ParkingSpaceBasicsEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacility"), __scope, false) },
        __obj.parkingUsageScenario flatMap { scalaxb.toXML[nu.ndw._ParkingSpaceBasicsScenarioIndexParkingUsageScenario](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenario"), __scope, false) },
        __obj.parkingSpaceBasicsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceBasicsExtension"), __scope, false) } getOrElse {Nil},
        __obj.identicalToParkingSpace flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("identicalToParkingSpace"), __scope, false) },
        __obj.location map { scalaxb.toXML[nu.ndw.Location](_, Some("http://datex2.eu/schema/2/2_0"), Some("location"), __scope, false) } getOrElse {Nil},
        __obj.parkingSpaceDimension map { scalaxb.toXML[nu.ndw.Dimension](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceDimension"), __scope, false) } getOrElse {Nil},
        __obj.parkingSpaceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingSpaceAccessibilityEnumFormat = new DefaultNundw_ParkingSpaceAccessibilityEnumFormat {}
  trait DefaultNundw_ParkingSpaceAccessibilityEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingSpaceAccessibilityEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingSpaceAccessibilityEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extraSpaceLeftSide")) => nu.ndw.ExtraSpaceLeftSide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extraSpaceRightSide")) => nu.ndw.ExtraSpaceRightSide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nearbyPedestrianExit")) => nu.ndw.NearbyPedestrianExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bordersMarked")) => nu.ndw.BordersMarked
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue20

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingSpaceAccessibilityEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingSpaceAccessibilityEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingSpaceBasicsFormat extends scalaxb.XMLFormat[nu.ndw.ParkingSpaceBasics] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingSpaceBasics] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ParkingSpace")) => Right(scalaxb.fromXML[nu.ndw.ParkingSpace](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GroupOfParkingSpaces")) => Right(scalaxb.fromXML[nu.ndw.GroupOfParkingSpaces](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.ParkingSpaceBasics, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.ParkingSpace => scalaxb.toXML[nu.ndw.ParkingSpace](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.GroupOfParkingSpaces => scalaxb.toXML[nu.ndw.GroupOfParkingSpaces](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildNundw_ParkingSpacePhysicsEnumFormat = new DefaultNundw_ParkingSpacePhysicsEnumFormat {}
  trait DefaultNundw_ParkingSpacePhysicsEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingSpacePhysicsEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingSpacePhysicsEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("driveThrough")) => nu.ndw.DriveThrough
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("openAir")) => nu.ndw.OpenAir

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingSpacePhysicsEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingSpacePhysicsEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingSpaceStatusFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingSpaceStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingSpaceStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingSpaceStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceOccupied")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceClosed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceDeclarationValidNow")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lastCalibration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceStatusExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.ParkingSpaceStatus(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingSpaceStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.parkingSpaceOccupied, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceOccupied"), __scope, false),
        __obj.parkingSpaceClosed map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceClosed"), __scope, false) } getOrElse {Nil},
        __obj.parkingSpaceDeclarationValidNow map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceDeclarationValidNow"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.lastCalibration map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("lastCalibration"), __scope, false) } getOrElse {Nil},
        __obj.parkingSpaceStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceStatusExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingSpecialLocationEnumFormat = new DefaultNundw_ParkingSpecialLocationEnumFormat {}
  trait DefaultNundw_ParkingSpecialLocationEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingSpecialLocationEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingSpecialLocationEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("airportTerminal")) => nu.ndw.AirportTerminal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exhibitonCentre")) => nu.ndw.ExhibitonCentre
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shoppingCentre")) => nu.ndw.ShoppingCentre
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("specificFacility")) => nu.ndw.SpecificFacility
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trainStation")) => nu.ndw.TrainStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("campground")) => nu.ndw.Campground
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("themePark")) => nu.ndw.ThemePark
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ferryTerminal")) => nu.ndw.FerryTerminal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleOnRailTerminal")) => nu.ndw.VehicleOnRailTerminal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("coachStation")) => nu.ndw.CoachStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cableCarStation")) => nu.ndw.CableCarStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicTransportStation")) => nu.ndw.PublicTransportStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("market")) => nu.ndw.Market
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("religiousCentre")) => nu.ndw.ReligiousCentre
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("conventionCentre")) => nu.ndw.ConventionCentre
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cinema")) => nu.ndw.Cinema
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("skilift")) => nu.ndw.Skilift
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue9
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue19

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingSpecialLocationEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingSpecialLocationEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingStandardsAndSecurityFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingStandardsAndSecurity] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingStandardsAndSecurity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingStandardsAndSecurity] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "labelSecurityLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "labelServiceLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "labelSecurityLevelSelfAssessment")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "labelServiceLevelSelfAssessment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSecurity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAdditionalSecurity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSupervision")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSecurityNationalClassification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "certifiedSecureParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dateOfCertification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStandardsAndSecurityExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      nu.ndw.ParkingStandardsAndSecurity(p1.headOption map { scalaxb.fromXML[nu.ndw.LABELSecurityLevelEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.LABELServiceLevelEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.LABELSecurityLevelEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.LABELServiceLevelEnum](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.ParkingSecurityEnum](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[nu.ndw.ParkingSupervisionEnum](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingStandardsAndSecurity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.labelSecurityLevel map { scalaxb.toXML[nu.ndw.LABELSecurityLevelEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("labelSecurityLevel"), __scope, false) } getOrElse {Nil},
        __obj.labelServiceLevel map { scalaxb.toXML[nu.ndw.LABELServiceLevelEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("labelServiceLevel"), __scope, false) } getOrElse {Nil},
        __obj.labelSecurityLevelSelfAssessment map { scalaxb.toXML[nu.ndw.LABELSecurityLevelEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("labelSecurityLevelSelfAssessment"), __scope, false) } getOrElse {Nil},
        __obj.labelServiceLevelSelfAssessment map { scalaxb.toXML[nu.ndw.LABELServiceLevelEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("labelServiceLevelSelfAssessment"), __scope, false) } getOrElse {Nil},
        __obj.parkingSecurity flatMap { scalaxb.toXML[nu.ndw.ParkingSecurityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSecurity"), __scope, false) },
        __obj.parkingAdditionalSecurity flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAdditionalSecurity"), __scope, false) },
        __obj.parkingSupervision flatMap { scalaxb.toXML[nu.ndw.ParkingSupervisionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSupervision"), __scope, false) },
        __obj.parkingSecurityNationalClassification map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSecurityNationalClassification"), __scope, false) } getOrElse {Nil},
        __obj.certifiedSecureParking map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("certifiedSecureParking"), __scope, false) } getOrElse {Nil},
        __obj.dateOfCertification map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("dateOfCertification"), __scope, false) } getOrElse {Nil},
        __obj.parkingStandardsAndSecurityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStandardsAndSecurityExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ParkingStatusColourMappingFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingStatusColourMapping] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingStatusColourMapping")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingStatusColourMapping] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteStatus")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "rgbColour")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusColourMappingExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.ParkingStatusColourMapping(scalaxb.fromXML[nu.ndw.ParkingSiteStatusEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.RGBColour](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingStatusColourMapping, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.ParkingSiteStatusEnum](__obj.parkingSiteStatus, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteStatus"), __scope, false),
        scalaxb.toXML[nu.ndw.RGBColour](__obj.rgbColour, Some("http://datex2.eu/schema/2/2_0"), Some("rgbColour"), __scope, false),
        __obj.parkingStatusColourMappingExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusColourMappingExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ParkingStatusPublicationFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingStatusPublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingStatusPublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingStatusPublication] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingTableReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordStatus")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.ParkingStatusPublication(p1 map { scalaxb.fromXML[nu.ndw._ParkingTableVersionedReference](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.HeaderInformation](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.ParkingRecordStatus](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingStatusPublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingTableReference flatMap { scalaxb.toXML[nu.ndw._ParkingTableVersionedReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingTableReference"), __scope, false) },
        __obj.headerInformation map { scalaxb.toXML[nu.ndw.HeaderInformation](_, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false) } getOrElse {Nil},
        __obj.parkingRecordStatus flatMap { scalaxb.toXML[nu.ndw.ParkingRecordStatus](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordStatus"), __scope, false) })

  }

  trait DefaultNundw_ParkingStatusValidityFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingStatusValidity] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingStatusValidity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingStatusValidity] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusTimeOffsetToOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validityTimeSpecification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusValidityExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.ParkingStatusValidity(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.OverallPeriod](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingStatusValidity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingStatusTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusTime"), __scope, false) } getOrElse {Nil},
        __obj.parkingStatusTimeOffsetToOrigin map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusTimeOffsetToOrigin"), __scope, false) } getOrElse {Nil},
        __obj.validityTimeSpecification map { scalaxb.toXML[nu.ndw.OverallPeriod](_, Some("http://datex2.eu/schema/2/2_0"), Some("validityTimeSpecification"), __scope, false) } getOrElse {Nil},
        __obj.parkingStatusValidityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusValidityExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingSupervisionEnumFormat = new DefaultNundw_ParkingSupervisionEnumFormat {}
  trait DefaultNundw_ParkingSupervisionEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingSupervisionEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingSupervisionEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("remote")) => nu.ndw.Remote
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onSite")) => nu.ndw.OnSite
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("controlCentreOnSite")) => nu.ndw.ControlCentreOnSite
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("controlCentreOffSite")) => nu.ndw.ControlCentreOffSite
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("patrol")) => nu.ndw.Patrol
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => nu.ndw.NoneTypeValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue40
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue69

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingSupervisionEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingSupervisionEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingTableFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingTable] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingTable")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingTable] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingTableName")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingTableVersionTime")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecord")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingTableExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.ParkingTable(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[nu.ndw.ParkingRecord](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ParkingTable, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ParkingTable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingTableName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingTableName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.parkingTableVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("parkingTableVersionTime"), __scope, false),
        __obj.parkingRecord flatMap { scalaxb.toXML[nu.ndw.ParkingRecord](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecord"), __scope, false) },
        __obj.parkingTableExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingTableExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ParkingTablePublicationFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingTablePublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingTablePublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingTablePublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingTable")) ^^
      { case p1 ~ p2 =>
      nu.ndw.ParkingTablePublication(p1.headOption map { scalaxb.fromXML[nu.ndw.HeaderInformation](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.ParkingTable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingTablePublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.headerInformation map { scalaxb.toXML[nu.ndw.HeaderInformation](_, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false) } getOrElse {Nil},
        __obj.parkingTable flatMap { scalaxb.toXML[nu.ndw.ParkingTable](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingTable"), __scope, false) })

  }

  trait DefaultNundw_ParkingThresholdsFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingThresholds] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingThresholds")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingThresholds] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "almostFullDecreasing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "almostFullIncreasing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "entranceFull")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "fullDecreasing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "fullIncreasing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overcrowding")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overcrowdingLevel1")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overcrowdingLevel2")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingLastMaximumOccupancy")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStatusColourMapping")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingThresholdsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      nu.ndw.ParkingThresholds(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.ParkingStatusColourMapping](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingThresholds, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.almostFullDecreasing map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("almostFullDecreasing"), __scope, false) } getOrElse {Nil},
        __obj.almostFullIncreasing map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("almostFullIncreasing"), __scope, false) } getOrElse {Nil},
        __obj.entranceFull map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("entranceFull"), __scope, false) } getOrElse {Nil},
        __obj.fullDecreasing map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("fullDecreasing"), __scope, false) } getOrElse {Nil},
        __obj.fullIncreasing map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("fullIncreasing"), __scope, false) } getOrElse {Nil},
        __obj.overcrowding map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("overcrowding"), __scope, false) } getOrElse {Nil},
        __obj.overcrowdingLevel1 map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("overcrowdingLevel1"), __scope, false) } getOrElse {Nil},
        __obj.overcrowdingLevel2 map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("overcrowdingLevel2"), __scope, false) } getOrElse {Nil},
        __obj.parkingLastMaximumOccupancy map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingLastMaximumOccupancy"), __scope, false) } getOrElse {Nil},
        __obj.parkingStatusColourMapping flatMap { scalaxb.toXML[nu.ndw.ParkingStatusColourMapping](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStatusColourMapping"), __scope, false) },
        __obj.parkingThresholdsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingThresholdsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingTypeOfGroupFormat = new DefaultNundw_ParkingTypeOfGroupFormat {}
  trait DefaultNundw_ParkingTypeOfGroupFormat extends scalaxb.XMLFormat[nu.ndw.ParkingTypeOfGroup] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingTypeOfGroup = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("adjacentSpaces")) => nu.ndw.AdjacentSpaces
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nonAdjacentSpaces")) => nu.ndw.NonAdjacentSpaces
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("completeFloor")) => nu.ndw.CompleteFloor
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mixedUsage")) => nu.ndw.MixedUsage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("statisticsOnly")) => nu.ndw.StatisticsOnly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("singleParameters")) => nu.ndw.SingleParameters
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue70

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingTypeOfGroup] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingTypeOfGroup, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingUsageScenarioFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingUsageScenario] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingUsageScenario")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingUsageScenario] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenario")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "truckParkingDynamicManagement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "eventParkingType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "eventParkingType2")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "scenarioAvailability")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenarioExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.ParkingUsageScenario(scalaxb.fromXML[nu.ndw.ParkingUsageScenarioEnum](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[nu.ndw.TruckParkingDynamicManagementEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.PublicEventTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.PublicEventType2Enum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.OverallPeriod](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingUsageScenario, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.ParkingUsageScenarioEnum](__obj.parkingUsageScenario, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenario"), __scope, false),
        __obj.truckParkingDynamicManagement flatMap { scalaxb.toXML[nu.ndw.TruckParkingDynamicManagementEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("truckParkingDynamicManagement"), __scope, false) },
        __obj.eventParkingType map { scalaxb.toXML[nu.ndw.PublicEventTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("eventParkingType"), __scope, false) } getOrElse {Nil},
        __obj.eventParkingType2 map { scalaxb.toXML[nu.ndw.PublicEventType2Enum](_, Some("http://datex2.eu/schema/2/2_0"), Some("eventParkingType2"), __scope, false) } getOrElse {Nil},
        __obj.scenarioAvailability map { scalaxb.toXML[nu.ndw.OverallPeriod](_, Some("http://datex2.eu/schema/2/2_0"), Some("scenarioAvailability"), __scope, false) } getOrElse {Nil},
        __obj.parkingUsageScenarioExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenarioExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingUsageScenarioEnumFormat = new DefaultNundw_ParkingUsageScenarioEnumFormat {}
  trait DefaultNundw_ParkingUsageScenarioEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingUsageScenarioEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingUsageScenarioEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("truckParking")) => nu.ndw.TruckParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkAndRide")) => nu.ndw.ParkAndRideValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkAndCycle")) => nu.ndw.ParkAndCycle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkAndWalk")) => nu.ndw.ParkAndWalk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("kissAndRide")) => nu.ndw.KissAndRide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("liftshare")) => nu.ndw.Liftshare
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carSharing")) => nu.ndw.CarSharingValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restArea")) => nu.ndw.RestArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceArea")) => nu.ndw.ServiceArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dropOffWithValet")) => nu.ndw.DropOffWithValet
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dropOffMechanical")) => nu.ndw.DropOffMechanical
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eventParking")) => nu.ndw.EventParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("automaticParkingGuidance")) => nu.ndw.AutomaticParkingGuidance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("staffGuidesToSpace")) => nu.ndw.StaffGuidesToSpace
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleLift")) => nu.ndw.VehicleLift
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("loadingBay")) => nu.ndw.LoadingBay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dropOff")) => nu.ndw.DropOff
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overnightParking")) => nu.ndw.OvernightParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue41
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue71

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingUsageScenarioEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingUsageScenarioEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingUsageScenarioStatusFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingUsageScenarioStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingUsageScenarioStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingUsageScenarioStatus] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "usageScenarioOperationStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenarioStatusExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.ParkingUsageScenarioStatus(scalaxb.fromXML[nu.ndw.OperationStatusEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingUsageScenarioStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.OperationStatusEnum](__obj.usageScenarioOperationStatus, Some("http://datex2.eu/schema/2/2_0"), Some("usageScenarioOperationStatus"), __scope, false),
        __obj.parkingUsageScenarioStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenarioStatusExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ParkingVacantSpacesEnumFormat = new DefaultNundw_ParkingVacantSpacesEnumFormat {}
  trait DefaultNundw_ParkingVacantSpacesEnumFormat extends scalaxb.XMLFormat[nu.ndw.ParkingVacantSpacesEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ParkingVacantSpacesEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noParkingSpacesAvailable")) => nu.ndw.NoParkingSpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("expectNoSpacesAvailable")) => nu.ndw.ExpectNoSpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onlyAFewSpacesAvailable")) => nu.ndw.OnlyAFewSpacesAvailableValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lessThan10SpacesAvailable")) => nu.ndw.LessThan10SpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lessThan20SpacesAvailable")) => nu.ndw.LessThan20SpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lessThan30SpacesAvailable")) => nu.ndw.LessThan30SpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lessThan40SpacesAvailable")) => nu.ndw.LessThan40SpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lessThan50SpacesAvailable")) => nu.ndw.LessThan50SpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue42
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue72

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ParkingVacantSpacesEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ParkingVacantSpacesEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ParkingVehicleFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingVehicle] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingVehicle")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingVehicle] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpaceReference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpacesReference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPermit")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicle")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "individualCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingVehicleExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.ParkingVehicle(scalaxb.fromXML[nu.ndw._ParkingRecordVersionedReference](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.ParkingPermit](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Vehicle](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[nu.ndw.IndividualCharge](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.OverallPeriod](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ParkingVehicle, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ParkingVehicle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._ParkingRecordVersionedReference](__obj.parkingRecordReference, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordReference"), __scope, false),
        __obj.parkingSpaceReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpaceReference"), __scope, false) } getOrElse {Nil},
        __obj.groupOfParkingSpacesReference flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpacesReference"), __scope, false) },
        __obj.parkingPermit flatMap { scalaxb.toXML[nu.ndw.ParkingPermit](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPermit"), __scope, false) },
        scalaxb.toXML[nu.ndw.Vehicle](__obj.vehicle, Some("http://datex2.eu/schema/2/2_0"), Some("vehicle"), __scope, false),
        __obj.individualCharge map { scalaxb.toXML[nu.ndw.IndividualCharge](_, Some("http://datex2.eu/schema/2/2_0"), Some("individualCharge"), __scope, false) } getOrElse {Nil},
        __obj.parkingPeriod map { scalaxb.toXML[nu.ndw.OverallPeriod](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPeriod"), __scope, false) } getOrElse {Nil},
        __obj.parkingVehicleExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingVehicleExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ParkingVehiclesPublicationFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingVehiclesPublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingVehiclesPublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingVehiclesPublication] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingTableReference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingVehicle")) ^^
      { case p1 ~ p2 =>
      nu.ndw.ParkingVehiclesPublication(p1 map { scalaxb.fromXML[nu.ndw._ParkingTableVersionedReference](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.ParkingVehicle](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingVehiclesPublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingTableReference flatMap { scalaxb.toXML[nu.ndw._ParkingTableVersionedReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingTableReference"), __scope, false) },
        __obj.parkingVehicle flatMap { scalaxb.toXML[nu.ndw.ParkingVehicle](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingVehicle"), __scope, false) })

  }

  trait DefaultNundw_ParkingVMSFormat extends scalaxb.ElemNameParser[nu.ndw.ParkingVMS] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ParkingVMS")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ParkingVMS] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitUsedToManageParking")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsOperator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingVMSExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.ParkingVMS(scalaxb.fromXML[nu.ndw._VmsUnitRecordVersionedReference](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ParkingVMS, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._VmsUnitRecordVersionedReference](__obj.vmsUnitUsedToManageParking, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitUsedToManageParking"), __scope, false),
        __obj.vmsOperator flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsOperator"), __scope, false) },
        __obj.parkingVMSExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingVMSExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PayloadPublicationFormat extends scalaxb.XMLFormat[nu.ndw.PayloadPublication] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PayloadPublication] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficViewPublication")) => Right(scalaxb.fromXML[nu.ndw.TrafficViewPublication](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("MeasuredDataPublication")) => Right(scalaxb.fromXML[nu.ndw.MeasuredDataPublication](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GenericPublication")) => Right(scalaxb.fromXML[nu.ndw.GenericPublication](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ElaboratedDataPublication")) => Right(scalaxb.fromXML[nu.ndw.ElaboratedDataPublication](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("MeasurementSiteTablePublication")) => Right(scalaxb.fromXML[nu.ndw.MeasurementSiteTablePublication](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PredefinedLocationsPublication")) => Right(scalaxb.fromXML[nu.ndw.PredefinedLocationsPublication](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("SituationPublication")) => Right(scalaxb.fromXML[nu.ndw.SituationPublication](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VmsPublication")) => Right(scalaxb.fromXML[nu.ndw.VmsPublication](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VmsTablePublication")) => Right(scalaxb.fromXML[nu.ndw.VmsTablePublication](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.PayloadPublication, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TrafficViewPublication => scalaxb.toXML[nu.ndw.TrafficViewPublication](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.MeasuredDataPublication => scalaxb.toXML[nu.ndw.MeasuredDataPublication](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.GenericPublication => scalaxb.toXML[nu.ndw.GenericPublication](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ElaboratedDataPublication => scalaxb.toXML[nu.ndw.ElaboratedDataPublication](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.MeasurementSiteTablePublication => scalaxb.toXML[nu.ndw.MeasurementSiteTablePublication](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.PredefinedLocationsPublication => scalaxb.toXML[nu.ndw.PredefinedLocationsPublication](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.SituationPublication => scalaxb.toXML[nu.ndw.SituationPublication](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.VmsPublication => scalaxb.toXML[nu.ndw.VmsPublication](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.VmsTablePublication => scalaxb.toXML[nu.ndw.VmsTablePublication](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildNundw_PaymentCardBrandsEnumFormat = new DefaultNundw_PaymentCardBrandsEnumFormat {}
  trait DefaultNundw_PaymentCardBrandsEnumFormat extends scalaxb.XMLFormat[nu.ndw.PaymentCardBrandsEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PaymentCardBrandsEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("americanExpress")) => nu.ndw.AmericanExpress
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cirrus")) => nu.ndw.Cirrus
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dinersClub")) => nu.ndw.DinersClub
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("discoverCard")) => nu.ndw.DiscoverCard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("giroCard")) => nu.ndw.GiroCard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("maestro")) => nu.ndw.Maestro
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("masterCard")) => nu.ndw.MasterCard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("visa")) => nu.ndw.Visa
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vPay")) => nu.ndw.VPay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue73

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PaymentCardBrandsEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PaymentCardBrandsEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_PaymentCardTypesEnumFormat = new DefaultNundw_PaymentCardTypesEnumFormat {}
  trait DefaultNundw_PaymentCardTypesEnumFormat extends scalaxb.XMLFormat[nu.ndw.PaymentCardTypesEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PaymentCardTypesEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("creditCard")) => nu.ndw.CreditCard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("debitCard")) => nu.ndw.DebitCard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("chargeCard")) => nu.ndw.ChargeCard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fleetCard")) => nu.ndw.FleetCard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("storedValueCard")) => nu.ndw.StoredValueCard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue18

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PaymentCardTypesEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PaymentCardTypesEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_PcuFlowValueFormat extends scalaxb.ElemNameParser[nu.ndw.PcuFlowValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PcuFlowValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PcuFlowValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pcuFlowRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pcuFlowValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.PcuFlowValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PcuFlowValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PcuFlowValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.pcuFlowRate, Some("http://datex2.eu/schema/2/2_0"), Some("pcuFlowRate"), __scope, false),
        __obj.pcuFlowValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pcuFlowValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PercentageDistanceAlongLinearElementFormat extends scalaxb.ElemNameParser[nu.ndw.PercentageDistanceAlongLinearElement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PercentageDistanceAlongLinearElement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PercentageDistanceAlongLinearElement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceAlongLinearElementExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "percentageDistanceAlong")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "percentageDistanceAlongLinearElementExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.PercentageDistanceAlongLinearElement(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PercentageDistanceAlongLinearElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.distanceAlongLinearElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceAlongLinearElementExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.percentageDistanceAlong, Some("http://datex2.eu/schema/2/2_0"), Some("percentageDistanceAlong"), __scope, false),
        __obj.percentageDistanceAlongLinearElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("percentageDistanceAlongLinearElementExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PercentageValueFormat extends scalaxb.ElemNameParser[nu.ndw.PercentageValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PercentageValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PercentageValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "percentage")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "percentageValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.PercentageValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PercentageValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PercentageValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.percentage, Some("http://datex2.eu/schema/2/2_0"), Some("percentage"), __scope, false),
        __obj.percentageValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("percentageValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PeriodFormat extends scalaxb.ElemNameParser[nu.ndw.Period] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Period")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Period] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "startOfPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "endOfPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "periodName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "recurringTimePeriodOfDay")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "recurringDayWeekMonthPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "periodExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.Period(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.TimePeriodOfDay](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.DayWeekMonth](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._PeriodExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Period, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.startOfPeriod map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("startOfPeriod"), __scope, false) } getOrElse {Nil},
        __obj.endOfPeriod map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("endOfPeriod"), __scope, false) } getOrElse {Nil},
        __obj.periodName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("periodName"), __scope, false) } getOrElse {Nil},
        __obj.recurringTimePeriodOfDay flatMap { scalaxb.toXML[nu.ndw.TimePeriodOfDay](_, Some("http://datex2.eu/schema/2/2_0"), Some("recurringTimePeriodOfDay"), __scope, false) },
        __obj.recurringDayWeekMonthPeriod flatMap { scalaxb.toXML[nu.ndw.DayWeekMonth](_, Some("http://datex2.eu/schema/2/2_0"), Some("recurringDayWeekMonthPeriod"), __scope, false) },
        __obj.periodExtension map { scalaxb.toXML[nu.ndw._PeriodExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("periodExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PeriodExtendedFormat extends scalaxb.ElemNameParser[nu.ndw.PeriodExtended] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PeriodExtended")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PeriodExtended] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "recurringSpecialDay")) ^^
      { case p1 =>
      nu.ndw.PeriodExtended(p1 map { scalaxb.fromXML[nu.ndw.SpecialDay](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PeriodExtended, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.recurringSpecialDay flatMap { scalaxb.toXML[nu.ndw.SpecialDay](_, Some("http://datex2.eu/schema/2/2_0"), Some("recurringSpecialDay"), __scope, false) })

  }

  trait DefaultNundw_PermitsAndProhibitionsFormat extends scalaxb.ElemNameParser[nu.ndw.PermitsAndProhibitions] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PermitsAndProhibitions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PermitsAndProhibitions] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "activity")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "regulation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "permitsAndProhibitionsExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.PermitsAndProhibitions(scalaxb.fromXML[nu.ndw.RestAreaActivityEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.RegulationEnum](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PermitsAndProhibitions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.RestAreaActivityEnum](__obj.activity, Some("http://datex2.eu/schema/2/2_0"), Some("activity"), __scope, false),
        scalaxb.toXML[nu.ndw.RegulationEnum](__obj.regulation, Some("http://datex2.eu/schema/2/2_0"), Some("regulation"), __scope, false),
        __obj.permitsAndProhibitionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("permitsAndProhibitionsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_PermitTypeEnumFormat = new DefaultNundw_PermitTypeEnumFormat {}
  trait DefaultNundw_PermitTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.PermitTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PermitTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blueZonePermit")) => nu.ndw.BlueZonePermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("careTakingPermit")) => nu.ndw.CareTakingPermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carpoolingPermit")) => nu.ndw.CarpoolingPermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carSharingPermit")) => nu.ndw.CarSharingPermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("disabledPermit")) => nu.ndw.DisabledPermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("emergencyVehiclePermit")) => nu.ndw.EmergencyVehiclePermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("employeePermit")) => nu.ndw.EmployeePermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fairPermit")) => nu.ndw.FairPermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("governmentPermit")) => nu.ndw.GovernmentPermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("maintenanceVehiclePermit")) => nu.ndw.MaintenanceVehiclePermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("residentPermit")) => nu.ndw.ResidentPermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadWorksPermit")) => nu.ndw.RoadWorksPermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("specificIdentifiedVehiclePermit")) => nu.ndw.SpecificIdentifiedVehiclePermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("taxiPermit")) => nu.ndw.TaxiPermit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue17

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PermitTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PermitTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_PersonCategoryEnumFormat = new DefaultNundw_PersonCategoryEnumFormat {}
  trait DefaultNundw_PersonCategoryEnumFormat extends scalaxb.XMLFormat[nu.ndw.PersonCategoryEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PersonCategoryEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("adult")) => nu.ndw.Adult
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("child")) => nu.ndw.Child
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("emergencyServicesPerson")) => nu.ndw.EmergencyServicesPerson
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fireman")) => nu.ndw.Fireman
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("infant")) => nu.ndw.Infant
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("medicalStaff")) => nu.ndw.MedicalStaff
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("memberOfThePublic")) => nu.ndw.MemberOfThePublic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("policeman")) => nu.ndw.Policeman
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("politician")) => nu.ndw.Politician
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicTransportPassenger")) => nu.ndw.PublicTransportPassenger
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sickPerson")) => nu.ndw.SickPerson
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficOfficer")) => nu.ndw.TrafficOfficer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficWarden")) => nu.ndw.TrafficWarden
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("veryImportantPerson")) => nu.ndw.VeryImportantPerson

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PersonCategoryEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PersonCategoryEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_PhysicalMountingEnumFormat = new DefaultNundw_PhysicalMountingEnumFormat {}
  trait DefaultNundw_PhysicalMountingEnumFormat extends scalaxb.XMLFormat[nu.ndw.PhysicalMountingEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PhysicalMountingEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("centralReservationMounted")) => nu.ndw.CentralReservationMounted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gantryMounted")) => nu.ndw.GantryMounted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overheadBridgeMounted")) => nu.ndw.OverheadBridgeMounted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsideCantileverMounted")) => nu.ndw.RoadsideCantileverMounted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsideMounted")) => nu.ndw.RoadsideMounted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trailerMounted")) => nu.ndw.TrailerMounted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tunnelEntranceMounted")) => nu.ndw.TunnelEntranceMounted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleMounted")) => nu.ndw.VehicleMounted

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PhysicalMountingEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PhysicalMountingEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_PictogramDisplayAreaSettingsFormat extends scalaxb.ElemNameParser[nu.ndw.PictogramDisplayAreaSettings] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PictogramDisplayAreaSettings")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PictogramDisplayAreaSettings] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramLanternsOn")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramLuminanceOverride")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramLuminanceLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramLuminanceLevelName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramDisplayAreaSettingsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.PictogramDisplayAreaSettings(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.VmsLuminanceLevelEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PictogramDisplayAreaSettings, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.pictogramLanternsOn map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramLanternsOn"), __scope, false) } getOrElse {Nil},
        __obj.pictogramLuminanceOverride map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramLuminanceOverride"), __scope, false) } getOrElse {Nil},
        __obj.pictogramLuminanceLevel map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramLuminanceLevel"), __scope, false) } getOrElse {Nil},
        __obj.pictogramLuminanceLevelName map { scalaxb.toXML[nu.ndw.VmsLuminanceLevelEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramLuminanceLevelName"), __scope, false) } getOrElse {Nil},
        __obj.pictogramDisplayAreaSettingsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramDisplayAreaSettingsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_PlacesEnumFormat = new DefaultNundw_PlacesEnumFormat {}
  trait DefaultNundw_PlacesEnumFormat extends scalaxb.XMLFormat[nu.ndw.PlacesEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PlacesEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("aroundBendsInTheRoad")) => nu.ndw.AroundBendsInTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atCustomsPosts")) => nu.ndw.AtCustomsPosts
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atHighAltitudes")) => nu.ndw.AtHighAltitudes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atTollPlazas")) => nu.ndw.AtTollPlazas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inBuiltUpAreas")) => nu.ndw.InBuiltUpAreas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inContraflowSections")) => nu.ndw.InContraflowSections
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inForestedAreas")) => nu.ndw.InForestedAreas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inGalleries")) => nu.ndw.InGalleries
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inLowLyingAreas")) => nu.ndw.InLowLyingAreas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inRoadworksAreas")) => nu.ndw.InRoadworksAreas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inRuralAreas")) => nu.ndw.InRuralAreas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inShadedAreas")) => nu.ndw.InShadedAreas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inTheCityCentre")) => nu.ndw.InTheCityCentre
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inTheInnerCityAreas")) => nu.ndw.InTheInnerCityAreas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inTunnels")) => nu.ndw.InTunnels
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onBridges")) => nu.ndw.OnBridges
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onDownHillSections")) => nu.ndw.OnDownHillSections
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onDualCarriagewaySections")) => nu.ndw.OnDualCarriagewaySections
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onElevatedSections")) => nu.ndw.OnElevatedSections
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onEnteringOrLeavingTunnels")) => nu.ndw.OnEnteringOrLeavingTunnels
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onEnteringTheCountry")) => nu.ndw.OnEnteringTheCountry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onFlyovers")) => nu.ndw.OnFlyovers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onLeavingTheCountry")) => nu.ndw.OnLeavingTheCountry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onMotorways")) => nu.ndw.OnMotorways
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onNonMotorways")) => nu.ndw.OnNonMotorways
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onPasses")) => nu.ndw.OnPasses
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onRoundabouts")) => nu.ndw.OnRoundabouts
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onSingleCarriagewaySections")) => nu.ndw.OnSingleCarriagewaySections
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onSlipRoads")) => nu.ndw.OnSlipRoads
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onUndergroundSections")) => nu.ndw.OnUndergroundSections
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onUnderpasses")) => nu.ndw.OnUnderpasses
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onUpHillSections")) => nu.ndw.OnUpHillSections
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overTheCrestOfHills")) => nu.ndw.OverTheCrestOfHills
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue16

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PlacesEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PlacesEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_PointFormat extends scalaxb.ElemNameParser[nu.ndw.Point] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Point")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Point] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocationsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "externalReferencing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationForDisplay")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPositionalDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "destination")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "networkLocationExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegPointLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alertCPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointAlongLinearElement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointByCoordinates")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      nu.ndw.Point(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.ExternalReferencing](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.PointCoordinates](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.SupplementaryPositionalDescription](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.Destination](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.TpegPointLocation](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.AlertCPoint](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.PointAlongLinearElement](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.PointByCoordinates](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw._PointExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Point, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.groupOfLocationsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocationsExtension"), __scope, false) } getOrElse {Nil},
        __obj.externalReferencing flatMap { scalaxb.toXML[nu.ndw.ExternalReferencing](_, Some("http://datex2.eu/schema/2/2_0"), Some("externalReferencing"), __scope, false) },
        __obj.locationForDisplay map { scalaxb.toXML[nu.ndw.PointCoordinates](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationForDisplay"), __scope, false) } getOrElse {Nil},
        __obj.locationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationExtension"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPositionalDescription map { scalaxb.toXML[nu.ndw.SupplementaryPositionalDescription](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPositionalDescription"), __scope, false) } getOrElse {Nil},
        __obj.destination map { scalaxb.toXML[nu.ndw.Destination](_, Some("http://datex2.eu/schema/2/2_0"), Some("destination"), __scope, false) } getOrElse {Nil},
        __obj.networkLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("networkLocationExtension"), __scope, false) } getOrElse {Nil},
        __obj.tpegPointLocation map { scalaxb.toXML[nu.ndw.TpegPointLocation](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegPointLocation"), __scope, false) } getOrElse {Nil},
        __obj.alertCPoint map { scalaxb.toXML[nu.ndw.AlertCPoint](_, Some("http://datex2.eu/schema/2/2_0"), Some("alertCPoint"), __scope, false) } getOrElse {Nil},
        __obj.pointAlongLinearElement map { scalaxb.toXML[nu.ndw.PointAlongLinearElement](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointAlongLinearElement"), __scope, false) } getOrElse {Nil},
        __obj.pointByCoordinates map { scalaxb.toXML[nu.ndw.PointByCoordinates](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointByCoordinates"), __scope, false) } getOrElse {Nil},
        __obj.pointExtension map { scalaxb.toXML[nu.ndw._PointExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PointAlongLinearElementFormat extends scalaxb.ElemNameParser[nu.ndw.PointAlongLinearElement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PointAlongLinearElement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PointAlongLinearElement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "administrativeAreaOfPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "directionBoundAtPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "directionRelativeAtPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "heightGradeOfPoint")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearElement")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceAlongLinearElement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointAlongLinearElementExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.PointAlongLinearElement(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.LinearReferencingDirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.HeightGradeEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.LinearElementable](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.DistanceAlongLinearElement](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PointAlongLinearElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.administrativeAreaOfPoint map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("administrativeAreaOfPoint"), __scope, false) } getOrElse {Nil},
        __obj.directionBoundAtPoint map { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("directionBoundAtPoint"), __scope, false) } getOrElse {Nil},
        __obj.directionRelativeAtPoint map { scalaxb.toXML[nu.ndw.LinearReferencingDirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("directionRelativeAtPoint"), __scope, false) } getOrElse {Nil},
        __obj.heightGradeOfPoint map { scalaxb.toXML[nu.ndw.HeightGradeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("heightGradeOfPoint"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.LinearElementable](__obj.linearElement, Some("http://datex2.eu/schema/2/2_0"), Some("linearElement"), __scope, false),
        scalaxb.toXML[nu.ndw.DistanceAlongLinearElement](__obj.distanceAlongLinearElement, Some("http://datex2.eu/schema/2/2_0"), Some("distanceAlongLinearElement"), __scope, false),
        __obj.pointAlongLinearElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointAlongLinearElementExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PointByCoordinatesFormat extends scalaxb.ElemNameParser[nu.ndw.PointByCoordinates] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PointByCoordinates")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PointByCoordinates] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "bearing")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointCoordinates")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointByCoordinatesExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.PointByCoordinates(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.PointCoordinates](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PointByCoordinates, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.bearing map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("bearing"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.PointCoordinates](__obj.pointCoordinates, Some("http://datex2.eu/schema/2/2_0"), Some("pointCoordinates"), __scope, false),
        __obj.pointByCoordinatesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointByCoordinatesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PointCoordinatesFormat extends scalaxb.ElemNameParser[nu.ndw.PointCoordinates] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PointCoordinates")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PointCoordinates] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "latitude")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "longitude")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointCoordinatesExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.PointCoordinates(scalaxb.fromXML[Float](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PointCoordinates, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Float](__obj.latitude, Some("http://datex2.eu/schema/2/2_0"), Some("latitude"), __scope, false),
        scalaxb.toXML[Float](__obj.longitude, Some("http://datex2.eu/schema/2/2_0"), Some("longitude"), __scope, false),
        __obj.pointCoordinatesExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointCoordinatesExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PointDestinationFormat extends scalaxb.ElemNameParser[nu.ndw.PointDestination] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PointDestination")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PointDestination] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "destinationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "point")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointDestinationExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.PointDestination(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Point](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PointDestination, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.destinationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("destinationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Point](__obj.point, Some("http://datex2.eu/schema/2/2_0"), Some("point"), __scope, false),
        __obj.pointDestinationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointDestinationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PointExtendedFormat extends scalaxb.ElemNameParser[nu.ndw.PointExtended] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PointExtended")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PointExtended] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "junction")) ^^
      { case p1 ~ p2 =>
      nu.ndw.PointExtended(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.JunctionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PointExtended, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.description map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.junction map { scalaxb.toXML[nu.ndw.JunctionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("junction"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_PollutantTypeEnumFormat = new DefaultNundw_PollutantTypeEnumFormat {}
  trait DefaultNundw_PollutantTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.PollutantTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PollutantTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("benzeneTolueneXylene")) => nu.ndw.BenzeneTolueneXylene
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carbonMonoxide")) => nu.ndw.CarbonMonoxide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lead")) => nu.ndw.Lead
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("methane")) => nu.ndw.MethaneValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nitricOxide")) => nu.ndw.NitricOxide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nitrogenDioxide")) => nu.ndw.NitrogenDioxide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nitrogenMonoxide")) => nu.ndw.NitrogenMonoxide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nitrogenOxides")) => nu.ndw.NitrogenOxides
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nonMethaneHydrocarbons")) => nu.ndw.NonMethaneHydrocarbons
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ozone")) => nu.ndw.Ozone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("particulates10")) => nu.ndw.Particulates10
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("polycyclicAromaticHydrocarbons")) => nu.ndw.PolycyclicAromaticHydrocarbons
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("primaryParticulate")) => nu.ndw.PrimaryParticulate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sulphurDioxide")) => nu.ndw.SulphurDioxide
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("totalHydrocarbons")) => nu.ndw.TotalHydrocarbons

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PollutantTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PollutantTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_PollutionTypeFormat extends scalaxb.ElemNameParser[nu.ndw.PollutionType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Pollution")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PollutionType] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pollutantType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pollutantConcentration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pollutionExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.PollutionType(scalaxb.fromXML[nu.ndw.PollutantTypeEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw.MicrogramsConcentrationValue](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PollutionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.PollutantTypeEnum](__obj.pollutantType, Some("http://datex2.eu/schema/2/2_0"), Some("pollutantType"), __scope, false),
        __obj.pollutantConcentration map { scalaxb.toXML[nu.ndw.MicrogramsConcentrationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("pollutantConcentration"), __scope, false) } getOrElse {Nil},
        __obj.pollutionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pollutionExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PollutionInformationTypeFormat extends scalaxb.ElemNameParser[nu.ndw.PollutionInformationType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PollutionInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PollutionInformationType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherDataExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pollution")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pollutionInformationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.PollutionInformationType(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[nu.ndw.PollutionType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PollutionInformationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PollutionInformationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.weatherDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.pollution flatMap { scalaxb.toXML[nu.ndw.PollutionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pollution"), __scope, false) },
        __obj.pollutionInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pollutionInformationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PolygonAreaFormat extends scalaxb.ElemNameParser[nu.ndw.PolygonArea] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PolygonArea")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PolygonArea] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "sectionName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointCoordinates")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "polygonAreaExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.PolygonArea(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw._PolygonAreaIndexPointCoordinates](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PolygonArea, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.sectionName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("sectionName"), __scope, false) } getOrElse {Nil},
        __obj.pointCoordinates flatMap { scalaxb.toXML[nu.ndw._PolygonAreaIndexPointCoordinates](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointCoordinates"), __scope, false) },
        __obj.polygonAreaExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("polygonAreaExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PoorEnvironmentConditionsFormat extends scalaxb.ElemNameParser[nu.ndw.PoorEnvironmentConditions] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PoorEnvironmentConditions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PoorEnvironmentConditions] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "drivingConditionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "conditionsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "poorEnvironmentType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "precipitationDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "visibility")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pollution")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temperature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "wind")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "humidity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "poorEnvironmentConditionsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 =>
      nu.ndw.PoorEnvironmentConditions(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.DrivingConditionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[nu.ndw.PoorEnvironmentTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.PrecipitationDetail](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.Visibility](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[nu.ndw.PollutionType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[nu.ndw.TemperatureType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[nu.ndw.Wind](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[nu.ndw.Humidity](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PoorEnvironmentConditions, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PoorEnvironmentConditions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.drivingConditionType map { scalaxb.toXML[nu.ndw.DrivingConditionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("drivingConditionType"), __scope, false) } getOrElse {Nil},
        __obj.conditionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("conditionsExtension"), __scope, false) } getOrElse {Nil},
        __obj.poorEnvironmentType flatMap { scalaxb.toXML[nu.ndw.PoorEnvironmentTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("poorEnvironmentType"), __scope, false) },
        __obj.precipitationDetail map { scalaxb.toXML[nu.ndw.PrecipitationDetail](_, Some("http://datex2.eu/schema/2/2_0"), Some("precipitationDetail"), __scope, false) } getOrElse {Nil},
        __obj.visibility map { scalaxb.toXML[nu.ndw.Visibility](_, Some("http://datex2.eu/schema/2/2_0"), Some("visibility"), __scope, false) } getOrElse {Nil},
        __obj.pollution map { scalaxb.toXML[nu.ndw.PollutionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("pollution"), __scope, false) } getOrElse {Nil},
        __obj.temperature map { scalaxb.toXML[nu.ndw.TemperatureType](_, Some("http://datex2.eu/schema/2/2_0"), Some("temperature"), __scope, false) } getOrElse {Nil},
        __obj.wind map { scalaxb.toXML[nu.ndw.Wind](_, Some("http://datex2.eu/schema/2/2_0"), Some("wind"), __scope, false) } getOrElse {Nil},
        __obj.humidity map { scalaxb.toXML[nu.ndw.Humidity](_, Some("http://datex2.eu/schema/2/2_0"), Some("humidity"), __scope, false) } getOrElse {Nil},
        __obj.poorEnvironmentConditionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("poorEnvironmentConditionsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_PoorEnvironmentTypeEnumFormat = new DefaultNundw_PoorEnvironmentTypeEnumFormat {}
  trait DefaultNundw_PoorEnvironmentTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.PoorEnvironmentTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PoorEnvironmentTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("badWeather")) => nu.ndw.BadWeather
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blizzard")) => nu.ndw.Blizzard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blowingDust")) => nu.ndw.BlowingDust
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blowingSnow")) => nu.ndw.BlowingSnow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("crosswinds")) => nu.ndw.Crosswinds
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagingHail")) => nu.ndw.DamagingHail
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("denseFog")) => nu.ndw.DenseFog
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eclipse")) => nu.ndw.Eclipse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extremeCold")) => nu.ndw.ExtremeCold
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extremeHeat")) => nu.ndw.ExtremeHeat
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fog")) => nu.ndw.FogValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freezingFog")) => nu.ndw.FreezingFog
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("frost")) => nu.ndw.Frost
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gales")) => nu.ndw.Gales
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gustyWinds")) => nu.ndw.GustyWinds
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hail")) => nu.ndw.HailValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heavyFrost")) => nu.ndw.HeavyFrost
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heavyRain")) => nu.ndw.HeavyRain
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heavySnowfall")) => nu.ndw.HeavySnowfall
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hurricaneForceWinds")) => nu.ndw.HurricaneForceWinds
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lowSunGlare")) => nu.ndw.LowSunGlare
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("moderateFog")) => nu.ndw.ModerateFog
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ozonePollution")) => nu.ndw.OzonePollution
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pollution")) => nu.ndw.Pollution
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("patchyFog")) => nu.ndw.PatchyFog
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("precipitationInTheArea")) => nu.ndw.PrecipitationInTheArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rain")) => nu.ndw.RainValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rainChangingToSnow")) => nu.ndw.RainChangingToSnow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sandStorms")) => nu.ndw.SandStorms
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("severeExhaustPollution")) => nu.ndw.SevereExhaustPollution
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("severeSmog")) => nu.ndw.SevereSmog
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("showers")) => nu.ndw.Showers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sleet")) => nu.ndw.SleetValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("smogAlert")) => nu.ndw.SmogAlert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("smokeHazard")) => nu.ndw.SmokeHazard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowChangingToRain")) => nu.ndw.SnowChangingToRain
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowfall")) => nu.ndw.Snowfall
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sprayHazard")) => nu.ndw.SprayHazard
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stormForceWinds")) => nu.ndw.StormForceWinds
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("strongGustsOfWind")) => nu.ndw.StrongGustsOfWind
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("strongWinds")) => nu.ndw.StrongWinds
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("swarmsOfInsects")) => nu.ndw.SwarmsOfInsects
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temperatureFalling")) => nu.ndw.TemperatureFalling
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("thunderstorms")) => nu.ndw.Thunderstorms
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tornadoes")) => nu.ndw.Tornadoes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("veryStrongGustsOfWind")) => nu.ndw.VeryStrongGustsOfWind
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("visibilityReduced")) => nu.ndw.VisibilityReduced
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("whiteOut")) => nu.ndw.WhiteOut
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("winterStorm")) => nu.ndw.WinterStorm

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PoorEnvironmentTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PoorEnvironmentTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_PositionAbsoluteEnumFormat = new DefaultNundw_PositionAbsoluteEnumFormat {}
  trait DefaultNundw_PositionAbsoluteEnumFormat extends scalaxb.XMLFormat[nu.ndw.PositionAbsoluteEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PositionAbsoluteEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onLeft")) => nu.ndw.OnLeft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onRight")) => nu.ndw.OnRight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atTop")) => nu.ndw.AtTop
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atBottom")) => nu.ndw.AtBottom

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PositionAbsoluteEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PositionAbsoluteEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_PositionRelativeEnumFormat = new DefaultNundw_PositionRelativeEnumFormat {}
  trait DefaultNundw_PositionRelativeEnumFormat extends scalaxb.XMLFormat[nu.ndw.PositionRelativeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PositionRelativeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("above")) => nu.ndw.Above
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("below")) => nu.ndw.Below
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("toTheLeft")) => nu.ndw.ToTheLeft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("toTheRight")) => nu.ndw.ToTheRight

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PositionRelativeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PositionRelativeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_PrecipitationDetailFormat extends scalaxb.ElemNameParser[nu.ndw.PrecipitationDetail] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PrecipitationDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PrecipitationDetail] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "precipitationType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "precipitationIntensity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "depositionDepth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "precipitationDetailExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.PrecipitationDetail(p1.headOption map { scalaxb.fromXML[nu.ndw.PrecipitationTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.PrecipitationIntensityValue](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.FloatingPointMetreDistanceValue](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PrecipitationDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.precipitationType map { scalaxb.toXML[nu.ndw.PrecipitationTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("precipitationType"), __scope, false) } getOrElse {Nil},
        __obj.precipitationIntensity map { scalaxb.toXML[nu.ndw.PrecipitationIntensityValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("precipitationIntensity"), __scope, false) } getOrElse {Nil},
        __obj.depositionDepth map { scalaxb.toXML[nu.ndw.FloatingPointMetreDistanceValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("depositionDepth"), __scope, false) } getOrElse {Nil},
        __obj.precipitationDetailExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("precipitationDetailExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PrecipitationInformationFormat extends scalaxb.ElemNameParser[nu.ndw.PrecipitationInformation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PrecipitationInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PrecipitationInformation] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "noPrecipitation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "precipitationDetail")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "precipitationInformationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.PrecipitationInformation(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.PrecipitationDetail](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PrecipitationInformation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PrecipitationInformation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.weatherDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.noPrecipitation map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("noPrecipitation"), __scope, false) } getOrElse {Nil},
        __obj.precipitationDetail map { scalaxb.toXML[nu.ndw.PrecipitationDetail](_, Some("http://datex2.eu/schema/2/2_0"), Some("precipitationDetail"), __scope, false) } getOrElse {Nil},
        __obj.precipitationInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("precipitationInformationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PrecipitationIntensityValueFormat extends scalaxb.ElemNameParser[nu.ndw.PrecipitationIntensityValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PrecipitationIntensityValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PrecipitationIntensityValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "millimetresPerHourIntensity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "precipitationIntensityValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.PrecipitationIntensityValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PrecipitationIntensityValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PrecipitationIntensityValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.millimetresPerHourIntensity, Some("http://datex2.eu/schema/2/2_0"), Some("millimetresPerHourIntensity"), __scope, false),
        __obj.precipitationIntensityValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("precipitationIntensityValueExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_PrecipitationTypeEnumFormat = new DefaultNundw_PrecipitationTypeEnumFormat {}
  trait DefaultNundw_PrecipitationTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.PrecipitationTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PrecipitationTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("drizzle")) => nu.ndw.Drizzle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freezingRain")) => nu.ndw.FreezingRainValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hail")) => nu.ndw.Hail
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rain")) => nu.ndw.RainValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sleet")) => nu.ndw.Sleet
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snow")) => nu.ndw.SnowValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PrecipitationTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PrecipitationTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_PredefinedItineraryFormat extends scalaxb.ElemNameParser[nu.ndw.PredefinedItinerary] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PredefinedItinerary")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PredefinedItinerary] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocationContainerExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedItineraryName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedItineraryExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.PredefinedItinerary(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw._PredefinedItineraryIndexPredefinedLocation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PredefinedItinerary, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PredefinedItinerary, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.predefinedLocationContainerExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocationContainerExtension"), __scope, false) } getOrElse {Nil},
        __obj.predefinedItineraryName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedItineraryName"), __scope, false) } getOrElse {Nil},
        __obj.predefinedLocation flatMap { scalaxb.toXML[nu.ndw._PredefinedItineraryIndexPredefinedLocation](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocation"), __scope, false) },
        __obj.predefinedItineraryExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedItineraryExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PredefinedLocationFormat extends scalaxb.ElemNameParser[nu.ndw.PredefinedLocation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PredefinedLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PredefinedLocation] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocationContainerExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocationName")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "location")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.PredefinedLocation(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Location](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PredefinedLocation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PredefinedLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.predefinedLocationContainerExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocationContainerExtension"), __scope, false) } getOrElse {Nil},
        __obj.predefinedLocationName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocationName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Location](__obj.location, Some("http://datex2.eu/schema/2/2_0"), Some("location"), __scope, false),
        __obj.predefinedLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PredefinedLocationContainerFormat extends scalaxb.XMLFormat[nu.ndw.PredefinedLocationContainer] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PredefinedLocationContainer] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PredefinedNonOrderedLocationGroup")) => Right(scalaxb.fromXML[nu.ndw.PredefinedNonOrderedLocationGroup](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PredefinedItinerary")) => Right(scalaxb.fromXML[nu.ndw.PredefinedItinerary](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PredefinedLocation")) => Right(scalaxb.fromXML[nu.ndw.PredefinedLocation](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.PredefinedLocationContainer, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.PredefinedNonOrderedLocationGroup => scalaxb.toXML[nu.ndw.PredefinedNonOrderedLocationGroup](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.PredefinedItinerary => scalaxb.toXML[nu.ndw.PredefinedItinerary](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.PredefinedLocation => scalaxb.toXML[nu.ndw.PredefinedLocation](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_PredefinedLocationsPublicationFormat extends scalaxb.ElemNameParser[nu.ndw.PredefinedLocationsPublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PredefinedLocationsPublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PredefinedLocationsPublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationCreator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublicationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocationContainer")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocationsPublicationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.PredefinedLocationsPublication(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.HeaderInformation](p6, scalaxb.ElemName(node) :: stack),
        p7 map { scalaxb.fromXML[nu.ndw.PredefinedLocationContainer](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PredefinedLocationsPublication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PredefinedLocationsPublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.feedDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedDescription"), __scope, false) } getOrElse {Nil},
        __obj.feedType map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.publicationTime, Some("http://datex2.eu/schema/2/2_0"), Some("publicationTime"), __scope, false),
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.publicationCreator, Some("http://datex2.eu/schema/2/2_0"), Some("publicationCreator"), __scope, false),
        __obj.payloadPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublicationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.HeaderInformation](__obj.headerInformation, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false),
        __obj.predefinedLocationContainer flatMap { scalaxb.toXML[nu.ndw.PredefinedLocationContainer](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocationContainer"), __scope, false) },
        __obj.predefinedLocationsPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocationsPublicationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_PredefinedNonOrderedLocationGroupFormat extends scalaxb.ElemNameParser[nu.ndw.PredefinedNonOrderedLocationGroup] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PredefinedNonOrderedLocationGroup")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PredefinedNonOrderedLocationGroup] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocationContainerExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedNonOrderedLocationGroupName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedNonOrderedLocationGroupExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.PredefinedNonOrderedLocationGroup(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.PredefinedLocation](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PredefinedNonOrderedLocationGroup, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PredefinedNonOrderedLocationGroup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.predefinedLocationContainerExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocationContainerExtension"), __scope, false) } getOrElse {Nil},
        __obj.predefinedNonOrderedLocationGroupName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedNonOrderedLocationGroupName"), __scope, false) } getOrElse {Nil},
        __obj.predefinedLocation flatMap { scalaxb.toXML[nu.ndw.PredefinedLocation](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedLocation"), __scope, false) },
        __obj.predefinedNonOrderedLocationGroupExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedNonOrderedLocationGroupExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ProbabilityOfOccurrenceEnumFormat = new DefaultNundw_ProbabilityOfOccurrenceEnumFormat {}
  trait DefaultNundw_ProbabilityOfOccurrenceEnumFormat extends scalaxb.XMLFormat[nu.ndw.ProbabilityOfOccurrenceEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ProbabilityOfOccurrenceEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("certain")) => nu.ndw.Certain
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("probable")) => nu.ndw.Probable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("riskOf")) => nu.ndw.RiskOf

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ProbabilityOfOccurrenceEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ProbabilityOfOccurrenceEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_PublicEventFormat extends scalaxb.ElemNameParser[nu.ndw.PublicEvent] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PublicEvent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PublicEvent] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityOfActivity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "activityExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicEventType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicEventExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      nu.ndw.PublicEvent(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.PublicEventTypeEnum](p22, scalaxb.ElemName(node) :: stack),
        p23.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.PublicEvent, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.PublicEvent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.mobilityOfActivity map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityOfActivity"), __scope, false) } getOrElse {Nil},
        __obj.activityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("activityExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.PublicEventTypeEnum](__obj.publicEventType, Some("http://datex2.eu/schema/2/2_0"), Some("publicEventType"), __scope, false),
        __obj.publicEventExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("publicEventExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_PublicEventType2EnumFormat = new DefaultNundw_PublicEventType2EnumFormat {}
  trait DefaultNundw_PublicEventType2EnumFormat extends scalaxb.XMLFormat[nu.ndw.PublicEventType2Enum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PublicEventType2Enum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("openAirConcert")) => nu.ndw.OpenAirConcert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("soundAndLightShow")) => nu.ndw.SoundAndLightShow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("artEvent")) => nu.ndw.ArtEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("flowerEvent")) => nu.ndw.FlowerEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("beerFestival")) => nu.ndw.BeerFestival
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("foodFestival")) => nu.ndw.FoodFestival
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wineFestival")) => nu.ndw.WineFestival
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("theatricalEvent")) => nu.ndw.TheatricalEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fireworkDisplay")) => nu.ndw.FireworkDisplay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("streetFestival")) => nu.ndw.StreetFestival
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("filmFestival")) => nu.ndw.FilmFestival
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue8
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue15

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PublicEventType2Enum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PublicEventType2Enum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_PublicEventTypeEnumFormat = new DefaultNundw_PublicEventTypeEnumFormat {}
  trait DefaultNundw_PublicEventTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.PublicEventTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PublicEventTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("agriculturalShow")) => nu.ndw.AgriculturalShow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("airShow")) => nu.ndw.AirShow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("athleticsMeeting")) => nu.ndw.AthleticsMeeting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("commercialEvent")) => nu.ndw.CommercialEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("culturalEvent")) => nu.ndw.CulturalEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ballGame")) => nu.ndw.BallGame
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("baseballGame")) => nu.ndw.BaseballGame
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("basketballGame")) => nu.ndw.BasketballGame
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bicycleRace")) => nu.ndw.BicycleRace
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("boatRace")) => nu.ndw.BoatRace
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("boatShow")) => nu.ndw.BoatShow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("boxingTournament")) => nu.ndw.BoxingTournament
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bullFight")) => nu.ndw.BullFight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ceremonialEvent")) => nu.ndw.CeremonialEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("concert")) => nu.ndw.Concert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cricketMatch")) => nu.ndw.CricketMatch
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exhibition")) => nu.ndw.Exhibition
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fair")) => nu.ndw.Fair
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("festival")) => nu.ndw.Festival
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("filmTVMaking")) => nu.ndw.FilmTVMaking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("footballMatch")) => nu.ndw.FootballMatchValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("funfair")) => nu.ndw.Funfair
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gardeningOrFlowerShow")) => nu.ndw.GardeningOrFlowerShow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("golfTournament")) => nu.ndw.GolfTournament
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hockeyGame")) => nu.ndw.HockeyGame
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("horseRaceMeeting")) => nu.ndw.HorseRaceMeeting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("internationalSportsMeeting")) => nu.ndw.InternationalSportsMeeting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("majorEvent")) => nu.ndw.MajorEvent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("marathon")) => nu.ndw.Marathon
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("market")) => nu.ndw.MarketValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("match")) => nu.ndw.Match
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorShow")) => nu.ndw.MotorShow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorSportRaceMeeting")) => nu.ndw.MotorSportRaceMeeting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parade")) => nu.ndw.Parade
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("procession")) => nu.ndw.Procession
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("raceMeeting")) => nu.ndw.RaceMeeting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rugbyMatch")) => nu.ndw.RugbyMatch
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("severalMajorEvents")) => nu.ndw.SeveralMajorEvents
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("show")) => nu.ndw.Show
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("showJumping")) => nu.ndw.ShowJumping
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sportsMeeting")) => nu.ndw.SportsMeeting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stateOccasion")) => nu.ndw.StateOccasion
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tennisTournament")) => nu.ndw.TennisTournament
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tournament")) => nu.ndw.Tournament
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tradeFair")) => nu.ndw.TradeFair
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("waterSportsMeeting")) => nu.ndw.WaterSportsMeeting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("winterSportsMeeting")) => nu.ndw.WinterSportsMeeting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue74

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PublicEventTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PublicEventTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_PublicHolidayTypeFormat extends scalaxb.ElemNameParser[nu.ndw.PublicHolidayType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("PublicHoliday")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.PublicHolidayType] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "country")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "countrySubdivision")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "region")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicHolidayType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicHolidayName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicHolidayExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.PublicHolidayType(scalaxb.fromXML[nu.ndw.CountryEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.PublicHolidayTypeEnum](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.PublicHolidayType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.CountryEnum](__obj.country, Some("http://datex2.eu/schema/2/2_0"), Some("country"), __scope, false),
        __obj.countrySubdivision map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("countrySubdivision"), __scope, false) } getOrElse {Nil},
        __obj.region map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("region"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.PublicHolidayTypeEnum](__obj.publicHolidayType, Some("http://datex2.eu/schema/2/2_0"), Some("publicHolidayType"), __scope, false),
        __obj.publicHolidayName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("publicHolidayName"), __scope, false) } getOrElse {Nil},
        __obj.publicHolidayExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("publicHolidayExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_PublicHolidayTypeEnumFormat = new DefaultNundw_PublicHolidayTypeEnumFormat {}
  trait DefaultNundw_PublicHolidayTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.PublicHolidayTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.PublicHolidayTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("betweenChristmasAndNewYear")) => nu.ndw.BetweenChristmasAndNewYear
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("boxingDay")) => nu.ndw.BoxingDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bridgeHoliday")) => nu.ndw.BridgeHoliday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("christmasEve")) => nu.ndw.ChristmasEve
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("christmasDayAndBoxingDay")) => nu.ndw.ChristmasDayAndBoxingDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("christmasHolidayPeriod")) => nu.ndw.ChristmasHolidayPeriod
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dayFollowingPublicHoliday")) => nu.ndw.DayFollowingPublicHoliday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("easterFridayHoliday")) => nu.ndw.EasterFridayHoliday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("easterHolidayPeriod")) => nu.ndw.EasterHolidayPeriod
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("easterMondayHoliday")) => nu.ndw.EasterMondayHoliday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("easterSaturday")) => nu.ndw.EasterSaturday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("easterSunday")) => nu.ndw.EasterSunday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("eveOfPublicHoliday")) => nu.ndw.EveOfPublicHoliday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("holidayPeriod")) => nu.ndw.HolidayPeriod
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inLieuOfPublicHoliday")) => nu.ndw.InLieuOfPublicHoliday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("january2ndHoliday")) => nu.ndw.January2ndHoliday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("newYearsDay")) => nu.ndw.NewYearsDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("newYearsEve")) => nu.ndw.NewYearsEve
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notPublicHoliday")) => nu.ndw.NotPublicHoliday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicHoliday")) => nu.ndw.PublicHolidayValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue75

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.PublicHolidayTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.PublicHolidayTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ReferencableFormat extends scalaxb.XMLFormat[nu.ndw.Referencable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Referencable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_ParkingAccessReference")) => Right(scalaxb.fromXML[nu.ndw._ParkingAccessReference](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.Reference](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Referencable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw._ParkingAccessReference => scalaxb.toXML[nu.ndw._ParkingAccessReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.Reference => scalaxb.toXML[nu.ndw.Reference](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_ReferenceFormat extends scalaxb.XMLFormat[nu.ndw.Reference] with scalaxb.CanWriteChildNodes[nu.ndw.Reference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Reference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw.Reference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw.Reference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.Reference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw_ReferenceSettingsFormat extends scalaxb.ElemNameParser[nu.ndw.ReferenceSettings] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ReferenceSettings")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ReferenceSettings] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedNonOrderedLocationGroupReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficStatusDefault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "referenceSettingsExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.ReferenceSettings(p1.headOption map { scalaxb.fromXML[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.TrafficStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ReferenceSettings, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.predefinedNonOrderedLocationGroupReference map { scalaxb.toXML[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedNonOrderedLocationGroupReference"), __scope, false) } getOrElse {Nil},
        __obj.trafficStatusDefault map { scalaxb.toXML[nu.ndw.TrafficStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficStatusDefault"), __scope, false) } getOrElse {Nil},
        __obj.referenceSettingsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("referenceSettingsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_ReferentFormat extends scalaxb.ElemNameParser[nu.ndw.Referent] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Referent")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Referent] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "referentIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "referentName")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "referentType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "referentDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointCoordinates")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "referentExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.Referent(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ReferentTypeEnum](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.PointCoordinates](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Referent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.referentIdentifier, Some("http://datex2.eu/schema/2/2_0"), Some("referentIdentifier"), __scope, false),
        __obj.referentName map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("referentName"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ReferentTypeEnum](__obj.referentType, Some("http://datex2.eu/schema/2/2_0"), Some("referentType"), __scope, false),
        __obj.referentDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("referentDescription"), __scope, false) } getOrElse {Nil},
        __obj.pointCoordinates map { scalaxb.toXML[nu.ndw.PointCoordinates](_, Some("http://datex2.eu/schema/2/2_0"), Some("pointCoordinates"), __scope, false) } getOrElse {Nil},
        __obj.referentExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("referentExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ReferentTypeEnumFormat = new DefaultNundw_ReferentTypeEnumFormat {}
  trait DefaultNundw_ReferentTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ReferentTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ReferentTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("boundary")) => nu.ndw.Boundary
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("intersection")) => nu.ndw.IntersectionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("referenceMarker")) => nu.ndw.ReferenceMarker
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("landmark")) => nu.ndw.Landmark
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadNode")) => nu.ndw.RoadNodeValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ReferentTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ReferentTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_RegulationEnumFormat = new DefaultNundw_RegulationEnumFormat {}
  trait DefaultNundw_RegulationEnumFormat extends scalaxb.XMLFormat[nu.ndw.RegulationEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RegulationEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("permitted")) => nu.ndw.Permitted
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("prohibited")) => nu.ndw.Prohibited
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("punishable")) => nu.ndw.Punishable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("seasonalHeterogeneous")) => nu.ndw.SeasonalHeterogeneous
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("permittedOnlyAtParticularTimes")) => nu.ndw.PermittedOnlyAtParticularTimes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("permittedOnlyOnParticularAreas")) => nu.ndw.PermittedOnlyOnParticularAreas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("prohibitedAtParticularTimes")) => nu.ndw.ProhibitedAtParticularTimes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("prohibitedOnParticularAreas")) => nu.ndw.ProhibitedOnParticularAreas
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onlyOnRequest")) => nu.ndw.OnlyOnRequest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heterogeneous")) => nu.ndw.Heterogeneous
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onlyOutsideBuildings")) => nu.ndw.OnlyOutsideBuildings
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onlyInsideBuildings")) => nu.ndw.OnlyInsideBuildings
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecified")) => nu.ndw.Unspecified
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue7
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue14

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RegulationEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RegulationEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_RelativeTrafficFlowEnumFormat = new DefaultNundw_RelativeTrafficFlowEnumFormat {}
  trait DefaultNundw_RelativeTrafficFlowEnumFormat extends scalaxb.XMLFormat[nu.ndw.RelativeTrafficFlowEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RelativeTrafficFlowEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficVeryMuchHeavierThanNormal")) => nu.ndw.TrafficVeryMuchHeavierThanNormal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficHeavierThanNormal")) => nu.ndw.TrafficHeavierThanNormal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficFlowNormal")) => nu.ndw.TrafficFlowNormal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficLighterThanNormal")) => nu.ndw.TrafficLighterThanNormal
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficVeryMuchLighterThanNormal")) => nu.ndw.TrafficVeryMuchLighterThanNormal

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RelativeTrafficFlowEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RelativeTrafficFlowEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_RequestTypeEnumFormat = new DefaultNundw_RequestTypeEnumFormat {}
  trait DefaultNundw_RequestTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.RequestTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RequestTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("catalogue")) => nu.ndw.Catalogue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("filter")) => nu.ndw.Filter
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("requestData")) => nu.ndw.RequestData
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("requestHistoricalData")) => nu.ndw.RequestHistoricalData
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("subscription")) => nu.ndw.SubscriptionValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RequestTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RequestTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ReroutingManagementFormat extends scalaxb.ElemNameParser[nu.ndw.ReroutingManagement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ReroutingManagement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ReroutingManagement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "complianceOption")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficDirection")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "placesAtWhichApplicable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "automaticallyInitiated")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "networkManagementExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reroutingManagementType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reroutingItineraryDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "signedRerouting")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "entry")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "exit")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadOrJunctionNumber")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "alternativeRoute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reroutingManagementExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 =>
      nu.ndw.ReroutingManagement(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ComplianceOptionEnum](p23, scalaxb.ElemName(node) :: stack),
        p24 map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw.TrafficTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw.PlacesEnum](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[nu.ndw.ReroutingManagementTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p36 map { scalaxb.fromXML[nu.ndw.Itinerary](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.ReroutingManagement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.ReroutingManagement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ComplianceOptionEnum](__obj.complianceOption, Some("http://datex2.eu/schema/2/2_0"), Some("complianceOption"), __scope, false),
        __obj.applicableForTrafficDirection flatMap { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficDirection"), __scope, false) },
        __obj.applicableForTrafficType flatMap { scalaxb.toXML[nu.ndw.TrafficTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficType"), __scope, false) },
        __obj.placesAtWhichApplicable flatMap { scalaxb.toXML[nu.ndw.PlacesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("placesAtWhichApplicable"), __scope, false) },
        __obj.automaticallyInitiated map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("automaticallyInitiated"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) },
        __obj.networkManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("networkManagementExtension"), __scope, false) } getOrElse {Nil},
        __obj.reroutingManagementType flatMap { scalaxb.toXML[nu.ndw.ReroutingManagementTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("reroutingManagementType"), __scope, false) },
        __obj.reroutingItineraryDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reroutingItineraryDescription"), __scope, false) } getOrElse {Nil},
        __obj.signedRerouting map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("signedRerouting"), __scope, false) } getOrElse {Nil},
        __obj.entry map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("entry"), __scope, false) } getOrElse {Nil},
        __obj.exit map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("exit"), __scope, false) } getOrElse {Nil},
        __obj.roadOrJunctionNumber map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadOrJunctionNumber"), __scope, false) } getOrElse {Nil},
        __obj.alternativeRoute flatMap { scalaxb.toXML[nu.ndw.Itinerary](_, Some("http://datex2.eu/schema/2/2_0"), Some("alternativeRoute"), __scope, false) },
        __obj.reroutingManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("reroutingManagementExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ReroutingManagementTypeEnumFormat = new DefaultNundw_ReroutingManagementTypeEnumFormat {}
  trait DefaultNundw_ReroutingManagementTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ReroutingManagementTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ReroutingManagementTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotFollowDiversionSigns")) => nu.ndw.DoNotFollowDiversionSigns
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotUseEntry")) => nu.ndw.DoNotUseEntry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotUseExit")) => nu.ndw.DoNotUseExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotUseIntersectionOrJunction")) => nu.ndw.DoNotUseIntersectionOrJunction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("followDiversionSigns")) => nu.ndw.FollowDiversionSigns
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("followLocalDiversion")) => nu.ndw.FollowLocalDiversion
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("followSpecialMarkers")) => nu.ndw.FollowSpecialMarkers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useEntry")) => nu.ndw.UseEntry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useExit")) => nu.ndw.UseExit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useIntersectionOrJunction")) => nu.ndw.UseIntersectionOrJunction

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ReroutingManagementTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ReroutingManagementTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ReservationTypeEnumFormat = new DefaultNundw_ReservationTypeEnumFormat {}
  trait DefaultNundw_ReservationTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ReservationTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ReservationTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("optional")) => nu.ndw.Optional
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mandatory")) => nu.ndw.MandatoryValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notAvailable")) => nu.ndw.NotAvailableValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("partly")) => nu.ndw.Partly
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue43
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unspecified")) => nu.ndw.UnspecifiedValue4

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ReservationTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ReservationTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_ResponseEnumFormat = new DefaultNundw_ResponseEnumFormat {}
  trait DefaultNundw_ResponseEnumFormat extends scalaxb.XMLFormat[nu.ndw.ResponseEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ResponseEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("acknowledge")) => nu.ndw.Acknowledge
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("catalogueRequestDenied")) => nu.ndw.CatalogueRequestDenied
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("filterRequestDenied")) => nu.ndw.FilterRequestDenied
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("requestDenied")) => nu.ndw.RequestDenied
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("subscriptionRequestDenied")) => nu.ndw.SubscriptionRequestDenied

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ResponseEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ResponseEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_RestAreaActivityEnumFormat = new DefaultNundw_RestAreaActivityEnumFormat {}
  trait DefaultNundw_RestAreaActivityEnumFormat extends scalaxb.XMLFormat[nu.ndw.RestAreaActivityEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RestAreaActivityEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("openFire")) => nu.ndw.OpenFire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overnightParking")) => nu.ndw.OvernightParkingValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("picnic")) => nu.ndw.Picnic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("smoking")) => nu.ndw.Smoking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("camping")) => nu.ndw.Camping
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("handlingHazardousMaterial")) => nu.ndw.HandlingHazardousMaterial
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("barbecue")) => nu.ndw.Barbecue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue76

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RestAreaActivityEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RestAreaActivityEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_RGBColourFormat extends scalaxb.ElemNameParser[nu.ndw.RGBColour] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("RGBColour")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.RGBColour] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "rgbRedValue")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "rgbGreenValue")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "rgbBlueValue")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "colourName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "rgbColourExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.RGBColour(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.RGBColour, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.rgbRedValue, Some("http://datex2.eu/schema/2/2_0"), Some("rgbRedValue"), __scope, false),
        scalaxb.toXML[Int](__obj.rgbGreenValue, Some("http://datex2.eu/schema/2/2_0"), Some("rgbGreenValue"), __scope, false),
        scalaxb.toXML[Int](__obj.rgbBlueValue, Some("http://datex2.eu/schema/2/2_0"), Some("rgbBlueValue"), __scope, false),
        __obj.colourName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("colourName"), __scope, false) } getOrElse {Nil},
        __obj.rgbColourExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("rgbColourExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_RoadableFormat extends scalaxb.XMLFormat[nu.ndw.Roadable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.Roadable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadNode")) => Right(scalaxb.fromXML[nu.ndw.RoadNode](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.RoadType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.Roadable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.RoadNode => scalaxb.toXML[nu.ndw.RoadNode](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.RoadType => scalaxb.toXML[nu.ndw.RoadType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_RoadTypeFormat extends scalaxb.ElemNameParser[nu.ndw.RoadType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Road")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.RoadType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nameOfRoad")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "typeOfRoad")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadDestination")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadOrigination")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceToThisRoad")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.RoadType(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.RoadTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.RoadType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nameOfRoad map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("nameOfRoad"), __scope, false) } getOrElse {Nil},
        __obj.roadIdentifier map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.typeOfRoad map { scalaxb.toXML[nu.ndw.RoadTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("typeOfRoad"), __scope, false) } getOrElse {Nil},
        __obj.roadDestination flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadDestination"), __scope, false) },
        __obj.roadOrigination flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadOrigination"), __scope, false) },
        __obj.distanceToThisRoad map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceToThisRoad"), __scope, false) } getOrElse {Nil},
        __obj.roadExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_RoadConditionsFormat extends scalaxb.XMLFormat[nu.ndw.RoadConditions] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadConditions] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WeatherRelatedRoadConditions")) => Right(scalaxb.fromXML[nu.ndw.WeatherRelatedRoadConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonWeatherRelatedRoadConditions")) => Right(scalaxb.fromXML[nu.ndw.NonWeatherRelatedRoadConditions](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.RoadConditions, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.WeatherRelatedRoadConditions => scalaxb.toXML[nu.ndw.WeatherRelatedRoadConditions](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.NonWeatherRelatedRoadConditions => scalaxb.toXML[nu.ndw.NonWeatherRelatedRoadConditions](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildNundw_RoadMaintenanceTypeEnumFormat = new DefaultNundw_RoadMaintenanceTypeEnumFormat {}
  trait DefaultNundw_RoadMaintenanceTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.RoadMaintenanceTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RoadMaintenanceTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("clearanceWork")) => nu.ndw.ClearanceWorkValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("controlledAvalanche")) => nu.ndw.ControlledAvalanche
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("installationWork")) => nu.ndw.InstallationWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("grassCuttingWork")) => nu.ndw.GrassCuttingWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("litterClearance")) => nu.ndw.LitterClearance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("maintenanceWork")) => nu.ndw.MaintenanceWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overheadWorks")) => nu.ndw.OverheadWorks
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("repairWork")) => nu.ndw.RepairWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("resurfacingWork")) => nu.ndw.ResurfacingWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadMarkingWork")) => nu.ndw.RoadMarkingWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsideWork")) => nu.ndw.RoadsideWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadworksClearance")) => nu.ndw.RoadworksClearance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadworks")) => nu.ndw.RoadworksValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rockFallPreventativeMaintenance")) => nu.ndw.RockFallPreventativeMaintenance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("saltingInProgress")) => nu.ndw.SaltingInProgress
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowploughsInUse")) => nu.ndw.SnowploughsInUse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sweepingOfRoad")) => nu.ndw.SweepingOfRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("treeAndVegetationCuttingWork")) => nu.ndw.TreeAndVegetationCuttingWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue77

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadMaintenanceTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RoadMaintenanceTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_RoadNodeFormat extends scalaxb.ElemNameParser[nu.ndw.RoadNode] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("RoadNode")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.RoadNode] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nameOfRoad")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "typeOfRoad")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadDestination")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadOrigination")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceToThisRoad")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "junctionName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadNodeExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      nu.ndw.RoadNode(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.RoadTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.MultilingualString](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.RoadNode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.nameOfRoad map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("nameOfRoad"), __scope, false) } getOrElse {Nil},
        __obj.roadIdentifier map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.typeOfRoad map { scalaxb.toXML[nu.ndw.RoadTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("typeOfRoad"), __scope, false) } getOrElse {Nil},
        __obj.roadDestination flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadDestination"), __scope, false) },
        __obj.roadOrigination flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadOrigination"), __scope, false) },
        __obj.distanceToThisRoad map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceToThisRoad"), __scope, false) } getOrElse {Nil},
        __obj.roadExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.MultilingualString](__obj.junctionName, Some("http://datex2.eu/schema/2/2_0"), Some("junctionName"), __scope, false),
        __obj.roadNodeExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadNodeExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_RoadOperatorServiceDisruptionFormat extends scalaxb.ElemNameParser[nu.ndw.RoadOperatorServiceDisruption] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("RoadOperatorServiceDisruption")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.RoadOperatorServiceDisruption] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonRoadEventInformationExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadOperatorServiceDisruptionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadOperatorServiceDisruptionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      nu.ndw.RoadOperatorServiceDisruption(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[nu.ndw.RoadOperatorServiceDisruptionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.RoadOperatorServiceDisruption, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.RoadOperatorServiceDisruption, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.nonRoadEventInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonRoadEventInformationExtension"), __scope, false) } getOrElse {Nil},
        __obj.roadOperatorServiceDisruptionType flatMap { scalaxb.toXML[nu.ndw.RoadOperatorServiceDisruptionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadOperatorServiceDisruptionType"), __scope, false) },
        __obj.roadOperatorServiceDisruptionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadOperatorServiceDisruptionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_RoadOperatorServiceDisruptionTypeEnumFormat = new DefaultNundw_RoadOperatorServiceDisruptionTypeEnumFormat {}
  trait DefaultNundw_RoadOperatorServiceDisruptionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.RoadOperatorServiceDisruptionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RoadOperatorServiceDisruptionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("emergencyTelephoneNumberOutOfService")) => nu.ndw.EmergencyTelephoneNumberOutOfService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("informationServiceTelephoneNumberOutOfService")) => nu.ndw.InformationServiceTelephoneNumberOutOfService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noTrafficOfficerPatrolService")) => nu.ndw.NoTrafficOfficerPatrolService

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadOperatorServiceDisruptionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RoadOperatorServiceDisruptionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_RoadOrCarriagewayOrLaneManagementFormat extends scalaxb.ElemNameParser[nu.ndw.RoadOrCarriagewayOrLaneManagement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("RoadOrCarriagewayOrLaneManagement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.RoadOrCarriagewayOrLaneManagement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "complianceOption")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficDirection")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "placesAtWhichApplicable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "automaticallyInitiated")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "networkManagementExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadOrCarriagewayOrLaneManagementType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "minimumCarOccupancy")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadOrCarriagewayOrLaneManagementExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      nu.ndw.RoadOrCarriagewayOrLaneManagement(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ComplianceOptionEnum](p23, scalaxb.ElemName(node) :: stack),
        p24 map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw.TrafficTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw.PlacesEnum](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.RoadOrCarriagewayOrLaneManagementTypeEnum](p30, scalaxb.ElemName(node) :: stack),
        p31.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.RoadOrCarriagewayOrLaneManagement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.RoadOrCarriagewayOrLaneManagement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ComplianceOptionEnum](__obj.complianceOption, Some("http://datex2.eu/schema/2/2_0"), Some("complianceOption"), __scope, false),
        __obj.applicableForTrafficDirection flatMap { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficDirection"), __scope, false) },
        __obj.applicableForTrafficType flatMap { scalaxb.toXML[nu.ndw.TrafficTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficType"), __scope, false) },
        __obj.placesAtWhichApplicable flatMap { scalaxb.toXML[nu.ndw.PlacesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("placesAtWhichApplicable"), __scope, false) },
        __obj.automaticallyInitiated map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("automaticallyInitiated"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) },
        __obj.networkManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("networkManagementExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.RoadOrCarriagewayOrLaneManagementTypeEnum](__obj.roadOrCarriagewayOrLaneManagementType, Some("http://datex2.eu/schema/2/2_0"), Some("roadOrCarriagewayOrLaneManagementType"), __scope, false),
        __obj.minimumCarOccupancy map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("minimumCarOccupancy"), __scope, false) } getOrElse {Nil},
        __obj.roadOrCarriagewayOrLaneManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadOrCarriagewayOrLaneManagementExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_RoadOrCarriagewayOrLaneManagementTypeEnumFormat = new DefaultNundw_RoadOrCarriagewayOrLaneManagementTypeEnumFormat {}
  trait DefaultNundw_RoadOrCarriagewayOrLaneManagementTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.RoadOrCarriagewayOrLaneManagementTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RoadOrCarriagewayOrLaneManagementTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carPoolLaneInOperation")) => nu.ndw.CarPoolLaneInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carriagewayClosures")) => nu.ndw.CarriagewayClosures
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("clearALaneForEmergencyVehicles")) => nu.ndw.ClearALaneForEmergencyVehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("clearALaneForSnowploughsAndGrittingVehicles")) => nu.ndw.ClearALaneForSnowploughsAndGrittingVehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("closedPermanentlyForTheWinter")) => nu.ndw.ClosedPermanentlyForTheWinter
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("contraflow")) => nu.ndw.Contraflow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotUseSpecifiedLanesOrCarriageways")) => nu.ndw.DoNotUseSpecifiedLanesOrCarriageways
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hardShoulderRunningInOperation")) => nu.ndw.HardShoulderRunningInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heightRestrictionInOperation")) => nu.ndw.HeightRestrictionInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("intermittentShortTermClosures")) => nu.ndw.IntermittentShortTermClosures
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("keepToTheLeft")) => nu.ndw.KeepToTheLeft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("keepToTheRight")) => nu.ndw.KeepToTheRight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("laneClosures")) => nu.ndw.LaneClosures
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lanesDeviated")) => nu.ndw.LanesDeviated
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("narrowLanes")) => nu.ndw.NarrowLanes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("newRoadworksLayout")) => nu.ndw.NewRoadworksLayout
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overnightClosures")) => nu.ndw.OvernightClosures
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadCleared")) => nu.ndw.RoadCleared
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadClosed")) => nu.ndw.RoadClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rollingRoadBlock")) => nu.ndw.RollingRoadBlock
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rushHourLaneInOperation")) => nu.ndw.RushHourLaneInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("singleAlternateLineTraffic")) => nu.ndw.SingleAlternateLineTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tidalFlowLaneInOperation")) => nu.ndw.TidalFlowLaneInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("turnAroundInOperation")) => nu.ndw.TurnAroundInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useOfSpecifiedLanesOrCarriagewaysAllowed")) => nu.ndw.UseOfSpecifiedLanesOrCarriagewaysAllowed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useSpecifiedLanesOrCarriageways")) => nu.ndw.UseSpecifiedLanesOrCarriageways
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleStorageInOperation")) => nu.ndw.VehicleStorageInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("weightRestrictionInOperation")) => nu.ndw.WeightRestrictionInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue13

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadOrCarriagewayOrLaneManagementTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RoadOrCarriagewayOrLaneManagementTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_RoadsideAssistanceFormat extends scalaxb.ElemNameParser[nu.ndw.RoadsideAssistance] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("RoadsideAssistance")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.RoadsideAssistance] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadsideAssistanceType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadsideAssistanceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      nu.ndw.RoadsideAssistance(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.RoadsideAssistanceTypeEnum](p23, scalaxb.ElemName(node) :: stack),
        p24.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.RoadsideAssistance, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.RoadsideAssistance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.RoadsideAssistanceTypeEnum](__obj.roadsideAssistanceType, Some("http://datex2.eu/schema/2/2_0"), Some("roadsideAssistanceType"), __scope, false),
        __obj.roadsideAssistanceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadsideAssistanceExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_RoadsideAssistanceTypeEnumFormat = new DefaultNundw_RoadsideAssistanceTypeEnumFormat {}
  trait DefaultNundw_RoadsideAssistanceTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.RoadsideAssistanceTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RoadsideAssistanceTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("airAmbulance")) => nu.ndw.AirAmbulance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("busPassengerAssistance")) => nu.ndw.BusPassengerAssistance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("emergencyServices")) => nu.ndw.EmergencyServices
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("firstAid")) => nu.ndw.FirstAid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("foodDelivery")) => nu.ndw.FoodDelivery
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("helicopterRescue")) => nu.ndw.HelicopterRescue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleRepair")) => nu.ndw.VehicleRepair
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleRecovery")) => nu.ndw.VehicleRecovery
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue12

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadsideAssistanceTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RoadsideAssistanceTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_RoadsideServiceDisruptionFormat extends scalaxb.ElemNameParser[nu.ndw.RoadsideServiceDisruption] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("RoadsideServiceDisruption")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.RoadsideServiceDisruption] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonRoadEventInformationExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadsideServiceDisruptionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadsideServiceDisruptionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      nu.ndw.RoadsideServiceDisruption(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[nu.ndw.RoadsideServiceDisruptionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.RoadsideServiceDisruption, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.RoadsideServiceDisruption, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.nonRoadEventInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonRoadEventInformationExtension"), __scope, false) } getOrElse {Nil},
        __obj.roadsideServiceDisruptionType flatMap { scalaxb.toXML[nu.ndw.RoadsideServiceDisruptionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadsideServiceDisruptionType"), __scope, false) },
        __obj.roadsideServiceDisruptionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadsideServiceDisruptionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_RoadsideServiceDisruptionTypeEnumFormat = new DefaultNundw_RoadsideServiceDisruptionTypeEnumFormat {}
  trait DefaultNundw_RoadsideServiceDisruptionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.RoadsideServiceDisruptionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RoadsideServiceDisruptionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("barClosed")) => nu.ndw.BarClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dieselShortage")) => nu.ndw.DieselShortage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fuelShortage")) => nu.ndw.FuelShortage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lpgShortage")) => nu.ndw.LpgShortage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("methaneShortage")) => nu.ndw.MethaneShortage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noDieselForHeavyVehicles")) => nu.ndw.NoDieselForHeavyVehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noDieselForLightVehicles")) => nu.ndw.NoDieselForLightVehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noPublicTelephones")) => nu.ndw.NoPublicTelephones
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noToiletFacilities")) => nu.ndw.NoToiletFacilities
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noVehicleRepairFacilities")) => nu.ndw.NoVehicleRepairFacilities
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrolShortage")) => nu.ndw.PetrolShortage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restAreaBusy")) => nu.ndw.RestAreaBusy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restAreaClosed")) => nu.ndw.RestAreaClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restAreaOvercrowdedDriveToAnotherRestArea")) => nu.ndw.RestAreaOvercrowdedDriveToAnotherRestArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceAreaBusy")) => nu.ndw.ServiceAreaBusy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceAreaClosed")) => nu.ndw.ServiceAreaClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceAreaFuelStationClosed")) => nu.ndw.ServiceAreaFuelStationClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceAreaOvercrowdedDriveToAnotherServiceArea")) => nu.ndw.ServiceAreaOvercrowdedDriveToAnotherServiceArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceAreaRestaurantClosed")) => nu.ndw.ServiceAreaRestaurantClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("someCommercialServicesClosed")) => nu.ndw.SomeCommercialServicesClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("waterShortage")) => nu.ndw.WaterShortage

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadsideServiceDisruptionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RoadsideServiceDisruptionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_RoadSurfaceConditionInformationTypeFormat extends scalaxb.ElemNameParser[nu.ndw.RoadSurfaceConditionInformationType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("RoadSurfaceConditionInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.RoadSurfaceConditionInformationType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherDataExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherRelatedRoadConditionType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadSurfaceConditionMeasurements")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadSurfaceConditionInformationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.RoadSurfaceConditionInformationType(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[nu.ndw.WeatherRelatedRoadConditionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.RoadSurfaceConditionMeasurements](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.RoadSurfaceConditionInformationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.RoadSurfaceConditionInformationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.weatherDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.weatherRelatedRoadConditionType flatMap { scalaxb.toXML[nu.ndw.WeatherRelatedRoadConditionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherRelatedRoadConditionType"), __scope, false) },
        scalaxb.toXML[nu.ndw.RoadSurfaceConditionMeasurements](__obj.roadSurfaceConditionMeasurements, Some("http://datex2.eu/schema/2/2_0"), Some("roadSurfaceConditionMeasurements"), __scope, false),
        __obj.roadSurfaceConditionInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadSurfaceConditionInformationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_RoadSurfaceConditionMeasurementsFormat extends scalaxb.ElemNameParser[nu.ndw.RoadSurfaceConditionMeasurements] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("RoadSurfaceConditionMeasurements")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.RoadSurfaceConditionMeasurements] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadSurfaceTemperature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "protectionTemperature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "deIcingApplicationRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "deIcingConcentration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "depthOfSnow")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "waterFilmThickness")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadSurfaceConditionMeasurementsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.RoadSurfaceConditionMeasurements(p1.headOption map { scalaxb.fromXML[nu.ndw.TemperatureValue](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.TemperatureValue](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.ApplicationRateValue](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.KilogramsConcentrationValue](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.FloatingPointMetreDistanceValue](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.FloatingPointMetreDistanceValue](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.RoadSurfaceConditionMeasurements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.roadSurfaceTemperature map { scalaxb.toXML[nu.ndw.TemperatureValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadSurfaceTemperature"), __scope, false) } getOrElse {Nil},
        __obj.protectionTemperature map { scalaxb.toXML[nu.ndw.TemperatureValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("protectionTemperature"), __scope, false) } getOrElse {Nil},
        __obj.deIcingApplicationRate map { scalaxb.toXML[nu.ndw.ApplicationRateValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("deIcingApplicationRate"), __scope, false) } getOrElse {Nil},
        __obj.deIcingConcentration map { scalaxb.toXML[nu.ndw.KilogramsConcentrationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("deIcingConcentration"), __scope, false) } getOrElse {Nil},
        __obj.depthOfSnow map { scalaxb.toXML[nu.ndw.FloatingPointMetreDistanceValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("depthOfSnow"), __scope, false) } getOrElse {Nil},
        __obj.waterFilmThickness map { scalaxb.toXML[nu.ndw.FloatingPointMetreDistanceValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("waterFilmThickness"), __scope, false) } getOrElse {Nil},
        __obj.roadSurfaceConditionMeasurementsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadSurfaceConditionMeasurementsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_RoadTypeEnumFormat = new DefaultNundw_RoadTypeEnumFormat {}
  trait DefaultNundw_RoadTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.RoadTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RoadTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorway")) => nu.ndw.MotorwayValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trunkRoad")) => nu.ndw.TrunkRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mainRoad")) => nu.ndw.MainRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue78

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RoadTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_RoadworksTypeFormat extends scalaxb.XMLFormat[nu.ndw.RoadworksType] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadworksType] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("MaintenanceWorks")) => Right(scalaxb.fromXML[nu.ndw.MaintenanceWorks](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ConstructionWorks")) => Right(scalaxb.fromXML[nu.ndw.ConstructionWorks](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.RoadworksType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.MaintenanceWorks => scalaxb.toXML[nu.ndw.MaintenanceWorks](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.ConstructionWorks => scalaxb.toXML[nu.ndw.ConstructionWorks](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildNundw_RoadworksDurationEnumFormat = new DefaultNundw_RoadworksDurationEnumFormat {}
  trait DefaultNundw_RoadworksDurationEnumFormat extends scalaxb.XMLFormat[nu.ndw.RoadworksDurationEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RoadworksDurationEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("longTerm")) => nu.ndw.LongTermValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mediumTerm")) => nu.ndw.MediumTerm
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shortTerm")) => nu.ndw.ShortTermValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadworksDurationEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RoadworksDurationEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_RoadworksScaleEnumFormat = new DefaultNundw_RoadworksScaleEnumFormat {}
  trait DefaultNundw_RoadworksScaleEnumFormat extends scalaxb.XMLFormat[nu.ndw.RoadworksScaleEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.RoadworksScaleEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("major")) => nu.ndw.Major
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("medium")) => nu.ndw.MediumValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("minor")) => nu.ndw.Minor

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.RoadworksScaleEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.RoadworksScaleEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ServiceFacilityFormat extends scalaxb.ElemNameParser[nu.ndw.ServiceFacility] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("ServiceFacility")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.ServiceFacility] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "equipmentOrServiceFacilityIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "availability")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfEquipmentOrServiceFacility")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "additionalDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "otherEquipmentOrServiceFacility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "accessibility")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nameOrBrand")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "comment")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "photoUrl")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForUser")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "availabilityAndOpeningTimes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tariffsAndPayment")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacilityExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "serviceFacilityType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfSubitems")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceFromParkingSite")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "serviceFacilityExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      nu.ndw.ServiceFacility(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.AvailabilityEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[nu.ndw.AccessibilityEnum](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.UserTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.OpeningTimes](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.TariffsAndPayment](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ServiceFacilityTypeEnum](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.ServiceFacility, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.equipmentOrServiceFacilityIdentifier flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("equipmentOrServiceFacilityIdentifier"), __scope, false) },
        __obj.availability map { scalaxb.toXML[nu.ndw.AvailabilityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("availability"), __scope, false) } getOrElse {Nil},
        __obj.numberOfEquipmentOrServiceFacility map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfEquipmentOrServiceFacility"), __scope, false) } getOrElse {Nil},
        __obj.additionalDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("additionalDescription"), __scope, false) } getOrElse {Nil},
        __obj.otherEquipmentOrServiceFacility map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("otherEquipmentOrServiceFacility"), __scope, false) } getOrElse {Nil},
        __obj.accessibility flatMap { scalaxb.toXML[nu.ndw.AccessibilityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("accessibility"), __scope, false) },
        __obj.nameOrBrand map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("nameOrBrand"), __scope, false) } getOrElse {Nil},
        __obj.comment map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("comment"), __scope, false) } getOrElse {Nil},
        __obj.photoUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("photoUrl"), __scope, false) } getOrElse {Nil},
        __obj.applicableForUser flatMap { scalaxb.toXML[nu.ndw.UserTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForUser"), __scope, false) },
        __obj.availabilityAndOpeningTimes map { scalaxb.toXML[nu.ndw.OpeningTimes](_, Some("http://datex2.eu/schema/2/2_0"), Some("availabilityAndOpeningTimes"), __scope, false) } getOrElse {Nil},
        __obj.tariffsAndPayment map { scalaxb.toXML[nu.ndw.TariffsAndPayment](_, Some("http://datex2.eu/schema/2/2_0"), Some("tariffsAndPayment"), __scope, false) } getOrElse {Nil},
        __obj.groupOfLocations map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false) } getOrElse {Nil},
        __obj.applicableForVehicles flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForVehicles"), __scope, false) },
        __obj.parkingEquipmentOrServiceFacilityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacilityExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ServiceFacilityTypeEnum](__obj.serviceFacilityType, Some("http://datex2.eu/schema/2/2_0"), Some("serviceFacilityType"), __scope, false),
        __obj.numberOfSubitems map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfSubitems"), __scope, false) } getOrElse {Nil},
        __obj.distanceFromParkingSite map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceFromParkingSite"), __scope, false) } getOrElse {Nil},
        __obj.serviceFacilityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("serviceFacilityExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ServiceFacilityTypeEnumFormat = new DefaultNundw_ServiceFacilityTypeEnumFormat {}
  trait DefaultNundw_ServiceFacilityTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.ServiceFacilityTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ServiceFacilityTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hotel")) => nu.ndw.Hotel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motel")) => nu.ndw.Motel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overnightAccommodation")) => nu.ndw.OvernightAccommodation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shop")) => nu.ndw.Shop
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("kiosk")) => nu.ndw.Kiosk
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("foodShopping")) => nu.ndw.FoodShopping
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cafe")) => nu.ndw.Cafe
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restaurant")) => nu.ndw.Restaurant
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restaurantSelfService")) => nu.ndw.RestaurantSelfService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorwayRestaurant")) => nu.ndw.MotorwayRestaurant
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorwayRestaurantSmall")) => nu.ndw.MotorwayRestaurantSmall
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sparePartsShopping")) => nu.ndw.SparePartsShopping
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("petrolStation")) => nu.ndw.PetrolStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleMaintenance")) => nu.ndw.VehicleMaintenance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tyreRepair")) => nu.ndw.TyreRepair
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("truckRepair")) => nu.ndw.TruckRepair
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("truckWash")) => nu.ndw.TruckWash
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carWash")) => nu.ndw.CarWash
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pharmacy")) => nu.ndw.Pharmacy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("medicalFacility")) => nu.ndw.MedicalFacility
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("police")) => nu.ndw.Police
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("touristInformation")) => nu.ndw.TouristInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bikeSharing")) => nu.ndw.BikeSharing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("docstop")) => nu.ndw.Docstop
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("laundry")) => nu.ndw.Laundry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("leisureActivities")) => nu.ndw.LeisureActivities
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue44
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue79

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ServiceFacilityTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ServiceFacilityTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_SeverityEnumFormat = new DefaultNundw_SeverityEnumFormat {}
  trait DefaultNundw_SeverityEnumFormat extends scalaxb.XMLFormat[nu.ndw.SeverityEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.SeverityEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("highest")) => nu.ndw.Highest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("high")) => nu.ndw.High
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("medium")) => nu.ndw.Medium
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("low")) => nu.ndw.Low
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lowest")) => nu.ndw.Lowest
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("none")) => nu.ndw.NoneType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue6

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.SeverityEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.SeverityEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_SignSettingFormat extends scalaxb.ElemNameParser[nu.ndw.SignSetting] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SignSetting")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SignSetting] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsSetting")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "signSettingExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      nu.ndw.SignSetting(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.VmsSetting](p23, scalaxb.ElemName(node) :: stack),
        p24.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.SignSetting, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.SignSetting, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.VmsSetting](__obj.vmsSetting, Some("http://datex2.eu/schema/2/2_0"), Some("vmsSetting"), __scope, false),
        __obj.signSettingExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("signSettingExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_SiteMeasurementsFormat extends scalaxb.ElemNameParser[nu.ndw.SiteMeasurements] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SiteMeasurements")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SiteMeasurements] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementTimeDefault")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measuredValue")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "siteMeasurementsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.SiteMeasurements(scalaxb.fromXML[nu.ndw._MeasurementSiteRecordVersionedReference](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[nu.ndw._SiteMeasurementsIndexMeasuredValue](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.SiteMeasurements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw._MeasurementSiteRecordVersionedReference](__obj.measurementSiteReference, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteReference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.measurementTimeDefault, Some("http://datex2.eu/schema/2/2_0"), Some("measurementTimeDefault"), __scope, false),
        __obj.measuredValue flatMap { scalaxb.toXML[nu.ndw._SiteMeasurementsIndexMeasuredValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("measuredValue"), __scope, false) },
        __obj.siteMeasurementsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("siteMeasurementsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_SituationTypeFormat extends scalaxb.ElemNameParser[nu.ndw.SituationType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Situation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SituationType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overallSeverity")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "relatedSituation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationVersionTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecord")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.SituationType(p1.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw._SituationVersionedReference](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.HeaderInformation](p4, scalaxb.ElemName(node) :: stack),
        p5 map { scalaxb.fromXML[nu.ndw.SituationRecord](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.SituationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.SituationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.overallSeverity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("overallSeverity"), __scope, false) } getOrElse {Nil},
        __obj.relatedSituation flatMap { scalaxb.toXML[nu.ndw._SituationVersionedReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("relatedSituation"), __scope, false) },
        __obj.situationVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationVersionTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.HeaderInformation](__obj.headerInformation, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false),
        __obj.situationRecord flatMap { scalaxb.toXML[nu.ndw.SituationRecord](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecord"), __scope, false) },
        __obj.situationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_SituationPublicationFormat extends scalaxb.ElemNameParser[nu.ndw.SituationPublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SituationPublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SituationPublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationCreator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublicationExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationPublicationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.SituationPublication(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[nu.ndw.SituationType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.SituationPublication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.SituationPublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.feedDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedDescription"), __scope, false) } getOrElse {Nil},
        __obj.feedType map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.publicationTime, Some("http://datex2.eu/schema/2/2_0"), Some("publicationTime"), __scope, false),
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.publicationCreator, Some("http://datex2.eu/schema/2/2_0"), Some("publicationCreator"), __scope, false),
        __obj.payloadPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublicationExtension"), __scope, false) } getOrElse {Nil},
        __obj.situation flatMap { scalaxb.toXML[nu.ndw.SituationType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situation"), __scope, false) },
        __obj.situationPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationPublicationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_SituationRecordFormat extends scalaxb.XMLFormat[nu.ndw.SituationRecord] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.SituationRecord] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonRoadEventInformation")) => Right(scalaxb.fromXML[nu.ndw.NonRoadEventInformation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TransitInformation")) => Right(scalaxb.fromXML[nu.ndw.TransitInformation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadsideServiceDisruption")) => Right(scalaxb.fromXML[nu.ndw.RoadsideServiceDisruption](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadOperatorServiceDisruption")) => Right(scalaxb.fromXML[nu.ndw.RoadOperatorServiceDisruption](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("CarParks")) => Right(scalaxb.fromXML[nu.ndw.CarParks](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GenericSituationRecord")) => Right(scalaxb.fromXML[nu.ndw.GenericSituationRecord](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("OperatorAction")) => Right(scalaxb.fromXML[nu.ndw.OperatorActionable](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("SignSetting")) => Right(scalaxb.fromXML[nu.ndw.SignSetting](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadsideAssistance")) => Right(scalaxb.fromXML[nu.ndw.RoadsideAssistance](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NetworkManagement")) => Right(scalaxb.fromXML[nu.ndw.NetworkManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WinterDrivingManagement")) => Right(scalaxb.fromXML[nu.ndw.WinterDrivingManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadOrCarriagewayOrLaneManagement")) => Right(scalaxb.fromXML[nu.ndw.RoadOrCarriagewayOrLaneManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ReroutingManagement")) => Right(scalaxb.fromXML[nu.ndw.ReroutingManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GeneralInstructionOrMessageToRoadUsers")) => Right(scalaxb.fromXML[nu.ndw.GeneralInstructionOrMessageToRoadUsers](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GeneralNetworkManagement")) => Right(scalaxb.fromXML[nu.ndw.GeneralNetworkManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("SpeedManagement")) => Right(scalaxb.fromXML[nu.ndw.SpeedManagement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Roadworks")) => Right(scalaxb.fromXML[nu.ndw.RoadworksType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("MaintenanceWorks")) => Right(scalaxb.fromXML[nu.ndw.MaintenanceWorks](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("ConstructionWorks")) => Right(scalaxb.fromXML[nu.ndw.ConstructionWorks](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficElement")) => Right(scalaxb.fromXML[nu.ndw.TrafficElement](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Obstruction")) => Right(scalaxb.fromXML[nu.ndw.ObstructionType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VehicleObstruction")) => Right(scalaxb.fromXML[nu.ndw.VehicleObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("InfrastructureDamageObstruction")) => Right(scalaxb.fromXML[nu.ndw.InfrastructureDamageObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("EnvironmentalObstruction")) => Right(scalaxb.fromXML[nu.ndw.EnvironmentalObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AnimalPresenceObstruction")) => Right(scalaxb.fromXML[nu.ndw.AnimalPresenceObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GeneralObstruction")) => Right(scalaxb.fromXML[nu.ndw.GeneralObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Conditions")) => Right(scalaxb.fromXML[nu.ndw.Conditionsable](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PoorEnvironmentConditions")) => Right(scalaxb.fromXML[nu.ndw.PoorEnvironmentConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadConditions")) => Right(scalaxb.fromXML[nu.ndw.RoadConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WeatherRelatedRoadConditions")) => Right(scalaxb.fromXML[nu.ndw.WeatherRelatedRoadConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonWeatherRelatedRoadConditions")) => Right(scalaxb.fromXML[nu.ndw.NonWeatherRelatedRoadConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Accident")) => Right(scalaxb.fromXML[nu.ndw.AccidentType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AbnormalTraffic")) => Right(scalaxb.fromXML[nu.ndw.AbnormalTraffic](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Activity")) => Right(scalaxb.fromXML[nu.ndw.Activity](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PublicEvent")) => Right(scalaxb.fromXML[nu.ndw.PublicEvent](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AuthorityOperation")) => Right(scalaxb.fromXML[nu.ndw.AuthorityOperation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("DisturbanceActivity")) => Right(scalaxb.fromXML[nu.ndw.DisturbanceActivity](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("EquipmentOrSystemFault")) => Right(scalaxb.fromXML[nu.ndw.EquipmentOrSystemFault](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.SituationRecord, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.NonRoadEventInformation => scalaxb.toXML[nu.ndw.NonRoadEventInformation](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.GenericSituationRecord => scalaxb.toXML[nu.ndw.GenericSituationRecord](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.OperatorActionable => scalaxb.toXML[nu.ndw.OperatorActionable](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TrafficElement => scalaxb.toXML[nu.ndw.TrafficElement](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_SituationRecordExtendedApprovedFormat extends scalaxb.ElemNameParser[nu.ndw.SituationRecordExtendedApproved] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SituationRecordExtendedApproved")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SituationRecordExtendedApproved] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "safetyRelatedMessage")) ^^
      { case p1 =>
      nu.ndw.SituationRecordExtendedApproved(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.SituationRecordExtendedApproved, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.safetyRelatedMessage map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("safetyRelatedMessage"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_SourceFormat extends scalaxb.ElemNameParser[nu.ndw.Source] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Source")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Source] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "sourceCountry")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "sourceIdentification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "sourceName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "sourceType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reliable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "sourceExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.Source(p1.headOption map { scalaxb.fromXML[nu.ndw.CountryEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.SourceTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Source, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.sourceCountry map { scalaxb.toXML[nu.ndw.CountryEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("sourceCountry"), __scope, false) } getOrElse {Nil},
        __obj.sourceIdentification map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("sourceIdentification"), __scope, false) } getOrElse {Nil},
        __obj.sourceName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("sourceName"), __scope, false) } getOrElse {Nil},
        __obj.sourceType map { scalaxb.toXML[nu.ndw.SourceTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("sourceType"), __scope, false) } getOrElse {Nil},
        __obj.reliable map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("reliable"), __scope, false) } getOrElse {Nil},
        __obj.sourceExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("sourceExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_SourceTypeEnumFormat = new DefaultNundw_SourceTypeEnumFormat {}
  trait DefaultNundw_SourceTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.SourceTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.SourceTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("automobileClubPatrol")) => nu.ndw.AutomobileClubPatrol
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cameraObservation")) => nu.ndw.CameraObservation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freightVehicleOperator")) => nu.ndw.FreightVehicleOperator
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inductionLoopMonitoringStation")) => nu.ndw.InductionLoopMonitoringStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("infraredMonitoringStation")) => nu.ndw.InfraredMonitoringStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("microwaveMonitoringStation")) => nu.ndw.MicrowaveMonitoringStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("mobileTelephoneCaller")) => nu.ndw.MobileTelephoneCaller
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nonPoliceEmergencyServicePatrol")) => nu.ndw.NonPoliceEmergencyServicePatrol
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("otherInformation")) => nu.ndw.OtherInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("otherOfficialVehicle")) => nu.ndw.OtherOfficialVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("policePatrol")) => nu.ndw.PolicePatrol
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("privateBreakdownService")) => nu.ndw.PrivateBreakdownService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicAndPrivateUtilities")) => nu.ndw.PublicAndPrivateUtilities
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("registeredMotoristObserver")) => nu.ndw.RegisteredMotoristObserver
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadAuthorities")) => nu.ndw.RoadAuthorities
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadOperatorPatrol")) => nu.ndw.RoadOperatorPatrol
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsideTelephoneCaller")) => nu.ndw.RoadsideTelephoneCaller
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("spotterAircraft")) => nu.ndw.SpotterAircraft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficMonitoringStation")) => nu.ndw.TrafficMonitoringStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("transitOperator")) => nu.ndw.TransitOperator
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleProbeMeasurement")) => nu.ndw.VehicleProbeMeasurement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("videoProcessingMonitoringStation")) => nu.ndw.VideoProcessingMonitoringStation

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.SourceTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.SourceTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_SpecialDayFormat extends scalaxb.ElemNameParser[nu.ndw.SpecialDay] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SpecialDay")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SpecialDay] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "intersectWithApplicableDays")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "specialDayType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "specialDayName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicHoliday")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "specialDayExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.SpecialDay(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.SpecialDayTypeEnum](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.PublicHolidayType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.SpecialDay, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.intersectWithApplicableDays, Some("http://datex2.eu/schema/2/2_0"), Some("intersectWithApplicableDays"), __scope, false),
        scalaxb.toXML[nu.ndw.SpecialDayTypeEnum](__obj.specialDayType, Some("http://datex2.eu/schema/2/2_0"), Some("specialDayType"), __scope, false),
        __obj.specialDayName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("specialDayName"), __scope, false) } getOrElse {Nil},
        __obj.publicHoliday flatMap { scalaxb.toXML[nu.ndw.PublicHolidayType](_, Some("http://datex2.eu/schema/2/2_0"), Some("publicHoliday"), __scope, false) },
        __obj.specialDayExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("specialDayExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_SpecialDayTypeEnumFormat = new DefaultNundw_SpecialDayTypeEnumFormat {}
  trait DefaultNundw_SpecialDayTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.SpecialDayTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.SpecialDayTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bicycleRaceDay")) => nu.ndw.BicycleRaceDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bullFightDay")) => nu.ndw.BullFightDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carnivalDay")) => nu.ndw.CarnivalDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exhibitionDay")) => nu.ndw.ExhibitionDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("festivalDay")) => nu.ndw.FestivalDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gamesDay")) => nu.ndw.GamesDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("horseRaceMeetingDay")) => nu.ndw.HorseRaceMeetingDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("huntMeetingDay")) => nu.ndw.HuntMeetingDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("marathonRaceDay")) => nu.ndw.MarathonRaceDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("marketDay")) => nu.ndw.MarketDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorSportRaceMeetingDay")) => nu.ndw.MotorSportRaceMeetingDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nonWorkingDay")) => nu.ndw.NonWorkingDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("raceMeetingDay")) => nu.ndw.RaceMeetingDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("regattaDay")) => nu.ndw.RegattaDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("showDay")) => nu.ndw.ShowDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sportsMeetingDay")) => nu.ndw.SportsMeetingDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("workingDay")) => nu.ndw.WorkingDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("schoolDay")) => nu.ndw.SchoolDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("electionDay")) => nu.ndw.ElectionDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("publicHoliday")) => nu.ndw.PublicHoliday
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("holidays")) => nu.ndw.Holidays
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("undefinedDayType")) => nu.ndw.UndefinedDayType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue5
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue11

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.SpecialDayTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.SpecialDayTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_SpecialLocationParkingSiteFormat extends scalaxb.ElemNameParser[nu.ndw.SpecialLocationParkingSite] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SpecialLocationParkingSite")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SpecialLocationParkingSite] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAlias")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingDescription")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPrincipalNumberOfSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumParkingDuration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "photoUrl")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupanyDetectionType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "emergencyContact")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "owner")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "responisbleAuthority")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "securityService")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operator")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "servicePartner")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingVMS")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingLocation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRoute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingColour")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "onlyAssignedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "assignedParkingAmongOthers")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "prohibitedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tariffsAndPayment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpace")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingThresholds")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "permitsAndProhibitions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "emergencyAssemblyPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "entireArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingReservation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingLayout")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "highestFloor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lowestFloor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temporaryParking")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reservationService")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenario")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openingTimes")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAccess")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStandardsAndSecurity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpecialLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOtherSpecialLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "specialLocationParkingSiteExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 ~ p46 ~ p47 ~ p48 =>
      nu.ndw.SpecialLocationParkingSite(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.OccupancyDetectionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[nu.ndw.ParkingVMS](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p18, scalaxb.ElemName(node) :: stack),
        p19 map { scalaxb.fromXML[nu.ndw.ParkingRoute](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.RGBColour](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.TariffsAndPayment](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw._ParkingSpace](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[nu.ndw._GroupOfParkingSpaces](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[nu.ndw.ParkingThresholds](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[nu.ndw.PermitsAndProhibitions](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[nu.ndw.Area](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw.Dimension](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[nu.ndw.ReservationTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[nu.ndw.ParkingLayoutEnum](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p39 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p40 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p41 map { scalaxb.fromXML[nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[nu.ndw.OpeningTimes](_, scalaxb.ElemName(node) :: stack) },
        p43 map { scalaxb.fromXML[nu.ndw.ParkingAccess](_, scalaxb.ElemName(node) :: stack) },
        p44.headOption map { scalaxb.fromXML[nu.ndw.ParkingStandardsAndSecurity](_, scalaxb.ElemName(node) :: stack) },
        p45.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ParkingSpecialLocationEnum](p46, scalaxb.ElemName(node) :: stack),
        p47.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p48.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.SpecialLocationParkingSite, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.SpecialLocationParkingSite, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingName"), __scope, false) } getOrElse {Nil},
        __obj.parkingAlias flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAlias"), __scope, false) },
        __obj.parkingDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingDescription"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.parkingRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordVersionTime"), __scope, false),
        __obj.parkingNumberOfSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfSpaces"), __scope, false) } getOrElse {Nil},
        __obj.parkingPrincipalNumberOfSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPrincipalNumberOfSpaces"), __scope, false) } getOrElse {Nil},
        __obj.maximumParkingDuration map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumParkingDuration"), __scope, false) } getOrElse {Nil},
        __obj.photoUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("photoUrl"), __scope, false) } getOrElse {Nil},
        __obj.urlLinkAddress map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkAddress"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupanyDetectionType flatMap { scalaxb.toXML[nu.ndw.OccupancyDetectionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupanyDetectionType"), __scope, false) },
        __obj.emergencyContact flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("emergencyContact"), __scope, false) },
        __obj.owner flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("owner"), __scope, false) },
        __obj.responisbleAuthority flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("responisbleAuthority"), __scope, false) },
        __obj.securityService flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("securityService"), __scope, false) },
        __obj.operator flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("operator"), __scope, false) },
        __obj.servicePartner flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("servicePartner"), __scope, false) },
        __obj.parkingVMS flatMap { scalaxb.toXML[nu.ndw.ParkingVMS](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingVMS"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.parkingLocation, Some("http://datex2.eu/schema/2/2_0"), Some("parkingLocation"), __scope, false),
        __obj.parkingRoute flatMap { scalaxb.toXML[nu.ndw.ParkingRoute](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRoute"), __scope, false) },
        __obj.parkingColour map { scalaxb.toXML[nu.ndw.RGBColour](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingColour"), __scope, false) } getOrElse {Nil},
        __obj.onlyAssignedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("onlyAssignedParking"), __scope, false) } getOrElse {Nil},
        __obj.assignedParkingAmongOthers map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("assignedParkingAmongOthers"), __scope, false) } getOrElse {Nil},
        __obj.prohibitedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("prohibitedParking"), __scope, false) } getOrElse {Nil},
        __obj.tariffsAndPayment map { scalaxb.toXML[nu.ndw.TariffsAndPayment](_, Some("http://datex2.eu/schema/2/2_0"), Some("tariffsAndPayment"), __scope, false) } getOrElse {Nil},
        __obj.parkingEquipmentOrServiceFacility flatMap { scalaxb.toXML[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacility"), __scope, false) },
        __obj.parkingSpace flatMap { scalaxb.toXML[nu.ndw._ParkingSpace](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpace"), __scope, false) },
        __obj.groupOfParkingSpaces flatMap { scalaxb.toXML[nu.ndw._GroupOfParkingSpaces](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpaces"), __scope, false) },
        __obj.parkingThresholds map { scalaxb.toXML[nu.ndw.ParkingThresholds](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingThresholds"), __scope, false) } getOrElse {Nil},
        __obj.permitsAndProhibitions flatMap { scalaxb.toXML[nu.ndw.PermitsAndProhibitions](_, Some("http://datex2.eu/schema/2/2_0"), Some("permitsAndProhibitions"), __scope, false) },
        __obj.emergencyAssemblyPoint map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("emergencyAssemblyPoint"), __scope, false) } getOrElse {Nil},
        __obj.entireArea map { scalaxb.toXML[nu.ndw.Area](_, Some("http://datex2.eu/schema/2/2_0"), Some("entireArea"), __scope, false) } getOrElse {Nil},
        __obj.parkingRecordDimension map { scalaxb.toXML[nu.ndw.Dimension](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordDimension"), __scope, false) } getOrElse {Nil},
        __obj.parkingRecordExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.parkingReservation map { scalaxb.toXML[nu.ndw.ReservationTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingReservation"), __scope, false) } getOrElse {Nil},
        __obj.parkingLayout flatMap { scalaxb.toXML[nu.ndw.ParkingLayoutEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingLayout"), __scope, false) },
        __obj.highestFloor map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("highestFloor"), __scope, false) } getOrElse {Nil},
        __obj.lowestFloor map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("lowestFloor"), __scope, false) } getOrElse {Nil},
        __obj.temporaryParking map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("temporaryParking"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteAddress flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteAddress"), __scope, false) },
        __obj.reservationService flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("reservationService"), __scope, false) },
        __obj.parkingUsageScenario flatMap { scalaxb.toXML[nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenario"), __scope, false) },
        __obj.openingTimes map { scalaxb.toXML[nu.ndw.OpeningTimes](_, Some("http://datex2.eu/schema/2/2_0"), Some("openingTimes"), __scope, false) } getOrElse {Nil},
        __obj.parkingAccess flatMap { scalaxb.toXML[nu.ndw.ParkingAccess](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAccess"), __scope, false) },
        __obj.parkingStandardsAndSecurity map { scalaxb.toXML[nu.ndw.ParkingStandardsAndSecurity](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStandardsAndSecurity"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ParkingSpecialLocationEnum](__obj.parkingSpecialLocation, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpecialLocation"), __scope, false),
        __obj.parkingOtherSpecialLocation map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOtherSpecialLocation"), __scope, false) } getOrElse {Nil},
        __obj.specialLocationParkingSiteExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("specialLocationParkingSiteExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_SpeedManagementFormat extends scalaxb.ElemNameParser[nu.ndw.SpeedManagement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SpeedManagement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SpeedManagement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "complianceOption")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficDirection")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "placesAtWhichApplicable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "automaticallyInitiated")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "networkManagementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "speedManagementType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temporarySpeedLimit")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "speedManagementExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      nu.ndw.SpeedManagement(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ComplianceOptionEnum](p23, scalaxb.ElemName(node) :: stack),
        p24 map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw.TrafficTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw.PlacesEnum](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[nu.ndw.SpeedManagementTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.SpeedManagement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.SpeedManagement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ComplianceOptionEnum](__obj.complianceOption, Some("http://datex2.eu/schema/2/2_0"), Some("complianceOption"), __scope, false),
        __obj.applicableForTrafficDirection flatMap { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficDirection"), __scope, false) },
        __obj.applicableForTrafficType flatMap { scalaxb.toXML[nu.ndw.TrafficTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficType"), __scope, false) },
        __obj.placesAtWhichApplicable flatMap { scalaxb.toXML[nu.ndw.PlacesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("placesAtWhichApplicable"), __scope, false) },
        __obj.automaticallyInitiated map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("automaticallyInitiated"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) },
        __obj.networkManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("networkManagementExtension"), __scope, false) } getOrElse {Nil},
        __obj.speedManagementType map { scalaxb.toXML[nu.ndw.SpeedManagementTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("speedManagementType"), __scope, false) } getOrElse {Nil},
        __obj.temporarySpeedLimit map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("temporarySpeedLimit"), __scope, false) } getOrElse {Nil},
        __obj.speedManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("speedManagementExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_SpeedManagementTypeEnumFormat = new DefaultNundw_SpeedManagementTypeEnumFormat {}
  trait DefaultNundw_SpeedManagementTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.SpeedManagementTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.SpeedManagementTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("activeSpeedControlInOperation")) => nu.ndw.ActiveSpeedControlInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNotSlowdownUnnecessarily")) => nu.ndw.DoNotSlowdownUnnecessarily
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("observeSpeedLimit")) => nu.ndw.ObserveSpeedLimit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("policeSpeedChecksInOperation")) => nu.ndw.PoliceSpeedChecksInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reduceYourSpeed")) => nu.ndw.ReduceYourSpeed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("speedRestrictionInOperation")) => nu.ndw.SpeedRestrictionInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue80

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.SpeedManagementTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.SpeedManagementTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_SpeedPercentileFormat extends scalaxb.ElemNameParser[nu.ndw.SpeedPercentile] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SpeedPercentile")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SpeedPercentile] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehiclePercentage")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "speedPercentile")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "speedPercentileExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.SpeedPercentile(scalaxb.fromXML[nu.ndw.PercentageValue](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.SpeedValue](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.SpeedPercentile, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.PercentageValue](__obj.vehiclePercentage, Some("http://datex2.eu/schema/2/2_0"), Some("vehiclePercentage"), __scope, false),
        scalaxb.toXML[nu.ndw.SpeedValue](__obj.speedPercentile, Some("http://datex2.eu/schema/2/2_0"), Some("speedPercentile"), __scope, false),
        __obj.speedPercentileExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("speedPercentileExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_SpeedValueFormat extends scalaxb.ElemNameParser[nu.ndw.SpeedValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SpeedValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SpeedValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "speed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "speedValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.SpeedValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.SpeedValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.SpeedValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.speed, Some("http://datex2.eu/schema/2/2_0"), Some("speed"), __scope, false),
        __obj.speedValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("speedValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_SubjectsFormat extends scalaxb.ElemNameParser[nu.ndw.Subjects] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Subjects")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Subjects] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subjectTypeOfWorks")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfSubjects")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subjectsExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.Subjects(scalaxb.fromXML[nu.ndw.SubjectTypeOfWorksEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Subjects, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.SubjectTypeOfWorksEnum](__obj.subjectTypeOfWorks, Some("http://datex2.eu/schema/2/2_0"), Some("subjectTypeOfWorks"), __scope, false),
        __obj.numberOfSubjects map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfSubjects"), __scope, false) } getOrElse {Nil},
        __obj.subjectsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("subjectsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_SubjectTypeOfWorksEnumFormat = new DefaultNundw_SubjectTypeOfWorksEnumFormat {}
  trait DefaultNundw_SubjectTypeOfWorksEnumFormat extends scalaxb.XMLFormat[nu.ndw.SubjectTypeOfWorksEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.SubjectTypeOfWorksEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bridge")) => nu.ndw.Bridge
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("buriedCables")) => nu.ndw.BuriedCables
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("buriedServices")) => nu.ndw.BuriedServices
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("crashBarrier")) => nu.ndw.CrashBarrier
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gallery")) => nu.ndw.Gallery
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gantry")) => nu.ndw.Gantry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("gasMainWork")) => nu.ndw.GasMainWork
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("interchange")) => nu.ndw.InterchangeValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("junction")) => nu.ndw.JunctionValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("levelCrossing")) => nu.ndw.LevelCrossingValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lightingSystem")) => nu.ndw.LightingSystem
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("measurementEquipment")) => nu.ndw.MeasurementEquipment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noiseProtection")) => nu.ndw.NoiseProtection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("road")) => nu.ndw.RoadValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsideDrains")) => nu.ndw.RoadsideDrains
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsideEmbankment")) => nu.ndw.RoadsideEmbankment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadsideEquipment")) => nu.ndw.RoadsideEquipment
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadSigns")) => nu.ndw.RoadSigns
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roundabout")) => nu.ndw.RoundaboutValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tollGate")) => nu.ndw.TollGate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tunnel")) => nu.ndw.Tunnel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("waterMain")) => nu.ndw.WaterMain
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue81

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.SubjectTypeOfWorksEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.SubjectTypeOfWorksEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_SubscriptionFormat extends scalaxb.ElemNameParser[nu.ndw.Subscription] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Subscription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Subscription] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "deleteSubscription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "deliveryInterval")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatingMode")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subscriptionStartTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subscriptionState")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subscriptionStopTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "updateMethod")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "target")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "filterReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "catalogueReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "subscriptionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      nu.ndw.Subscription(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OperatingModeEnum](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.SubscriptionStateEnum](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.UpdateMethodEnum](p7, scalaxb.ElemName(node) :: stack),
        p8 map { scalaxb.fromXML[nu.ndw.Target](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.FilterReference](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.CatalogueReference](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Subscription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.deleteSubscription map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("deleteSubscription"), __scope, false) } getOrElse {Nil},
        __obj.deliveryInterval map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("deliveryInterval"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.OperatingModeEnum](__obj.operatingMode, Some("http://datex2.eu/schema/2/2_0"), Some("operatingMode"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.subscriptionStartTime, Some("http://datex2.eu/schema/2/2_0"), Some("subscriptionStartTime"), __scope, false),
        scalaxb.toXML[nu.ndw.SubscriptionStateEnum](__obj.subscriptionState, Some("http://datex2.eu/schema/2/2_0"), Some("subscriptionState"), __scope, false),
        __obj.subscriptionStopTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("subscriptionStopTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.UpdateMethodEnum](__obj.updateMethod, Some("http://datex2.eu/schema/2/2_0"), Some("updateMethod"), __scope, false),
        __obj.target flatMap { scalaxb.toXML[nu.ndw.Target](_, Some("http://datex2.eu/schema/2/2_0"), Some("target"), __scope, false) },
        __obj.filterReference map { scalaxb.toXML[nu.ndw.FilterReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("filterReference"), __scope, false) } getOrElse {Nil},
        __obj.catalogueReference map { scalaxb.toXML[nu.ndw.CatalogueReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("catalogueReference"), __scope, false) } getOrElse {Nil},
        __obj.subscriptionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("subscriptionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_SubscriptionStateEnumFormat = new DefaultNundw_SubscriptionStateEnumFormat {}
  trait DefaultNundw_SubscriptionStateEnumFormat extends scalaxb.XMLFormat[nu.ndw.SubscriptionStateEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.SubscriptionStateEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => nu.ndw.ActiveValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => nu.ndw.SuspendedValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.SubscriptionStateEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.SubscriptionStateEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_SupplementaryPositionalDescriptionFormat extends scalaxb.ElemNameParser[nu.ndw.SupplementaryPositionalDescription] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("SupplementaryPositionalDescription")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.SupplementaryPositionalDescription] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "locationDescriptor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "sequentialRampNumber")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "affectedCarriagewayAndLanes")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPositionalDescriptionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.SupplementaryPositionalDescription(p1 map { scalaxb.fromXML[nu.ndw.LocationDescriptorEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.AffectedCarriagewayAndLanes](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@locationPrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@locationPrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.SupplementaryPositionalDescription, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@locationPrecision", _) => __obj.locationPrecision foreach { x => attr = scala.xml.Attribute(null, "locationPrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.SupplementaryPositionalDescription, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.locationDescriptor flatMap { scalaxb.toXML[nu.ndw.LocationDescriptorEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("locationDescriptor"), __scope, false) },
        __obj.sequentialRampNumber map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("sequentialRampNumber"), __scope, false) } getOrElse {Nil},
        __obj.affectedCarriagewayAndLanes flatMap { scalaxb.toXML[nu.ndw.AffectedCarriagewayAndLanes](_, Some("http://datex2.eu/schema/2/2_0"), Some("affectedCarriagewayAndLanes"), __scope, false) },
        __obj.supplementaryPositionalDescriptionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPositionalDescriptionExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TargetFormat extends scalaxb.ElemNameParser[nu.ndw.Target] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Target")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Target] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "address")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "protocol")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "targetExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.Target(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Target, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.address, Some("http://datex2.eu/schema/2/2_0"), Some("address"), __scope, false),
        scalaxb.toXML[String](__obj.protocol, Some("http://datex2.eu/schema/2/2_0"), Some("protocol"), __scope, false),
        __obj.targetExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("targetExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TariffsAndPaymentFormat extends scalaxb.ElemNameParser[nu.ndw.TariffsAndPayment] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TariffsAndPayment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TariffsAndPayment] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lastUpdated")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "acceptedMeansOfPayment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "paymentMode")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "paymentAdditionalDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "freeOfCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reservationFee")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeBand")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "chargeBandByReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "acceptedPaymentCards")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tariffsAndPaymentExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      nu.ndw.TariffsAndPayment(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.MeansOfPaymentEnum](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw.ParkingPaymentModeEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[nu.ndw.ChargeBand](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[nu.ndw.ChargeBandByReference](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.AcceptedPaymentCards](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TariffsAndPayment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("lastUpdated"), __scope, false) } getOrElse {Nil},
        __obj.acceptedMeansOfPayment flatMap { scalaxb.toXML[nu.ndw.MeansOfPaymentEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("acceptedMeansOfPayment"), __scope, false) },
        __obj.paymentMode flatMap { scalaxb.toXML[nu.ndw.ParkingPaymentModeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("paymentMode"), __scope, false) },
        __obj.paymentAdditionalDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("paymentAdditionalDescription"), __scope, false) } getOrElse {Nil},
        __obj.freeOfCharge map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("freeOfCharge"), __scope, false) } getOrElse {Nil},
        __obj.reservationFee map { scalaxb.toXML[BigDecimal](_, Some("http://datex2.eu/schema/2/2_0"), Some("reservationFee"), __scope, false) } getOrElse {Nil},
        __obj.urlLinkAddress map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkAddress"), __scope, false) } getOrElse {Nil},
        __obj.chargeBand flatMap { scalaxb.toXML[nu.ndw.ChargeBand](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeBand"), __scope, false) },
        __obj.chargeBandByReference flatMap { scalaxb.toXML[nu.ndw.ChargeBandByReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("chargeBandByReference"), __scope, false) },
        __obj.acceptedPaymentCards map { scalaxb.toXML[nu.ndw.AcceptedPaymentCards](_, Some("http://datex2.eu/schema/2/2_0"), Some("acceptedPaymentCards"), __scope, false) } getOrElse {Nil},
        __obj.tariffsAndPaymentExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tariffsAndPaymentExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TemperatureTypeFormat extends scalaxb.ElemNameParser[nu.ndw.TemperatureType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Temperature")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TemperatureType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "airTemperature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dewPointTemperature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumTemperature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "minimumTemperature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temperatureExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TemperatureType(p1.headOption map { scalaxb.fromXML[nu.ndw.TemperatureValue](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.TemperatureValue](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.TemperatureValue](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.TemperatureValue](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TemperatureType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.airTemperature map { scalaxb.toXML[nu.ndw.TemperatureValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("airTemperature"), __scope, false) } getOrElse {Nil},
        __obj.dewPointTemperature map { scalaxb.toXML[nu.ndw.TemperatureValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("dewPointTemperature"), __scope, false) } getOrElse {Nil},
        __obj.maximumTemperature map { scalaxb.toXML[nu.ndw.TemperatureValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumTemperature"), __scope, false) } getOrElse {Nil},
        __obj.minimumTemperature map { scalaxb.toXML[nu.ndw.TemperatureValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("minimumTemperature"), __scope, false) } getOrElse {Nil},
        __obj.temperatureExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("temperatureExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TemperatureInformationTypeFormat extends scalaxb.ElemNameParser[nu.ndw.TemperatureInformationType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TemperatureInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TemperatureInformationType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherDataExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temperature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temperatureInformationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.TemperatureInformationType(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TemperatureType](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TemperatureInformationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TemperatureInformationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.weatherDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherDataExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TemperatureType](__obj.temperature, Some("http://datex2.eu/schema/2/2_0"), Some("temperature"), __scope, false),
        __obj.temperatureInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("temperatureInformationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TemperatureValueFormat extends scalaxb.ElemNameParser[nu.ndw.TemperatureValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TemperatureValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TemperatureValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temperature")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temperatureValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TemperatureValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TemperatureValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TemperatureValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.temperature, Some("http://datex2.eu/schema/2/2_0"), Some("temperature"), __scope, false),
        __obj.temperatureValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("temperatureValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TextDisplayAreaSettingsFormat extends scalaxb.ElemNameParser[nu.ndw.TextDisplayAreaSettings] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TextDisplayAreaSettings")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TextDisplayAreaSettings] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textLanternsOn")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textLuminanceOverride")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textLuminanceLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textLuminanceLevelName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textDisplayAreaSettingsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TextDisplayAreaSettings(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.VmsLuminanceLevelEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TextDisplayAreaSettings, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.textLanternsOn map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("textLanternsOn"), __scope, false) } getOrElse {Nil},
        __obj.textLuminanceOverride map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("textLuminanceOverride"), __scope, false) } getOrElse {Nil},
        __obj.textLuminanceLevel map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("textLuminanceLevel"), __scope, false) } getOrElse {Nil},
        __obj.textLuminanceLevelName map { scalaxb.toXML[nu.ndw.VmsLuminanceLevelEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("textLuminanceLevelName"), __scope, false) } getOrElse {Nil},
        __obj.textDisplayAreaSettingsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("textDisplayAreaSettingsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TimePeriodByHourFormat extends scalaxb.ElemNameParser[nu.ndw.TimePeriodByHour] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TimePeriodByHour")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TimePeriodByHour] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "timePeriodOfDayExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "startTimeOfPeriod")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "endTimeOfPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "timePeriodByHourExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.TimePeriodByHour(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TimePeriodByHour, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.timePeriodOfDayExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("timePeriodOfDayExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.startTimeOfPeriod, Some("http://datex2.eu/schema/2/2_0"), Some("startTimeOfPeriod"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.endTimeOfPeriod, Some("http://datex2.eu/schema/2/2_0"), Some("endTimeOfPeriod"), __scope, false),
        __obj.timePeriodByHourExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("timePeriodByHourExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TimePeriodOfDayFormat extends scalaxb.XMLFormat[nu.ndw.TimePeriodOfDay] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TimePeriodOfDay] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TimePeriodByHour")) => Right(scalaxb.fromXML[nu.ndw.TimePeriodByHour](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.TimePeriodOfDay, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TimePeriodByHour => scalaxb.toXML[nu.ndw.TimePeriodByHour](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  def buildNundw_TimePrecisionEnumFormat = new DefaultNundw_TimePrecisionEnumFormat {}
  trait DefaultNundw_TimePrecisionEnumFormat extends scalaxb.XMLFormat[nu.ndw.TimePrecisionEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TimePrecisionEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tenthsOfSecond")) => nu.ndw.TenthsOfSecond
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("second")) => nu.ndw.Second
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("minute")) => nu.ndw.Minute
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("quarterHour")) => nu.ndw.QuarterHour
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("halfHour")) => nu.ndw.HalfHour
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hour")) => nu.ndw.Hour

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TimePrecisionEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TimePrecisionEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_TpegAreaDescriptorFormat extends scalaxb.ElemNameParser[nu.ndw.TpegAreaDescriptor] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegAreaDescriptor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegAreaDescriptor] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "descriptor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegDescriptorExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegAreaDescriptorType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegAreaDescriptorExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.TpegAreaDescriptor(scalaxb.fromXML[nu.ndw.MultilingualString](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TpegLoc03AreaDescriptorSubtypeEnum](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegAreaDescriptor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.MultilingualString](__obj.descriptor, Some("http://datex2.eu/schema/2/2_0"), Some("descriptor"), __scope, false),
        __obj.tpegDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegDescriptorExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TpegLoc03AreaDescriptorSubtypeEnum](__obj.tpegAreaDescriptorType, Some("http://datex2.eu/schema/2/2_0"), Some("tpegAreaDescriptorType"), __scope, false),
        __obj.tpegAreaDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegAreaDescriptorExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegAreaLocationFormat extends scalaxb.XMLFormat[nu.ndw.TpegAreaLocation] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegAreaLocation] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegGeometricArea")) => Right(scalaxb.fromXML[nu.ndw.TpegGeometricArea](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegNamedOnlyArea")) => Right(scalaxb.fromXML[nu.ndw.TpegNamedOnlyArea](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.TpegAreaLocation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TpegGeometricArea => scalaxb.toXML[nu.ndw.TpegGeometricArea](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TpegNamedOnlyArea => scalaxb.toXML[nu.ndw.TpegNamedOnlyArea](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_TpegDescriptorFormat extends scalaxb.XMLFormat[nu.ndw.TpegDescriptor] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegDescriptor] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegAreaDescriptor")) => Right(scalaxb.fromXML[nu.ndw.TpegAreaDescriptor](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegPointDescriptor")) => Right(scalaxb.fromXML[nu.ndw.TpegPointDescriptor](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegJunctionPointDescriptor")) => Right(scalaxb.fromXML[nu.ndw.TpegJunctionPointDescriptor](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegIlcPointDescriptor")) => Right(scalaxb.fromXML[nu.ndw.TpegIlcPointDescriptor](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegOtherPointDescriptor")) => Right(scalaxb.fromXML[nu.ndw.TpegOtherPointDescriptor](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.TpegDescriptor, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TpegAreaDescriptor => scalaxb.toXML[nu.ndw.TpegAreaDescriptor](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TpegPointDescriptor => scalaxb.toXML[nu.ndw.TpegPointDescriptor](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_TpegFramedPointFormat extends scalaxb.ElemNameParser[nu.ndw.TpegFramedPoint] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegFramedPoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegFramedPoint] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegDirection")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegPointLocationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegFramedPointLocationType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "framedPoint")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "to")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "from")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegFramedPointExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.TpegFramedPoint(scalaxb.fromXML[nu.ndw.DirectionEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TpegLoc01FramedPointLocationSubtypeEnum](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.TpegNonJunctionPoint](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.TpegPoint](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.TpegPoint](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegFramedPoint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.DirectionEnum](__obj.tpegDirection, Some("http://datex2.eu/schema/2/2_0"), Some("tpegDirection"), __scope, false),
        __obj.tpegPointLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegPointLocationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TpegLoc01FramedPointLocationSubtypeEnum](__obj.tpegFramedPointLocationType, Some("http://datex2.eu/schema/2/2_0"), Some("tpegFramedPointLocationType"), __scope, false),
        scalaxb.toXML[nu.ndw.TpegNonJunctionPoint](__obj.framedPoint, Some("http://datex2.eu/schema/2/2_0"), Some("framedPoint"), __scope, false),
        scalaxb.toXML[nu.ndw.TpegPoint](__obj.to, Some("http://datex2.eu/schema/2/2_0"), Some("to"), __scope, false),
        scalaxb.toXML[nu.ndw.TpegPoint](__obj.from, Some("http://datex2.eu/schema/2/2_0"), Some("from"), __scope, false),
        __obj.tpegFramedPointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegFramedPointExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegGeometricAreaFormat extends scalaxb.ElemNameParser[nu.ndw.TpegGeometricArea] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegGeometricArea")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegGeometricArea] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegAreaLocationType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegAreaLocationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "radius")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "centrePoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegGeometricAreaExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.TpegGeometricArea(scalaxb.fromXML[nu.ndw.TpegLoc01AreaLocationSubtypeEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw.TpegHeight](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.PointCoordinates](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[nu.ndw.TpegAreaDescriptor](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegGeometricArea, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.TpegLoc01AreaLocationSubtypeEnum](__obj.tpegAreaLocationType, Some("http://datex2.eu/schema/2/2_0"), Some("tpegAreaLocationType"), __scope, false),
        __obj.tpegHeight map { scalaxb.toXML[nu.ndw.TpegHeight](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegHeight"), __scope, false) } getOrElse {Nil},
        __obj.tpegAreaLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegAreaLocationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.radius, Some("http://datex2.eu/schema/2/2_0"), Some("radius"), __scope, false),
        scalaxb.toXML[nu.ndw.PointCoordinates](__obj.centrePoint, Some("http://datex2.eu/schema/2/2_0"), Some("centrePoint"), __scope, false),
        __obj.name map { scalaxb.toXML[nu.ndw.TpegAreaDescriptor](_, Some("http://datex2.eu/schema/2/2_0"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.tpegGeometricAreaExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegGeometricAreaExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegHeightFormat extends scalaxb.ElemNameParser[nu.ndw.TpegHeight] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegHeight")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegHeight] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "height")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "heightType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegHeightExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.TpegHeight(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TpegLoc04HeightTypeEnum](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegHeight, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.height map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("height"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TpegLoc04HeightTypeEnum](__obj.heightType, Some("http://datex2.eu/schema/2/2_0"), Some("heightType"), __scope, false),
        __obj.tpegHeightExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegHeightExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegIlcPointDescriptorFormat extends scalaxb.ElemNameParser[nu.ndw.TpegIlcPointDescriptor] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegIlcPointDescriptor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegIlcPointDescriptor] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "descriptor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegDescriptorExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegPointDescriptorExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegIlcPointDescriptorType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegIlcPointDescriptorExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TpegIlcPointDescriptor(scalaxb.fromXML[nu.ndw.MultilingualString](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TpegLoc03IlcPointDescriptorSubtypeEnum](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegIlcPointDescriptor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.MultilingualString](__obj.descriptor, Some("http://datex2.eu/schema/2/2_0"), Some("descriptor"), __scope, false),
        __obj.tpegDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegDescriptorExtension"), __scope, false) } getOrElse {Nil},
        __obj.tpegPointDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegPointDescriptorExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TpegLoc03IlcPointDescriptorSubtypeEnum](__obj.tpegIlcPointDescriptorType, Some("http://datex2.eu/schema/2/2_0"), Some("tpegIlcPointDescriptorType"), __scope, false),
        __obj.tpegIlcPointDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegIlcPointDescriptorExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegJunctionFormat extends scalaxb.ElemNameParser[nu.ndw.TpegJunction] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegJunction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegJunction] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegPointExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointCoordinates")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "name")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "ilc")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "otherName")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegJunctionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.TpegJunction(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.PointCoordinates](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw.TpegJunctionPointDescriptor](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.TpegIlcPointDescriptor](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.TpegOtherPointDescriptor](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegJunction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.tpegPointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegPointExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.PointCoordinates](__obj.pointCoordinates, Some("http://datex2.eu/schema/2/2_0"), Some("pointCoordinates"), __scope, false),
        __obj.name map { scalaxb.toXML[nu.ndw.TpegJunctionPointDescriptor](_, Some("http://datex2.eu/schema/2/2_0"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.ilc flatMap { scalaxb.toXML[nu.ndw.TpegIlcPointDescriptor](_, Some("http://datex2.eu/schema/2/2_0"), Some("ilc"), __scope, false) },
        __obj.otherName flatMap { scalaxb.toXML[nu.ndw.TpegOtherPointDescriptor](_, Some("http://datex2.eu/schema/2/2_0"), Some("otherName"), __scope, false) },
        __obj.tpegJunctionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegJunctionExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegJunctionPointDescriptorFormat extends scalaxb.ElemNameParser[nu.ndw.TpegJunctionPointDescriptor] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegJunctionPointDescriptor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegJunctionPointDescriptor] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "descriptor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegDescriptorExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegPointDescriptorExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegJunctionPointDescriptorType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegJunctionPointDescriptorExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TpegJunctionPointDescriptor(scalaxb.fromXML[nu.ndw.MultilingualString](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TpegLoc03JunctionPointDescriptorSubtypeEnum](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegJunctionPointDescriptor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.MultilingualString](__obj.descriptor, Some("http://datex2.eu/schema/2/2_0"), Some("descriptor"), __scope, false),
        __obj.tpegDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegDescriptorExtension"), __scope, false) } getOrElse {Nil},
        __obj.tpegPointDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegPointDescriptorExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TpegLoc03JunctionPointDescriptorSubtypeEnum](__obj.tpegJunctionPointDescriptorType, Some("http://datex2.eu/schema/2/2_0"), Some("tpegJunctionPointDescriptorType"), __scope, false),
        __obj.tpegJunctionPointDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegJunctionPointDescriptorExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegLinearLocationFormat extends scalaxb.ElemNameParser[nu.ndw.TpegLinearLocation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegLinearLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegLinearLocation] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegDirection")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegLinearLocationType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "to")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "from")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegLinearLocationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TpegLinearLocation(scalaxb.fromXML[nu.ndw.DirectionEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.TpegLoc01LinearLocationSubtypeEnum](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.TpegPoint](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.TpegPoint](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegLinearLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.DirectionEnum](__obj.tpegDirection, Some("http://datex2.eu/schema/2/2_0"), Some("tpegDirection"), __scope, false),
        scalaxb.toXML[nu.ndw.TpegLoc01LinearLocationSubtypeEnum](__obj.tpegLinearLocationType, Some("http://datex2.eu/schema/2/2_0"), Some("tpegLinearLocationType"), __scope, false),
        scalaxb.toXML[nu.ndw.TpegPoint](__obj.to, Some("http://datex2.eu/schema/2/2_0"), Some("to"), __scope, false),
        scalaxb.toXML[nu.ndw.TpegPoint](__obj.from, Some("http://datex2.eu/schema/2/2_0"), Some("from"), __scope, false),
        __obj.tpegLinearLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegLinearLocationExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_TpegLoc01AreaLocationSubtypeEnumFormat = new DefaultNundw_TpegLoc01AreaLocationSubtypeEnumFormat {}
  trait DefaultNundw_TpegLoc01AreaLocationSubtypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TpegLoc01AreaLocationSubtypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TpegLoc01AreaLocationSubtypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("largeArea")) => nu.ndw.LargeArea
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue82

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegLoc01AreaLocationSubtypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TpegLoc01AreaLocationSubtypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TpegLoc01FramedPointLocationSubtypeEnumFormat = new DefaultNundw_TpegLoc01FramedPointLocationSubtypeEnumFormat {}
  trait DefaultNundw_TpegLoc01FramedPointLocationSubtypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TpegLoc01FramedPointLocationSubtypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TpegLoc01FramedPointLocationSubtypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("framedPoint")) => nu.ndw.FramedPoint

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegLoc01FramedPointLocationSubtypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TpegLoc01FramedPointLocationSubtypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TpegLoc01LinearLocationSubtypeEnumFormat = new DefaultNundw_TpegLoc01LinearLocationSubtypeEnumFormat {}
  trait DefaultNundw_TpegLoc01LinearLocationSubtypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TpegLoc01LinearLocationSubtypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TpegLoc01LinearLocationSubtypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("segment")) => nu.ndw.Segment

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegLoc01LinearLocationSubtypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TpegLoc01LinearLocationSubtypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TpegLoc01SimplePointLocationSubtypeEnumFormat = new DefaultNundw_TpegLoc01SimplePointLocationSubtypeEnumFormat {}
  trait DefaultNundw_TpegLoc01SimplePointLocationSubtypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TpegLoc01SimplePointLocationSubtypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TpegLoc01SimplePointLocationSubtypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("intersection")) => nu.ndw.Intersection
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nonLinkedPoint")) => nu.ndw.NonLinkedPoint

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegLoc01SimplePointLocationSubtypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TpegLoc01SimplePointLocationSubtypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TpegLoc03AreaDescriptorSubtypeEnumFormat = new DefaultNundw_TpegLoc03AreaDescriptorSubtypeEnumFormat {}
  trait DefaultNundw_TpegLoc03AreaDescriptorSubtypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TpegLoc03AreaDescriptorSubtypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TpegLoc03AreaDescriptorSubtypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("administrativeAreaName")) => nu.ndw.AdministrativeAreaNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("administrativeReferenceName")) => nu.ndw.AdministrativeReferenceNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("areaName")) => nu.ndw.AreaNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("countyName")) => nu.ndw.CountyNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lakeName")) => nu.ndw.LakeNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nationName")) => nu.ndw.NationNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("policeForceControlAreaName")) => nu.ndw.PoliceForceControlAreaName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("regionName")) => nu.ndw.RegionNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("seaName")) => nu.ndw.SeaNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("townName")) => nu.ndw.TownNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue83

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegLoc03AreaDescriptorSubtypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TpegLoc03AreaDescriptorSubtypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TpegLoc03IlcPointDescriptorSubtypeEnumFormat = new DefaultNundw_TpegLoc03IlcPointDescriptorSubtypeEnumFormat {}
  trait DefaultNundw_TpegLoc03IlcPointDescriptorSubtypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TpegLoc03IlcPointDescriptorSubtypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TpegLoc03IlcPointDescriptorSubtypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tpegIlcName1")) => nu.ndw.TpegIlcName1
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tpegIlcName2")) => nu.ndw.TpegIlcName2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tpegIlcName3")) => nu.ndw.TpegIlcName3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegLoc03IlcPointDescriptorSubtypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TpegLoc03IlcPointDescriptorSubtypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TpegLoc03JunctionPointDescriptorSubtypeEnumFormat = new DefaultNundw_TpegLoc03JunctionPointDescriptorSubtypeEnumFormat {}
  trait DefaultNundw_TpegLoc03JunctionPointDescriptorSubtypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TpegLoc03JunctionPointDescriptorSubtypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TpegLoc03JunctionPointDescriptorSubtypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("junctionName")) => nu.ndw.JunctionName

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegLoc03JunctionPointDescriptorSubtypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TpegLoc03JunctionPointDescriptorSubtypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TpegLoc03OtherPointDescriptorSubtypeEnumFormat = new DefaultNundw_TpegLoc03OtherPointDescriptorSubtypeEnumFormat {}
  trait DefaultNundw_TpegLoc03OtherPointDescriptorSubtypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TpegLoc03OtherPointDescriptorSubtypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TpegLoc03OtherPointDescriptorSubtypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("administrativeAreaName")) => nu.ndw.AdministrativeAreaName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("administrativeReferenceName")) => nu.ndw.AdministrativeReferenceName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("airportName")) => nu.ndw.AirportName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("areaName")) => nu.ndw.AreaName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("buildingName")) => nu.ndw.BuildingName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("busStopIdentifier")) => nu.ndw.BusStopIdentifier
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("busStopName")) => nu.ndw.BusStopName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("canalName")) => nu.ndw.CanalName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("countyName")) => nu.ndw.CountyName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ferryPortName")) => nu.ndw.FerryPortName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("intersectionName")) => nu.ndw.IntersectionName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lakeName")) => nu.ndw.LakeName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("linkName")) => nu.ndw.LinkName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("localLinkName")) => nu.ndw.LocalLinkName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("metroStationName")) => nu.ndw.MetroStationName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nationName")) => nu.ndw.NationName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nonLinkedPointName")) => nu.ndw.NonLinkedPointName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkingFacilityName")) => nu.ndw.ParkingFacilityName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pointName")) => nu.ndw.PointName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pointOfInterestName")) => nu.ndw.PointOfInterestName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("railwayStation")) => nu.ndw.RailwayStation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("regionName")) => nu.ndw.RegionName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("riverName")) => nu.ndw.RiverName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("seaName")) => nu.ndw.SeaName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceAreaName")) => nu.ndw.ServiceAreaName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tidalRiverName")) => nu.ndw.TidalRiverName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("townName")) => nu.ndw.TownName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue10

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegLoc03OtherPointDescriptorSubtypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TpegLoc03OtherPointDescriptorSubtypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TpegLoc04HeightTypeEnumFormat = new DefaultNundw_TpegLoc04HeightTypeEnumFormat {}
  trait DefaultNundw_TpegLoc04HeightTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TpegLoc04HeightTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TpegLoc04HeightTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("above")) => nu.ndw.AboveValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("aboveSeaLevel")) => nu.ndw.AboveSeaLevel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("aboveStreetLevel")) => nu.ndw.AboveStreetLevel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("at")) => nu.ndw.AtValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atSeaLevel")) => nu.ndw.AtSeaLevel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("atStreetLevel")) => nu.ndw.AtStreetLevel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("below")) => nu.ndw.BelowValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("belowSeaLevel")) => nu.ndw.BelowSeaLevel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("belowStreetLevel")) => nu.ndw.BelowStreetLevel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("undefined")) => nu.ndw.UndefinedValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue45
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue84

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegLoc04HeightTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TpegLoc04HeightTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_TpegNamedOnlyAreaFormat extends scalaxb.ElemNameParser[nu.ndw.TpegNamedOnlyArea] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegNamedOnlyArea")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegNamedOnlyArea] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegAreaLocationType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegAreaLocationExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegNamedOnlyAreaExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TpegNamedOnlyArea(scalaxb.fromXML[nu.ndw.TpegLoc01AreaLocationSubtypeEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw.TpegHeight](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.TpegAreaDescriptor](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegNamedOnlyArea, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.TpegLoc01AreaLocationSubtypeEnum](__obj.tpegAreaLocationType, Some("http://datex2.eu/schema/2/2_0"), Some("tpegAreaLocationType"), __scope, false),
        __obj.tpegHeight map { scalaxb.toXML[nu.ndw.TpegHeight](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegHeight"), __scope, false) } getOrElse {Nil},
        __obj.tpegAreaLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegAreaLocationExtension"), __scope, false) } getOrElse {Nil},
        __obj.name flatMap { scalaxb.toXML[nu.ndw.TpegAreaDescriptor](_, Some("http://datex2.eu/schema/2/2_0"), Some("name"), __scope, false) },
        __obj.tpegNamedOnlyAreaExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegNamedOnlyAreaExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegNonJunctionPointFormat extends scalaxb.ElemNameParser[nu.ndw.TpegNonJunctionPoint] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegNonJunctionPoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegNonJunctionPoint] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegPointExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pointCoordinates")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegNonJunctionPointExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.TpegNonJunctionPoint(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.PointCoordinates](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[nu.ndw.TpegOtherPointDescriptor](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegNonJunctionPoint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.tpegPointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegPointExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.PointCoordinates](__obj.pointCoordinates, Some("http://datex2.eu/schema/2/2_0"), Some("pointCoordinates"), __scope, false),
        __obj.name flatMap { scalaxb.toXML[nu.ndw.TpegOtherPointDescriptor](_, Some("http://datex2.eu/schema/2/2_0"), Some("name"), __scope, false) },
        __obj.tpegNonJunctionPointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegNonJunctionPointExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegOtherPointDescriptorFormat extends scalaxb.ElemNameParser[nu.ndw.TpegOtherPointDescriptor] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegOtherPointDescriptor")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegOtherPointDescriptor] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "descriptor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegDescriptorExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegPointDescriptorExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegOtherPointDescriptorType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegOtherPointDescriptorExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TpegOtherPointDescriptor(scalaxb.fromXML[nu.ndw.MultilingualString](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TpegLoc03OtherPointDescriptorSubtypeEnum](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegOtherPointDescriptor, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.MultilingualString](__obj.descriptor, Some("http://datex2.eu/schema/2/2_0"), Some("descriptor"), __scope, false),
        __obj.tpegDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegDescriptorExtension"), __scope, false) } getOrElse {Nil},
        __obj.tpegPointDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegPointDescriptorExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TpegLoc03OtherPointDescriptorSubtypeEnum](__obj.tpegOtherPointDescriptorType, Some("http://datex2.eu/schema/2/2_0"), Some("tpegOtherPointDescriptorType"), __scope, false),
        __obj.tpegOtherPointDescriptorExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegOtherPointDescriptorExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TpegPointFormat extends scalaxb.XMLFormat[nu.ndw.TpegPoint] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegPoint] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegNonJunctionPoint")) => Right(scalaxb.fromXML[nu.ndw.TpegNonJunctionPoint](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegJunction")) => Right(scalaxb.fromXML[nu.ndw.TpegJunction](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.TpegPoint, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TpegNonJunctionPoint => scalaxb.toXML[nu.ndw.TpegNonJunctionPoint](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TpegJunction => scalaxb.toXML[nu.ndw.TpegJunction](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_TpegPointDescriptorFormat extends scalaxb.XMLFormat[nu.ndw.TpegPointDescriptor] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegPointDescriptor] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegJunctionPointDescriptor")) => Right(scalaxb.fromXML[nu.ndw.TpegJunctionPointDescriptor](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegIlcPointDescriptor")) => Right(scalaxb.fromXML[nu.ndw.TpegIlcPointDescriptor](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegOtherPointDescriptor")) => Right(scalaxb.fromXML[nu.ndw.TpegOtherPointDescriptor](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.TpegPointDescriptor, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TpegJunctionPointDescriptor => scalaxb.toXML[nu.ndw.TpegJunctionPointDescriptor](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TpegIlcPointDescriptor => scalaxb.toXML[nu.ndw.TpegIlcPointDescriptor](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TpegOtherPointDescriptor => scalaxb.toXML[nu.ndw.TpegOtherPointDescriptor](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_TpegPointLocationFormat extends scalaxb.XMLFormat[nu.ndw.TpegPointLocation] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TpegPointLocation] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegFramedPoint")) => Right(scalaxb.fromXML[nu.ndw.TpegFramedPoint](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TpegSimplePoint")) => Right(scalaxb.fromXML[nu.ndw.TpegSimplePoint](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.TpegPointLocation, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TpegFramedPoint => scalaxb.toXML[nu.ndw.TpegFramedPoint](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TpegSimplePoint => scalaxb.toXML[nu.ndw.TpegSimplePoint](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_TpegSimplePointFormat extends scalaxb.ElemNameParser[nu.ndw.TpegSimplePoint] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TpegSimplePoint")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TpegSimplePoint] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegDirection")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegPointLocationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegSimplePointLocationType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "point")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tpegSimplePointExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TpegSimplePoint(scalaxb.fromXML[nu.ndw.DirectionEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TpegLoc01SimplePointLocationSubtypeEnum](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.TpegPoint](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.TpegSimplePoint, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.DirectionEnum](__obj.tpegDirection, Some("http://datex2.eu/schema/2/2_0"), Some("tpegDirection"), __scope, false),
        __obj.tpegPointLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegPointLocationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TpegLoc01SimplePointLocationSubtypeEnum](__obj.tpegSimplePointLocationType, Some("http://datex2.eu/schema/2/2_0"), Some("tpegSimplePointLocationType"), __scope, false),
        scalaxb.toXML[nu.ndw.TpegPoint](__obj.point, Some("http://datex2.eu/schema/2/2_0"), Some("point"), __scope, false),
        __obj.tpegSimplePointExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("tpegSimplePointExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TrafficConcentrationTypeFormat extends scalaxb.ElemNameParser[nu.ndw.TrafficConcentrationType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TrafficConcentration")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TrafficConcentrationType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "concentration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "occupancy")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficConcentrationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      nu.ndw.TrafficConcentrationType(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.ConcentrationOfVehiclesValue](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.PercentageValue](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TrafficConcentrationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TrafficConcentrationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) } getOrElse {Nil},
        __obj.trafficDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.concentration map { scalaxb.toXML[nu.ndw.ConcentrationOfVehiclesValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("concentration"), __scope, false) } getOrElse {Nil},
        __obj.occupancy map { scalaxb.toXML[nu.ndw.PercentageValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("occupancy"), __scope, false) } getOrElse {Nil},
        __obj.trafficConcentrationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficConcentrationExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_TrafficConstrictionTypeEnumFormat = new DefaultNundw_TrafficConstrictionTypeEnumFormat {}
  trait DefaultNundw_TrafficConstrictionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TrafficConstrictionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TrafficConstrictionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carriagewayBlocked")) => nu.ndw.CarriagewayBlocked
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carriagewayPartiallyObstructed")) => nu.ndw.CarriagewayPartiallyObstructed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lanesBlocked")) => nu.ndw.LanesBlocked
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lanesPartiallyObstructed")) => nu.ndw.LanesPartiallyObstructed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadBlocked")) => nu.ndw.RoadBlocked
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadPartiallyObstructed")) => nu.ndw.RoadPartiallyObstructed

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TrafficConstrictionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TrafficConstrictionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_TrafficDataFormat extends scalaxb.XMLFormat[nu.ndw.TrafficData] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TrafficData] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficHeadway")) => Right(scalaxb.fromXML[nu.ndw.TrafficHeadwayType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficFlow")) => Right(scalaxb.fromXML[nu.ndw.TrafficFlowType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficConcentration")) => Right(scalaxb.fromXML[nu.ndw.TrafficConcentrationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("IndividualVehicleDataValues")) => Right(scalaxb.fromXML[nu.ndw.IndividualVehicleDataValues](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TrafficSpeed")) => Right(scalaxb.fromXML[nu.ndw.TrafficSpeed](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.TrafficData, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TrafficHeadwayType => scalaxb.toXML[nu.ndw.TrafficHeadwayType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TrafficFlowType => scalaxb.toXML[nu.ndw.TrafficFlowType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TrafficConcentrationType => scalaxb.toXML[nu.ndw.TrafficConcentrationType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.IndividualVehicleDataValues => scalaxb.toXML[nu.ndw.IndividualVehicleDataValues](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.TrafficSpeed => scalaxb.toXML[nu.ndw.TrafficSpeed](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_TrafficElementFormat extends scalaxb.XMLFormat[nu.ndw.TrafficElement] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TrafficElement] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Obstruction")) => Right(scalaxb.fromXML[nu.ndw.ObstructionType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VehicleObstruction")) => Right(scalaxb.fromXML[nu.ndw.VehicleObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("InfrastructureDamageObstruction")) => Right(scalaxb.fromXML[nu.ndw.InfrastructureDamageObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("EnvironmentalObstruction")) => Right(scalaxb.fromXML[nu.ndw.EnvironmentalObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AnimalPresenceObstruction")) => Right(scalaxb.fromXML[nu.ndw.AnimalPresenceObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("GeneralObstruction")) => Right(scalaxb.fromXML[nu.ndw.GeneralObstruction](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Conditions")) => Right(scalaxb.fromXML[nu.ndw.Conditionsable](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PoorEnvironmentConditions")) => Right(scalaxb.fromXML[nu.ndw.PoorEnvironmentConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadConditions")) => Right(scalaxb.fromXML[nu.ndw.RoadConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WeatherRelatedRoadConditions")) => Right(scalaxb.fromXML[nu.ndw.WeatherRelatedRoadConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("NonWeatherRelatedRoadConditions")) => Right(scalaxb.fromXML[nu.ndw.NonWeatherRelatedRoadConditions](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Accident")) => Right(scalaxb.fromXML[nu.ndw.AccidentType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AbnormalTraffic")) => Right(scalaxb.fromXML[nu.ndw.AbnormalTraffic](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("Activity")) => Right(scalaxb.fromXML[nu.ndw.Activity](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PublicEvent")) => Right(scalaxb.fromXML[nu.ndw.PublicEvent](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("AuthorityOperation")) => Right(scalaxb.fromXML[nu.ndw.AuthorityOperation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("DisturbanceActivity")) => Right(scalaxb.fromXML[nu.ndw.DisturbanceActivity](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("EquipmentOrSystemFault")) => Right(scalaxb.fromXML[nu.ndw.EquipmentOrSystemFault](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.TrafficElement, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.ObstructionType => scalaxb.toXML[nu.ndw.ObstructionType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.Conditionsable => scalaxb.toXML[nu.ndw.Conditionsable](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.AccidentType => scalaxb.toXML[nu.ndw.AccidentType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.AbnormalTraffic => scalaxb.toXML[nu.ndw.AbnormalTraffic](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.Activity => scalaxb.toXML[nu.ndw.Activity](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.EquipmentOrSystemFault => scalaxb.toXML[nu.ndw.EquipmentOrSystemFault](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_TrafficFlowTypeFormat extends scalaxb.ElemNameParser[nu.ndw.TrafficFlowType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TrafficFlow")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TrafficFlowType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axleFlow")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pcuFlow")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "percentageLongVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleFlow")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficFlowExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      nu.ndw.TrafficFlowType(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.AxleFlowValue](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.PcuFlowValue](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.PercentageValue](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.VehicleFlowValue](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TrafficFlowType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TrafficFlowType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) } getOrElse {Nil},
        __obj.trafficDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.axleFlow map { scalaxb.toXML[nu.ndw.AxleFlowValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("axleFlow"), __scope, false) } getOrElse {Nil},
        __obj.pcuFlow map { scalaxb.toXML[nu.ndw.PcuFlowValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("pcuFlow"), __scope, false) } getOrElse {Nil},
        __obj.percentageLongVehicles map { scalaxb.toXML[nu.ndw.PercentageValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("percentageLongVehicles"), __scope, false) } getOrElse {Nil},
        __obj.vehicleFlow map { scalaxb.toXML[nu.ndw.VehicleFlowValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleFlow"), __scope, false) } getOrElse {Nil},
        __obj.trafficFlowExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficFlowExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_TrafficFlowCharacteristicsEnumFormat = new DefaultNundw_TrafficFlowCharacteristicsEnumFormat {}
  trait DefaultNundw_TrafficFlowCharacteristicsEnumFormat extends scalaxb.XMLFormat[nu.ndw.TrafficFlowCharacteristicsEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TrafficFlowCharacteristicsEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("erraticFlow")) => nu.ndw.ErraticFlow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("smoothFlow")) => nu.ndw.SmoothFlow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stopAndGo")) => nu.ndw.StopAndGo
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficBlocked")) => nu.ndw.TrafficBlocked

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TrafficFlowCharacteristicsEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TrafficFlowCharacteristicsEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_TrafficHeadwayTypeFormat extends scalaxb.ElemNameParser[nu.ndw.TrafficHeadwayType] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TrafficHeadway")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TrafficHeadwayType] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "averageDistanceHeadway")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "averageTimeHeadway")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficHeadwayExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      nu.ndw.TrafficHeadwayType(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.FloatingPointMetreDistanceValue](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.DurationValue](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TrafficHeadwayType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TrafficHeadwayType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) } getOrElse {Nil},
        __obj.trafficDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.averageDistanceHeadway map { scalaxb.toXML[nu.ndw.FloatingPointMetreDistanceValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("averageDistanceHeadway"), __scope, false) } getOrElse {Nil},
        __obj.averageTimeHeadway map { scalaxb.toXML[nu.ndw.DurationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("averageTimeHeadway"), __scope, false) } getOrElse {Nil},
        __obj.trafficHeadwayExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficHeadwayExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TrafficSpeedFormat extends scalaxb.ElemNameParser[nu.ndw.TrafficSpeed] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TrafficSpeed")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TrafficSpeed] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "averageVehicleSpeed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "speedPercentile")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficSpeedExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      nu.ndw.TrafficSpeed(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.SpeedValue](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.SpeedPercentile](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TrafficSpeed, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TrafficSpeed, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) } getOrElse {Nil},
        __obj.trafficDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.averageVehicleSpeed map { scalaxb.toXML[nu.ndw.SpeedValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("averageVehicleSpeed"), __scope, false) } getOrElse {Nil},
        __obj.speedPercentile map { scalaxb.toXML[nu.ndw.SpeedPercentile](_, Some("http://datex2.eu/schema/2/2_0"), Some("speedPercentile"), __scope, false) } getOrElse {Nil},
        __obj.trafficSpeedExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficSpeedExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TrafficStatusFormat extends scalaxb.ElemNameParser[nu.ndw.TrafficStatus] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TrafficStatus")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TrafficStatus] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficTrendType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficStatusExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.TrafficStatus(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.TrafficTrendTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.TrafficStatusValue](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TrafficStatus, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TrafficStatus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficTrendType map { scalaxb.toXML[nu.ndw.TrafficTrendTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficTrendType"), __scope, false) } getOrElse {Nil},
        __obj.trafficStatus map { scalaxb.toXML[nu.ndw.TrafficStatusValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficStatus"), __scope, false) } getOrElse {Nil},
        __obj.trafficStatusExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficStatusExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_TrafficStatusEnumFormat = new DefaultNundw_TrafficStatusEnumFormat {}
  trait DefaultNundw_TrafficStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.TrafficStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TrafficStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("impossible")) => nu.ndw.Impossible
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("congested")) => nu.ndw.Congested
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heavy")) => nu.ndw.Heavy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freeFlow")) => nu.ndw.FreeFlow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue4

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TrafficStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TrafficStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_TrafficStatusValueFormat extends scalaxb.ElemNameParser[nu.ndw.TrafficStatusValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TrafficStatusValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TrafficStatusValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficStatusValue")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficStatusValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.TrafficStatusValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TrafficStatusEnum](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TrafficStatusValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TrafficStatusValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TrafficStatusEnum](__obj.trafficStatusValue, Some("http://datex2.eu/schema/2/2_0"), Some("trafficStatusValue"), __scope, false),
        __obj.trafficStatusValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficStatusValueExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_TrafficTrendTypeEnumFormat = new DefaultNundw_TrafficTrendTypeEnumFormat {}
  trait DefaultNundw_TrafficTrendTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TrafficTrendTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TrafficTrendTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficBuildingUp")) => nu.ndw.TrafficBuildingUp
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficEasing")) => nu.ndw.TrafficEasing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficStable")) => nu.ndw.TrafficStable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TrafficTrendTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TrafficTrendTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TrafficTypeEnumFormat = new DefaultNundw_TrafficTypeEnumFormat {}
  trait DefaultNundw_TrafficTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TrafficTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TrafficTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accessOnlyTraffic")) => nu.ndw.AccessOnlyTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("destinedForAirport")) => nu.ndw.DestinedForAirport
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("destinedForAirportArrivals")) => nu.ndw.DestinedForAirportArrivals
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("destinedForAirportDepartures")) => nu.ndw.DestinedForAirportDepartures
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("destinedForFerryService")) => nu.ndw.DestinedForFerryService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("destinedForRailService")) => nu.ndw.DestinedForRailService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("holidayTraffic")) => nu.ndw.HolidayTrafficValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("localTraffic")) => nu.ndw.LocalTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("longDistanceTraffic")) => nu.ndw.LongDistanceTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("regionalTraffic")) => nu.ndw.RegionalTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("residentsOnlyTraffic")) => nu.ndw.ResidentsOnlyTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("throughTraffic")) => nu.ndw.ThroughTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("visitorTraffic")) => nu.ndw.VisitorTraffic

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TrafficTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TrafficTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_TrafficViewFormat extends scalaxb.ElemNameParser[nu.ndw.TrafficView] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TrafficView")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TrafficView] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficViewTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "predefinedNonOrderedLocationGroupReference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "linearTrafficView")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficViewExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.TrafficView(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[nu.ndw.LinearTrafficView](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TrafficView, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TrafficView, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.trafficViewTime, Some("http://datex2.eu/schema/2/2_0"), Some("trafficViewTime"), __scope, false),
        scalaxb.toXML[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference](__obj.predefinedNonOrderedLocationGroupReference, Some("http://datex2.eu/schema/2/2_0"), Some("predefinedNonOrderedLocationGroupReference"), __scope, false),
        __obj.linearTrafficView flatMap { scalaxb.toXML[nu.ndw.LinearTrafficView](_, Some("http://datex2.eu/schema/2/2_0"), Some("linearTrafficView"), __scope, false) },
        __obj.trafficViewExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficViewExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TrafficViewPublicationFormat extends scalaxb.ElemNameParser[nu.ndw.TrafficViewPublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TrafficViewPublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TrafficViewPublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationCreator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublicationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficView")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficViewPublicationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.TrafficViewPublication(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.HeaderInformation](p6, scalaxb.ElemName(node) :: stack),
        p7 map { scalaxb.fromXML[nu.ndw.TrafficView](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TrafficViewPublication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TrafficViewPublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.feedDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedDescription"), __scope, false) } getOrElse {Nil},
        __obj.feedType map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.publicationTime, Some("http://datex2.eu/schema/2/2_0"), Some("publicationTime"), __scope, false),
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.publicationCreator, Some("http://datex2.eu/schema/2/2_0"), Some("publicationCreator"), __scope, false),
        __obj.payloadPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublicationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.HeaderInformation](__obj.headerInformation, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false),
        __obj.trafficView flatMap { scalaxb.toXML[nu.ndw.TrafficView](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficView"), __scope, false) },
        __obj.trafficViewPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficViewPublicationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TrafficViewRecordFormat extends scalaxb.ElemNameParser[nu.ndw.TrafficViewRecord] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TrafficViewRecord")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TrafficViewRecord] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "recordSequenceNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElement")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorAction")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "elaboratedData")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficViewRecordExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.TrafficViewRecord(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw.TrafficElement](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionable](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.ElaboratedData](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TrafficViewRecord, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TrafficViewRecord, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.recordSequenceNumber, Some("http://datex2.eu/schema/2/2_0"), Some("recordSequenceNumber"), __scope, false),
        __obj.trafficElement map { scalaxb.toXML[nu.ndw.TrafficElement](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElement"), __scope, false) } getOrElse {Nil},
        __obj.operatorAction map { scalaxb.toXML[nu.ndw.OperatorActionable](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorAction"), __scope, false) } getOrElse {Nil},
        __obj.elaboratedData map { scalaxb.toXML[nu.ndw.ElaboratedData](_, Some("http://datex2.eu/schema/2/2_0"), Some("elaboratedData"), __scope, false) } getOrElse {Nil},
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        __obj.trafficViewRecordExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficViewRecordExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_TransitInformationFormat extends scalaxb.ElemNameParser[nu.ndw.TransitInformation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TransitInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TransitInformation] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonRoadEventInformationExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "journeyDestination")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "journeyOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "journeyReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "transitServiceInformation")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "transitServiceType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "scheduledDepartureTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "transitInformationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 =>
      nu.ndw.TransitInformation(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.TransitServiceInformationEnum](p23, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.TransitServiceTypeEnum](p24, scalaxb.ElemName(node) :: stack),
        p25.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TransitInformation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TransitInformation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.nonRoadEventInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonRoadEventInformationExtension"), __scope, false) } getOrElse {Nil},
        __obj.journeyDestination map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("journeyDestination"), __scope, false) } getOrElse {Nil},
        __obj.journeyOrigin map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("journeyOrigin"), __scope, false) } getOrElse {Nil},
        __obj.journeyReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("journeyReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.TransitServiceInformationEnum](__obj.transitServiceInformation, Some("http://datex2.eu/schema/2/2_0"), Some("transitServiceInformation"), __scope, false),
        scalaxb.toXML[nu.ndw.TransitServiceTypeEnum](__obj.transitServiceType, Some("http://datex2.eu/schema/2/2_0"), Some("transitServiceType"), __scope, false),
        __obj.scheduledDepartureTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("scheduledDepartureTime"), __scope, false) } getOrElse {Nil},
        __obj.transitInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("transitInformationExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_TransitServiceInformationEnumFormat = new DefaultNundw_TransitServiceInformationEnumFormat {}
  trait DefaultNundw_TransitServiceInformationEnumFormat extends scalaxb.XMLFormat[nu.ndw.TransitServiceInformationEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TransitServiceInformationEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cancellations")) => nu.ndw.Cancellations
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("delayDueToBadWeather")) => nu.ndw.DelayDueToBadWeather
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("delayDueToRepairs")) => nu.ndw.DelayDueToRepairs
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("delayedUntilFurtherNotice")) => nu.ndw.DelayedUntilFurtherNotice
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("delaysDueToFlotsam")) => nu.ndw.DelaysDueToFlotsam
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("departureOnSchedule")) => nu.ndw.DepartureOnSchedule
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ferryReplacedByIceRoad")) => nu.ndw.FerryReplacedByIceRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freeShuttleServiceOperating")) => nu.ndw.FreeShuttleServiceOperating
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("informationServiceNotAvailable")) => nu.ndw.InformationServiceNotAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("irregularServiceDelays")) => nu.ndw.IrregularServiceDelays
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("loadCapacityChanged")) => nu.ndw.LoadCapacityChanged
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restrictionsForLongerVehicles")) => nu.ndw.RestrictionsForLongerVehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceDelays")) => nu.ndw.ServiceDelays
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceDelaysOfUncertainDuration")) => nu.ndw.ServiceDelaysOfUncertainDuration
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceFullyBooked")) => nu.ndw.ServiceFullyBooked
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceNotOperating")) => nu.ndw.ServiceNotOperating
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceNotOperatingSubstituteServiceAvailable")) => nu.ndw.ServiceNotOperatingSubstituteServiceAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceSuspended")) => nu.ndw.ServiceSuspended
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("serviceWithdrawn")) => nu.ndw.ServiceWithdrawn
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shuttleServiceOperating")) => nu.ndw.ShuttleServiceOperating
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temporaryChangesToTimetables")) => nu.ndw.TemporaryChangesToTimetables
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue9

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TransitServiceInformationEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TransitServiceInformationEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TransitServiceTypeEnumFormat = new DefaultNundw_TransitServiceTypeEnumFormat {}
  trait DefaultNundw_TransitServiceTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TransitServiceTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TransitServiceTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("air")) => nu.ndw.Air
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bus")) => nu.ndw.Bus
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ferry")) => nu.ndw.Ferry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hydrofoil")) => nu.ndw.Hydrofoil
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rail")) => nu.ndw.Rail
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tram")) => nu.ndw.Tram
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("undergroundMetro")) => nu.ndw.UndergroundMetro

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TransitServiceTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TransitServiceTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_TravelTimeDataFormat extends scalaxb.ElemNameParser[nu.ndw.TravelTimeData] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("TravelTimeData")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.TravelTimeData] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "travelTimeTrendType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "travelTimeType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "travelTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "freeFlowTravelTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "normallyExpectedTravelTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "freeFlowSpeed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "travelTimeDataExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      nu.ndw.TravelTimeData(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.TravelTimeTrendTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.TravelTimeTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[nu.ndw.VehicleTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.DurationValue](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.DurationValue](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw.DurationValue](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.SpeedValue](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.TravelTimeData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.TravelTimeData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.travelTimeTrendType map { scalaxb.toXML[nu.ndw.TravelTimeTrendTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("travelTimeTrendType"), __scope, false) } getOrElse {Nil},
        __obj.travelTimeType map { scalaxb.toXML[nu.ndw.TravelTimeTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("travelTimeType"), __scope, false) } getOrElse {Nil},
        __obj.vehicleType flatMap { scalaxb.toXML[nu.ndw.VehicleTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleType"), __scope, false) },
        __obj.travelTime map { scalaxb.toXML[nu.ndw.DurationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("travelTime"), __scope, false) } getOrElse {Nil},
        __obj.freeFlowTravelTime map { scalaxb.toXML[nu.ndw.DurationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("freeFlowTravelTime"), __scope, false) } getOrElse {Nil},
        __obj.normallyExpectedTravelTime map { scalaxb.toXML[nu.ndw.DurationValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("normallyExpectedTravelTime"), __scope, false) } getOrElse {Nil},
        __obj.freeFlowSpeed map { scalaxb.toXML[nu.ndw.SpeedValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("freeFlowSpeed"), __scope, false) } getOrElse {Nil},
        __obj.travelTimeDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("travelTimeDataExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_TravelTimeTrendTypeEnumFormat = new DefaultNundw_TravelTimeTrendTypeEnumFormat {}
  trait DefaultNundw_TravelTimeTrendTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TravelTimeTrendTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TravelTimeTrendTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("decreasing")) => nu.ndw.DecreasingValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("increasing")) => nu.ndw.IncreasingValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("stable")) => nu.ndw.StableValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TravelTimeTrendTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TravelTimeTrendTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TravelTimeTypeEnumFormat = new DefaultNundw_TravelTimeTypeEnumFormat {}
  trait DefaultNundw_TravelTimeTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.TravelTimeTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TravelTimeTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("best")) => nu.ndw.Best
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("estimated")) => nu.ndw.Estimated
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("instantaneous")) => nu.ndw.Instantaneous
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reconstituted")) => nu.ndw.Reconstituted

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TravelTimeTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TravelTimeTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_TruckParkingDynamicManagementEnumFormat = new DefaultNundw_TruckParkingDynamicManagementEnumFormat {}
  trait DefaultNundw_TruckParkingDynamicManagementEnumFormat extends scalaxb.XMLFormat[nu.ndw.TruckParkingDynamicManagementEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.TruckParkingDynamicManagementEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("compactParking")) => nu.ndw.CompactParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("queueParking")) => nu.ndw.QueueParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noDynamicParkingManagement")) => nu.ndw.NoDynamicParkingManagement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue85

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.TruckParkingDynamicManagementEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.TruckParkingDynamicManagementEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_UpdateMethodEnumFormat = new DefaultNundw_UpdateMethodEnumFormat {}
  trait DefaultNundw_UpdateMethodEnumFormat extends scalaxb.XMLFormat[nu.ndw.UpdateMethodEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.UpdateMethodEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("allElementUpdate")) => nu.ndw.AllElementUpdate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("singleElementUpdate")) => nu.ndw.SingleElementUpdate
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snapshot")) => nu.ndw.Snapshot

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.UpdateMethodEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.UpdateMethodEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_UrbanParkingSiteFormat extends scalaxb.ElemNameParser[nu.ndw.UrbanParkingSite] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("UrbanParkingSite")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.UrbanParkingSite] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAlias")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingDescription")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingNumberOfSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingPrincipalNumberOfSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumParkingDuration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "photoUrl")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingOccupanyDetectionType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "emergencyContact")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "owner")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "responisbleAuthority")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "securityService")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operator")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "servicePartner")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingVMS")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingLocation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRoute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingColour")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "onlyAssignedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "assignedParkingAmongOthers")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "prohibitedParking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "tariffsAndPayment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingEquipmentOrServiceFacility")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSpace")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfParkingSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingThresholds")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "permitsAndProhibitions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "emergencyAssemblyPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "entireArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingReservation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingLayout")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "highestFloor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lowestFloor")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "temporaryParking")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reservationService")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingUsageScenario")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "openingTimes")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingAccess")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingStandardsAndSecurity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingSiteExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urbanParkingSiteType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "parkingZone")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urbanParkingSiteExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 ~ p46 ~ p47 ~ p48 =>
      nu.ndw.UrbanParkingSite(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.OccupancyDetectionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[nu.ndw.ParkingVMS](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p18, scalaxb.ElemName(node) :: stack),
        p19 map { scalaxb.fromXML[nu.ndw.ParkingRoute](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.RGBColour](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[nu.ndw.ParkingAssignment](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.TariffsAndPayment](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw._ParkingSpace](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[nu.ndw._GroupOfParkingSpaces](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[nu.ndw.ParkingThresholds](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[nu.ndw.PermitsAndProhibitions](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[nu.ndw.Area](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[nu.ndw.Dimension](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[nu.ndw.ReservationTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[nu.ndw.ParkingLayoutEnum](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p39 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p40 map { scalaxb.fromXML[nu.ndw.Contactable](_, scalaxb.ElemName(node) :: stack) },
        p41 map { scalaxb.fromXML[nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[nu.ndw.OpeningTimes](_, scalaxb.ElemName(node) :: stack) },
        p43 map { scalaxb.fromXML[nu.ndw.ParkingAccess](_, scalaxb.ElemName(node) :: stack) },
        p44.headOption map { scalaxb.fromXML[nu.ndw.ParkingStandardsAndSecurity](_, scalaxb.ElemName(node) :: stack) },
        p45.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.UrbanParkingSiteTypeEnum](p46, scalaxb.ElemName(node) :: stack),
        p47.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p48.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.UrbanParkingSite, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.UrbanParkingSite, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.parkingName map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingName"), __scope, false) } getOrElse {Nil},
        __obj.parkingAlias flatMap { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAlias"), __scope, false) },
        __obj.parkingDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingDescription"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.parkingRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordVersionTime"), __scope, false),
        __obj.parkingNumberOfSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingNumberOfSpaces"), __scope, false) } getOrElse {Nil},
        __obj.parkingPrincipalNumberOfSpaces map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingPrincipalNumberOfSpaces"), __scope, false) } getOrElse {Nil},
        __obj.maximumParkingDuration map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumParkingDuration"), __scope, false) } getOrElse {Nil},
        __obj.photoUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("photoUrl"), __scope, false) } getOrElse {Nil},
        __obj.urlLinkAddress map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkAddress"), __scope, false) } getOrElse {Nil},
        __obj.parkingOccupanyDetectionType flatMap { scalaxb.toXML[nu.ndw.OccupancyDetectionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingOccupanyDetectionType"), __scope, false) },
        __obj.emergencyContact flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("emergencyContact"), __scope, false) },
        __obj.owner flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("owner"), __scope, false) },
        __obj.responisbleAuthority flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("responisbleAuthority"), __scope, false) },
        __obj.securityService flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("securityService"), __scope, false) },
        __obj.operator flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("operator"), __scope, false) },
        __obj.servicePartner flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("servicePartner"), __scope, false) },
        __obj.parkingVMS flatMap { scalaxb.toXML[nu.ndw.ParkingVMS](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingVMS"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.parkingLocation, Some("http://datex2.eu/schema/2/2_0"), Some("parkingLocation"), __scope, false),
        __obj.parkingRoute flatMap { scalaxb.toXML[nu.ndw.ParkingRoute](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRoute"), __scope, false) },
        __obj.parkingColour map { scalaxb.toXML[nu.ndw.RGBColour](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingColour"), __scope, false) } getOrElse {Nil},
        __obj.onlyAssignedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("onlyAssignedParking"), __scope, false) } getOrElse {Nil},
        __obj.assignedParkingAmongOthers map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("assignedParkingAmongOthers"), __scope, false) } getOrElse {Nil},
        __obj.prohibitedParking map { scalaxb.toXML[nu.ndw.ParkingAssignment](_, Some("http://datex2.eu/schema/2/2_0"), Some("prohibitedParking"), __scope, false) } getOrElse {Nil},
        __obj.tariffsAndPayment map { scalaxb.toXML[nu.ndw.TariffsAndPayment](_, Some("http://datex2.eu/schema/2/2_0"), Some("tariffsAndPayment"), __scope, false) } getOrElse {Nil},
        __obj.parkingEquipmentOrServiceFacility flatMap { scalaxb.toXML[nu.ndw._ParkingRecordEquipmentOrServiceFacilityIndexParkingEquipmentOrServiceFacility](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingEquipmentOrServiceFacility"), __scope, false) },
        __obj.parkingSpace flatMap { scalaxb.toXML[nu.ndw._ParkingSpace](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSpace"), __scope, false) },
        __obj.groupOfParkingSpaces flatMap { scalaxb.toXML[nu.ndw._GroupOfParkingSpaces](_, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfParkingSpaces"), __scope, false) },
        __obj.parkingThresholds map { scalaxb.toXML[nu.ndw.ParkingThresholds](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingThresholds"), __scope, false) } getOrElse {Nil},
        __obj.permitsAndProhibitions flatMap { scalaxb.toXML[nu.ndw.PermitsAndProhibitions](_, Some("http://datex2.eu/schema/2/2_0"), Some("permitsAndProhibitions"), __scope, false) },
        __obj.emergencyAssemblyPoint map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("emergencyAssemblyPoint"), __scope, false) } getOrElse {Nil},
        __obj.entireArea map { scalaxb.toXML[nu.ndw.Area](_, Some("http://datex2.eu/schema/2/2_0"), Some("entireArea"), __scope, false) } getOrElse {Nil},
        __obj.parkingRecordDimension map { scalaxb.toXML[nu.ndw.Dimension](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordDimension"), __scope, false) } getOrElse {Nil},
        __obj.parkingRecordExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.parkingReservation map { scalaxb.toXML[nu.ndw.ReservationTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingReservation"), __scope, false) } getOrElse {Nil},
        __obj.parkingLayout flatMap { scalaxb.toXML[nu.ndw.ParkingLayoutEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingLayout"), __scope, false) },
        __obj.highestFloor map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("highestFloor"), __scope, false) } getOrElse {Nil},
        __obj.lowestFloor map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("lowestFloor"), __scope, false) } getOrElse {Nil},
        __obj.temporaryParking map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("temporaryParking"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteAddress flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteAddress"), __scope, false) },
        __obj.reservationService flatMap { scalaxb.toXML[nu.ndw.Contactable](_, Some("http://datex2.eu/schema/2/2_0"), Some("reservationService"), __scope, false) },
        __obj.parkingUsageScenario flatMap { scalaxb.toXML[nu.ndw._ParkingSiteScenarioIndexParkingUsageScenario](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingUsageScenario"), __scope, false) },
        __obj.openingTimes map { scalaxb.toXML[nu.ndw.OpeningTimes](_, Some("http://datex2.eu/schema/2/2_0"), Some("openingTimes"), __scope, false) } getOrElse {Nil},
        __obj.parkingAccess flatMap { scalaxb.toXML[nu.ndw.ParkingAccess](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingAccess"), __scope, false) },
        __obj.parkingStandardsAndSecurity map { scalaxb.toXML[nu.ndw.ParkingStandardsAndSecurity](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingStandardsAndSecurity"), __scope, false) } getOrElse {Nil},
        __obj.parkingSiteExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingSiteExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.UrbanParkingSiteTypeEnum](__obj.urbanParkingSiteType, Some("http://datex2.eu/schema/2/2_0"), Some("urbanParkingSiteType"), __scope, false),
        __obj.parkingZone map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("parkingZone"), __scope, false) } getOrElse {Nil},
        __obj.urbanParkingSiteExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("urbanParkingSiteExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_UrbanParkingSiteTypeEnumFormat = new DefaultNundw_UrbanParkingSiteTypeEnumFormat {}
  trait DefaultNundw_UrbanParkingSiteTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.UrbanParkingSiteTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.UrbanParkingSiteTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onStreetParking")) => nu.ndw.OnStreetParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("offStreetParking")) => nu.ndw.OffStreetParking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue8

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.UrbanParkingSiteTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.UrbanParkingSiteTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_UrgencyEnumFormat = new DefaultNundw_UrgencyEnumFormat {}
  trait DefaultNundw_UrgencyEnumFormat extends scalaxb.XMLFormat[nu.ndw.UrgencyEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.UrgencyEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("extremelyUrgent")) => nu.ndw.ExtremelyUrgent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("urgent")) => nu.ndw.Urgent
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("normalUrgency")) => nu.ndw.NormalUrgency

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.UrgencyEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.UrgencyEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_UrlLinkFormat extends scalaxb.ElemNameParser[nu.ndw.UrlLink] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("UrlLink")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.UrlLink] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLinkExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.UrlLink(scalaxb.fromXML[java.net.URI](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.UrlLinkTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.UrlLink, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[java.net.URI](__obj.urlLinkAddress, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkAddress"), __scope, false),
        __obj.urlLinkDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkDescription"), __scope, false) } getOrElse {Nil},
        __obj.urlLinkType map { scalaxb.toXML[nu.ndw.UrlLinkTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkType"), __scope, false) } getOrElse {Nil},
        __obj.urlLinkExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLinkExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_UrlLinkTypeEnumFormat = new DefaultNundw_UrlLinkTypeEnumFormat {}
  trait DefaultNundw_UrlLinkTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.UrlLinkTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.UrlLinkTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("documentPdf")) => nu.ndw.DocumentPdf
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("html")) => nu.ndw.Html
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("image")) => nu.ndw.Image
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rss")) => nu.ndw.Rss
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("videoStream")) => nu.ndw.VideoStream
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("voiceStream")) => nu.ndw.VoiceStream
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue7

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.UrlLinkTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.UrlLinkTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_UsedPaymentCardFormat extends scalaxb.ElemNameParser[nu.ndw.UsedPaymentCard] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("UsedPaymentCard")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.UsedPaymentCard] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "paymentCard")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "otherPaymentCard")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "paymentCardBrand")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "otherPaymentCardBrand")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "usedPaymentCardExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.UsedPaymentCard(scalaxb.fromXML[nu.ndw.PaymentCardTypesEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.PaymentCardBrandsEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.UsedPaymentCard, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.PaymentCardTypesEnum](__obj.paymentCard, Some("http://datex2.eu/schema/2/2_0"), Some("paymentCard"), __scope, false),
        __obj.otherPaymentCard map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("otherPaymentCard"), __scope, false) } getOrElse {Nil},
        __obj.paymentCardBrand map { scalaxb.toXML[nu.ndw.PaymentCardBrandsEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("paymentCardBrand"), __scope, false) } getOrElse {Nil},
        __obj.otherPaymentCardBrand map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("otherPaymentCardBrand"), __scope, false) } getOrElse {Nil},
        __obj.usedPaymentCardExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("usedPaymentCardExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_UserTypeEnumFormat = new DefaultNundw_UserTypeEnumFormat {}
  trait DefaultNundw_UserTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.UserTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.UserTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("allUsers")) => nu.ndw.AllUsers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shoppers")) => nu.ndw.Shoppers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hotelGuests")) => nu.ndw.HotelGuests
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("subscribers")) => nu.ndw.Subscribers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("reservationHolders")) => nu.ndw.ReservationHolders
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("seasonTicketHolders")) => nu.ndw.SeasonTicketHolders
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("registeredDisabledUsers")) => nu.ndw.RegisteredDisabledUsers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("disabled")) => nu.ndw.Disabled
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("handicapped")) => nu.ndw.Handicapped
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hearingImpaired")) => nu.ndw.HearingImpaired
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("visuallyImpaired")) => nu.ndw.VisuallyImpaired
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wheelchairUsers")) => nu.ndw.WheelchairUsers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("elderlyUsers")) => nu.ndw.ElderlyUsers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("families")) => nu.ndw.Families
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("men")) => nu.ndw.Men
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("women")) => nu.ndw.Women
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pregnantWomen")) => nu.ndw.PregnantWomen
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pensioners")) => nu.ndw.Pensioners
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("students")) => nu.ndw.Students
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("staff")) => nu.ndw.Staff
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("employees")) => nu.ndw.Employees
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("customers")) => nu.ndw.Customers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("visitors")) => nu.ndw.Visitors
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("members")) => nu.ndw.Members
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("shortTermParker")) => nu.ndw.ShortTermParker
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("longTermParker")) => nu.ndw.LongTermParker
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overnightParker")) => nu.ndw.OvernightParker
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sportEventAwaySupporters")) => nu.ndw.SportEventAwaySupporters
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sportEventHomeSupporters")) => nu.ndw.SportEventHomeSupporters
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("residents")) => nu.ndw.Residents
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("commuters")) => nu.ndw.Commuters
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkAndRideUsers")) => nu.ndw.ParkAndRideUsers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkAndWalkUser")) => nu.ndw.ParkAndWalkUser
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("parkAndCycleUser")) => nu.ndw.ParkAndCycleUser
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue6
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.UserTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.UserTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_ValidityFormat extends scalaxb.ElemNameParser[nu.ndw.Validity] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Validity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Validity] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validityStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "overrunning")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validityTimeSpecification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validityExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.Validity(scalaxb.fromXML[nu.ndw.ValidityStatusEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.OverallPeriod](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Validity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.ValidityStatusEnum](__obj.validityStatus, Some("http://datex2.eu/schema/2/2_0"), Some("validityStatus"), __scope, false),
        __obj.overrunning map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("overrunning"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.OverallPeriod](__obj.validityTimeSpecification, Some("http://datex2.eu/schema/2/2_0"), Some("validityTimeSpecification"), __scope, false),
        __obj.validityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("validityExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_ValidityStatusEnumFormat = new DefaultNundw_ValidityStatusEnumFormat {}
  trait DefaultNundw_ValidityStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.ValidityStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.ValidityStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("active")) => nu.ndw.Active
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("suspended")) => nu.ndw.Suspended
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("definedByValidityTimeSpec")) => nu.ndw.DefinedByValidityTimeSpec

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.ValidityStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.ValidityStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_VehicleFormat extends scalaxb.ElemNameParser[nu.ndw.Vehicle] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Vehicle")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Vehicle] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleColour")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCountryOfOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleManufacturer")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleModel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleRegistrationPlateIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCharacteristics")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "axleSpacingOnVehicle")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "specificAxleWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "hazardousGoodsAssociatedWithVehicle")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      nu.ndw.Vehicle(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.VehicleStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[nu.ndw.AxleSpacing](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.AxleWeight](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.HazardousMaterialsType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Vehicle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.vehicleColour map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleColour"), __scope, false) } getOrElse {Nil},
        __obj.vehicleCountryOfOrigin map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCountryOfOrigin"), __scope, false) } getOrElse {Nil},
        __obj.vehicleIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.vehicleManufacturer map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleManufacturer"), __scope, false) } getOrElse {Nil},
        __obj.vehicleModel map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleModel"), __scope, false) } getOrElse {Nil},
        __obj.vehicleRegistrationPlateIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleRegistrationPlateIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.vehicleStatus map { scalaxb.toXML[nu.ndw.VehicleStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleStatus"), __scope, false) } getOrElse {Nil},
        __obj.vehicleCharacteristics map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCharacteristics"), __scope, false) } getOrElse {Nil},
        __obj.axleSpacingOnVehicle flatMap { scalaxb.toXML[nu.ndw.AxleSpacing](_, Some("http://datex2.eu/schema/2/2_0"), Some("axleSpacingOnVehicle"), __scope, false) },
        __obj.specificAxleWeight flatMap { scalaxb.toXML[nu.ndw.AxleWeight](_, Some("http://datex2.eu/schema/2/2_0"), Some("specificAxleWeight"), __scope, false) },
        __obj.hazardousGoodsAssociatedWithVehicle map { scalaxb.toXML[nu.ndw.HazardousMaterialsType](_, Some("http://datex2.eu/schema/2/2_0"), Some("hazardousGoodsAssociatedWithVehicle"), __scope, false) } getOrElse {Nil},
        __obj.vehicleExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VehicleCharacteristicsFormat extends scalaxb.ElemNameParser[nu.ndw.VehicleCharacteristics] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VehicleCharacteristics")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VehicleCharacteristics] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "fuelType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "loadType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleEquipment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleUsage")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "grossWeightCharacteristic")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "heightCharacteristic")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lengthCharacteristic")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "widthCharacteristic")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "heaviestAxleWeightCharacteristic")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfAxlesCharacteristic")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCharacteristicsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      nu.ndw.VehicleCharacteristics(p1.headOption map { scalaxb.fromXML[nu.ndw.FuelTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.LoadTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.VehicleEquipmentEnum](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[nu.ndw.VehicleTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.VehicleUsageEnum](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[nu.ndw.GrossWeightCharacteristic](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[nu.ndw.HeightCharacteristic](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[nu.ndw.LengthCharacteristic](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[nu.ndw.WidthCharacteristic](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[nu.ndw.HeaviestAxleWeightCharacteristic](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[nu.ndw.NumberOfAxlesCharacteristic](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw._VehicleCharacteristicsExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VehicleCharacteristics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.fuelType map { scalaxb.toXML[nu.ndw.FuelTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("fuelType"), __scope, false) } getOrElse {Nil},
        __obj.loadType map { scalaxb.toXML[nu.ndw.LoadTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("loadType"), __scope, false) } getOrElse {Nil},
        __obj.vehicleEquipment map { scalaxb.toXML[nu.ndw.VehicleEquipmentEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleEquipment"), __scope, false) } getOrElse {Nil},
        __obj.vehicleType flatMap { scalaxb.toXML[nu.ndw.VehicleTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleType"), __scope, false) },
        __obj.vehicleUsage map { scalaxb.toXML[nu.ndw.VehicleUsageEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleUsage"), __scope, false) } getOrElse {Nil},
        __obj.grossWeightCharacteristic flatMap { scalaxb.toXML[nu.ndw.GrossWeightCharacteristic](_, Some("http://datex2.eu/schema/2/2_0"), Some("grossWeightCharacteristic"), __scope, false) },
        __obj.heightCharacteristic flatMap { scalaxb.toXML[nu.ndw.HeightCharacteristic](_, Some("http://datex2.eu/schema/2/2_0"), Some("heightCharacteristic"), __scope, false) },
        __obj.lengthCharacteristic flatMap { scalaxb.toXML[nu.ndw.LengthCharacteristic](_, Some("http://datex2.eu/schema/2/2_0"), Some("lengthCharacteristic"), __scope, false) },
        __obj.widthCharacteristic flatMap { scalaxb.toXML[nu.ndw.WidthCharacteristic](_, Some("http://datex2.eu/schema/2/2_0"), Some("widthCharacteristic"), __scope, false) },
        __obj.heaviestAxleWeightCharacteristic flatMap { scalaxb.toXML[nu.ndw.HeaviestAxleWeightCharacteristic](_, Some("http://datex2.eu/schema/2/2_0"), Some("heaviestAxleWeightCharacteristic"), __scope, false) },
        __obj.numberOfAxlesCharacteristic flatMap { scalaxb.toXML[nu.ndw.NumberOfAxlesCharacteristic](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfAxlesCharacteristic"), __scope, false) },
        __obj.vehicleCharacteristicsExtension map { scalaxb.toXML[nu.ndw._VehicleCharacteristicsExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCharacteristicsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VehicleCharacteristicsExtendedFormat extends scalaxb.ElemNameParser[nu.ndw.VehicleCharacteristicsExtended] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VehicleCharacteristicsExtended")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VehicleCharacteristicsExtended] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "emissionClassification")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operationFreeOfEmission")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "loadType2")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleType2")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "fuelType2")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleUsage2")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.VehicleCharacteristicsExtended(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.LoadType2Enum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.VehicleType2Enum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.FuelType2Enum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.VehicleUsage2Enum](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VehicleCharacteristicsExtended, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.emissionClassification flatMap { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("emissionClassification"), __scope, false) },
        __obj.operationFreeOfEmission map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("operationFreeOfEmission"), __scope, false) } getOrElse {Nil},
        __obj.loadType2 map { scalaxb.toXML[nu.ndw.LoadType2Enum](_, Some("http://datex2.eu/schema/2/2_0"), Some("loadType2"), __scope, false) } getOrElse {Nil},
        __obj.vehicleType2 map { scalaxb.toXML[nu.ndw.VehicleType2Enum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleType2"), __scope, false) } getOrElse {Nil},
        __obj.fuelType2 map { scalaxb.toXML[nu.ndw.FuelType2Enum](_, Some("http://datex2.eu/schema/2/2_0"), Some("fuelType2"), __scope, false) } getOrElse {Nil},
        __obj.vehicleUsage2 map { scalaxb.toXML[nu.ndw.VehicleUsage2Enum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleUsage2"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VehicleCountAndRateFormat extends scalaxb.ElemNameParser[nu.ndw.VehicleCountAndRate] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VehicleCountAndRate")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VehicleCountAndRate] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementSiteReference")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measuredValueIndex")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dedicatedAccess")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementTimeDefault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lastCalibration")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "coveringPetrolStationArea")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCountWithinInterval")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCountAndRateExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      nu.ndw.VehicleCountAndRate(p1.headOption map { scalaxb.fromXML[nu.ndw._MeasurementSiteRecordVersionedReference](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ParkingAccessReference](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[nu.ndw.VehicleCountWithinInterval](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[nu.ndw.VehicleRate](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VehicleCountAndRate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementSiteReference map { scalaxb.toXML[nu.ndw._MeasurementSiteRecordVersionedReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementSiteReference"), __scope, false) } getOrElse {Nil},
        __obj.measuredValueIndex map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("measuredValueIndex"), __scope, false) } getOrElse {Nil},
        __obj.dedicatedAccess map { scalaxb.toXML[nu.ndw._ParkingAccessReference](_, Some("http://datex2.eu/schema/2/2_0"), Some("dedicatedAccess"), __scope, false) } getOrElse {Nil},
        __obj.measurementTimeDefault map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementTimeDefault"), __scope, false) } getOrElse {Nil},
        __obj.lastCalibration map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("lastCalibration"), __scope, false) } getOrElse {Nil},
        __obj.coveringPetrolStationArea map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("coveringPetrolStationArea"), __scope, false) } getOrElse {Nil},
        __obj.vehicleCountWithinInterval flatMap { scalaxb.toXML[nu.ndw.VehicleCountWithinInterval](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCountWithinInterval"), __scope, false) },
        __obj.vehicleRate flatMap { scalaxb.toXML[nu.ndw.VehicleRate](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleRate"), __scope, false) },
        __obj.vehicleCountAndRateExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCountAndRateExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VehicleCountValueFormat extends scalaxb.ElemNameParser[nu.ndw.VehicleCountValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VehicleCountValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VehicleCountValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCount")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCountValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.VehicleCountValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.VehicleCountValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.VehicleCountValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.vehicleCount, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCount"), __scope, false),
        __obj.vehicleCountValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCountValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VehicleCountWithinIntervalFormat extends scalaxb.ElemNameParser[nu.ndw.VehicleCountWithinInterval] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VehicleCountWithinInterval")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VehicleCountWithinInterval] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalcualtionTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementInterval")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfIncomingVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfOutgoingVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "changeOfOccupiedSpaces")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "countedVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleCountWithinIntervalExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.VehicleCountWithinInterval(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw.VehicleCountValue](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.VehicleCountValue](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.OccupancyChangeValue](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VehicleCountWithinInterval, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalcualtionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalcualtionTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Float](__obj.measurementInterval, Some("http://datex2.eu/schema/2/2_0"), Some("measurementInterval"), __scope, false),
        __obj.numberOfIncomingVehicles map { scalaxb.toXML[nu.ndw.VehicleCountValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfIncomingVehicles"), __scope, false) } getOrElse {Nil},
        __obj.numberOfOutgoingVehicles map { scalaxb.toXML[nu.ndw.VehicleCountValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfOutgoingVehicles"), __scope, false) } getOrElse {Nil},
        __obj.changeOfOccupiedSpaces map { scalaxb.toXML[nu.ndw.OccupancyChangeValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("changeOfOccupiedSpaces"), __scope, false) } getOrElse {Nil},
        __obj.countedVehicles map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("countedVehicles"), __scope, false) } getOrElse {Nil},
        __obj.vehicleCountWithinIntervalExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleCountWithinIntervalExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_VehicleEquipmentEnumFormat = new DefaultNundw_VehicleEquipmentEnumFormat {}
  trait DefaultNundw_VehicleEquipmentEnumFormat extends scalaxb.XMLFormat[nu.ndw.VehicleEquipmentEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VehicleEquipmentEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notUsingSnowChains")) => nu.ndw.NotUsingSnowChains
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("notUsingSnowChainsOrTyres")) => nu.ndw.NotUsingSnowChainsOrTyres
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowChainsInUse")) => nu.ndw.SnowChainsInUse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowTyresInUse")) => nu.ndw.SnowTyresInUse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowChainsOrTyresInUse")) => nu.ndw.SnowChainsOrTyresInUse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("withoutSnowTyresOrChainsOnBoard")) => nu.ndw.WithoutSnowTyresOrChainsOnBoard

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VehicleEquipmentEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VehicleEquipmentEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_VehicleFlowValueFormat extends scalaxb.ElemNameParser[nu.ndw.VehicleFlowValue] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VehicleFlowValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VehicleFlowValue] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForDataError")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dataValueExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleFlowRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleFlowValueExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      nu.ndw.VehicleFlowValue(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@accuracy").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@accuracy" -> _ },
        (node \ "@computationalMethod").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.ComputationMethodEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@computationalMethod" -> _ },
        (node \ "@numberOfIncompleteInputs").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfIncompleteInputs" -> _ },
        (node \ "@numberOfInputValuesUsed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@numberOfInputValuesUsed" -> _ },
        (node \ "@smoothingFactor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@smoothingFactor" -> _ },
        (node \ "@standardDeviation").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@standardDeviation" -> _ },
        (node \ "@supplierCalculatedDataQuality").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@supplierCalculatedDataQuality" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.VehicleFlowValue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accuracy", _) => __obj.accuracy foreach { x => attr = scala.xml.Attribute(null, "accuracy", x.toString, attr) }
        case ("@computationalMethod", _) => __obj.computationalMethod foreach { x => attr = scala.xml.Attribute(null, "computationalMethod", x.toString, attr) }
        case ("@numberOfIncompleteInputs", _) => __obj.numberOfIncompleteInputs foreach { x => attr = scala.xml.Attribute(null, "numberOfIncompleteInputs", x.toString, attr) }
        case ("@numberOfInputValuesUsed", _) => __obj.numberOfInputValuesUsed foreach { x => attr = scala.xml.Attribute(null, "numberOfInputValuesUsed", x.toString, attr) }
        case ("@smoothingFactor", _) => __obj.smoothingFactor foreach { x => attr = scala.xml.Attribute(null, "smoothingFactor", x.toString, attr) }
        case ("@standardDeviation", _) => __obj.standardDeviation foreach { x => attr = scala.xml.Attribute(null, "standardDeviation", x.toString, attr) }
        case ("@supplierCalculatedDataQuality", _) => __obj.supplierCalculatedDataQuality foreach { x => attr = scala.xml.Attribute(null, "supplierCalculatedDataQuality", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.VehicleFlowValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dataError map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataError"), __scope, false) } getOrElse {Nil},
        __obj.reasonForDataError map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForDataError"), __scope, false) } getOrElse {Nil},
        __obj.dataValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("dataValueExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.vehicleFlowRate, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleFlowRate"), __scope, false),
        __obj.vehicleFlowValueExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleFlowValueExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VehicleObstructionFormat extends scalaxb.ElemNameParser[nu.ndw.VehicleObstruction] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VehicleObstruction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VehicleObstruction] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfObstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mobilityOfObstruction")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "obstructionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleObstructionType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "obstructingVehicle")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleObstructionExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 =>
      nu.ndw.VehicleObstruction(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.Mobility](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.VehicleObstructionTypeEnum](p23, scalaxb.ElemName(node) :: stack),
        p24 map { scalaxb.fromXML[nu.ndw.Vehicle](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.VehicleObstruction, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.VehicleObstruction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.numberOfObstructions map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfObstructions"), __scope, false) } getOrElse {Nil},
        __obj.mobilityOfObstruction map { scalaxb.toXML[nu.ndw.Mobility](_, Some("http://datex2.eu/schema/2/2_0"), Some("mobilityOfObstruction"), __scope, false) } getOrElse {Nil},
        __obj.obstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("obstructionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.VehicleObstructionTypeEnum](__obj.vehicleObstructionType, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleObstructionType"), __scope, false),
        __obj.obstructingVehicle flatMap { scalaxb.toXML[nu.ndw.Vehicle](_, Some("http://datex2.eu/schema/2/2_0"), Some("obstructingVehicle"), __scope, false) },
        __obj.vehicleObstructionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleObstructionExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_VehicleObstructionTypeEnumFormat = new DefaultNundw_VehicleObstructionTypeEnumFormat {}
  trait DefaultNundw_VehicleObstructionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.VehicleObstructionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VehicleObstructionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("abandonedVehicle")) => nu.ndw.AbandonedVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("abnormalLoad")) => nu.ndw.AbnormalLoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("brokenDownBus")) => nu.ndw.BrokenDownBus
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("brokenDownHeavyLorry")) => nu.ndw.BrokenDownHeavyLorry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("brokenDownVehicle")) => nu.ndw.BrokenDownVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("convoy")) => nu.ndw.Convoy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedVehicle")) => nu.ndw.DamagedVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dangerousSlowMovingVehicle")) => nu.ndw.DangerousSlowMovingVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("emergencyVehicle")) => nu.ndw.EmergencyVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("highSpeedEmergencyVehicle")) => nu.ndw.HighSpeedEmergencyVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("longLoad")) => nu.ndw.LongLoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("militaryConvoy")) => nu.ndw.MilitaryConvoy
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overheightVehicle")) => nu.ndw.OverheightVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("prohibitedVehicleOnTheRoadway")) => nu.ndw.ProhibitedVehicleOnTheRoadway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("saltingOrGrittingVehicleInUse")) => nu.ndw.SaltingOrGrittingVehicleInUse
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slowMovingMaintenanceVehicle")) => nu.ndw.SlowMovingMaintenanceVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slowVehicle")) => nu.ndw.SlowVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowplough")) => nu.ndw.Snowplough
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trackLayingVehicle")) => nu.ndw.TrackLayingVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unlitVehicleOnTheRoad")) => nu.ndw.UnlitVehicleOnTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleOnFire")) => nu.ndw.VehicleOnFire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleCarryingHazardousMaterials")) => nu.ndw.VehicleCarryingHazardousMaterials
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleInDifficulty")) => nu.ndw.VehicleInDifficulty
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleOnWrongCarriageway")) => nu.ndw.VehicleOnWrongCarriageway
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleStuck")) => nu.ndw.VehicleStuck
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleStuckUnderBridge")) => nu.ndw.VehicleStuckUnderBridge
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleWithOverheightLoad")) => nu.ndw.VehicleWithOverheightLoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleWithOverwideLoad")) => nu.ndw.VehicleWithOverwideLoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue5

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VehicleObstructionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VehicleObstructionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_VehicleRateFormat extends scalaxb.ElemNameParser[nu.ndw.VehicleRate] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VehicleRate")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VehicleRate] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "fillRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "exitRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleFlowRate")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measuredVehicles")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleRateExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.VehicleRate(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.VehicleFlowValue](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.VehicleFlowValue](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.VehicleFlowValue](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VehicleRate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.fillRate map { scalaxb.toXML[nu.ndw.VehicleFlowValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("fillRate"), __scope, false) } getOrElse {Nil},
        __obj.exitRate map { scalaxb.toXML[nu.ndw.VehicleFlowValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("exitRate"), __scope, false) } getOrElse {Nil},
        __obj.vehicleFlowRate map { scalaxb.toXML[nu.ndw.VehicleFlowValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleFlowRate"), __scope, false) } getOrElse {Nil},
        __obj.measuredVehicles map { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("measuredVehicles"), __scope, false) } getOrElse {Nil},
        __obj.vehicleRateExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleRateExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_VehicleStatusEnumFormat = new DefaultNundw_VehicleStatusEnumFormat {}
  trait DefaultNundw_VehicleStatusEnumFormat extends scalaxb.XMLFormat[nu.ndw.VehicleStatusEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VehicleStatusEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("abandoned")) => nu.ndw.Abandoned
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("brokenDown")) => nu.ndw.BrokenDown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("burntOut")) => nu.ndw.BurntOut
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damaged")) => nu.ndw.Damaged
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("damagedAndImmobilized")) => nu.ndw.DamagedAndImmobilized
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("onFire")) => nu.ndw.OnFire

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VehicleStatusEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VehicleStatusEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_VehicleType2EnumFormat = new DefaultNundw_VehicleType2EnumFormat {}
  trait DefaultNundw_VehicleType2EnumFormat extends scalaxb.XMLFormat[nu.ndw.VehicleType2Enum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VehicleType2Enum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorhome")) => nu.ndw.Motorhome
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lightGoodsVehicle")) => nu.ndw.LightGoodsVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heavyGoodsVehicle")) => nu.ndw.HeavyGoodsVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("minibus")) => nu.ndw.Minibus
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("smallCar")) => nu.ndw.SmallCar
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("largeCar")) => nu.ndw.LargeCar
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lightGoodsVehicleWithTrailer")) => nu.ndw.LightGoodsVehicleWithTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heavyGoodsVehicleWithTrailer")) => nu.ndw.HeavyGoodsVehicleWithTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("heavyHaulageVehicle")) => nu.ndw.HeavyHaulageVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("passengerCar")) => nu.ndw.PassengerCar
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.UnknownValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VehicleType2Enum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VehicleType2Enum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_VehicleTypeEnumFormat = new DefaultNundw_VehicleTypeEnumFormat {}
  trait DefaultNundw_VehicleTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.VehicleTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VehicleTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("agriculturalVehicle")) => nu.ndw.AgriculturalVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("anyVehicle")) => nu.ndw.AnyVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("articulatedVehicle")) => nu.ndw.ArticulatedVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bicycle")) => nu.ndw.BicycleValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bus")) => nu.ndw.BusValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("car")) => nu.ndw.Car
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("caravan")) => nu.ndw.Caravan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carOrLightVehicle")) => nu.ndw.CarOrLightVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carWithCaravan")) => nu.ndw.CarWithCaravan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carWithTrailer")) => nu.ndw.CarWithTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("constructionOrMaintenanceVehicle")) => nu.ndw.ConstructionOrMaintenanceVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fourWheelDrive")) => nu.ndw.FourWheelDrive
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("highSidedVehicle")) => nu.ndw.HighSidedVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lorry")) => nu.ndw.LorryValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("moped")) => nu.ndw.Moped
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorcycle")) => nu.ndw.Motorcycle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorcycleWithSideCar")) => nu.ndw.MotorcycleWithSideCar
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("motorscooter")) => nu.ndw.Motorscooter
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tanker")) => nu.ndw.Tanker
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("threeWheeledVehicle")) => nu.ndw.ThreeWheeledVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trailer")) => nu.ndw.Trailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tram")) => nu.ndw.TramValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("twoWheeledVehicle")) => nu.ndw.TwoWheeledVehicle
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("van")) => nu.ndw.Van
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleWithCatalyticConverter")) => nu.ndw.VehicleWithCatalyticConverter
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleWithoutCatalyticConverter")) => nu.ndw.VehicleWithoutCatalyticConverter
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleWithCaravan")) => nu.ndw.VehicleWithCaravan
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleWithTrailer")) => nu.ndw.VehicleWithTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("withEvenNumberedRegistrationPlates")) => nu.ndw.WithEvenNumberedRegistrationPlates
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("withOddNumberedRegistrationPlates")) => nu.ndw.WithOddNumberedRegistrationPlates
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue86

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VehicleTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VehicleTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_VehicleUsage2EnumFormat = new DefaultNundw_VehicleUsage2EnumFormat {}
  trait DefaultNundw_VehicleUsage2EnumFormat extends scalaxb.XMLFormat[nu.ndw.VehicleUsage2Enum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VehicleUsage2Enum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("cityLogistics")) => nu.ndw.CityLogistics
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carSharing")) => nu.ndw.CarSharing

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VehicleUsage2Enum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VehicleUsage2Enum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_VehicleUsageEnumFormat = new DefaultNundw_VehicleUsageEnumFormat {}
  trait DefaultNundw_VehicleUsageEnumFormat extends scalaxb.XMLFormat[nu.ndw.VehicleUsageEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VehicleUsageEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("agricultural")) => nu.ndw.Agricultural
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("commercial")) => nu.ndw.Commercial
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("emergencyServices")) => nu.ndw.EmergencyServicesValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("military")) => nu.ndw.Military
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("nonCommercial")) => nu.ndw.NonCommercial
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("patrol")) => nu.ndw.PatrolValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("recoveryServices")) => nu.ndw.RecoveryServices
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadMaintenanceOrConstruction")) => nu.ndw.RoadMaintenanceOrConstruction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadOperator")) => nu.ndw.RoadOperator
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("taxi")) => nu.ndw.Taxi

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VehicleUsageEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VehicleUsageEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_VersionedReferencableFormat extends scalaxb.XMLFormat[nu.ndw.VersionedReferencable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VersionedReferencable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_VmsUnitTableVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._VmsUnitTableVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_VmsUnitRecordVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._VmsUnitRecordVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_SituationVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._SituationVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_PredefinedNonOrderedLocationGroupVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_PredefinedItineraryVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._PredefinedItineraryVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_ParkingRouteDetailsVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._ParkingRouteDetailsVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_MeasurementSiteTableVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._MeasurementSiteTableVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_ContactDetailsVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._ContactDetailsVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_ChargeBandVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._ChargeBandVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_MeasurementSiteRecordVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._MeasurementSiteRecordVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_ParkingRecordVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._ParkingRecordVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_ParkingTableVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._ParkingTableVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_PredefinedLocationVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._PredefinedLocationVersionedReference](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("_SituationRecordVersionedReference")) => Right(scalaxb.fromXML[nu.ndw._SituationRecordVersionedReference](node, stack))
          case _ => Right(scalaxb.fromXML[nu.ndw.VersionedReference](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.VersionedReferencable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw._VmsUnitTableVersionedReference => scalaxb.toXML[nu.ndw._VmsUnitTableVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._VmsUnitRecordVersionedReference => scalaxb.toXML[nu.ndw._VmsUnitRecordVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._SituationVersionedReference => scalaxb.toXML[nu.ndw._SituationVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference => scalaxb.toXML[nu.ndw._PredefinedNonOrderedLocationGroupVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._PredefinedItineraryVersionedReference => scalaxb.toXML[nu.ndw._PredefinedItineraryVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._ParkingRouteDetailsVersionedReference => scalaxb.toXML[nu.ndw._ParkingRouteDetailsVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._MeasurementSiteTableVersionedReference => scalaxb.toXML[nu.ndw._MeasurementSiteTableVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._ContactDetailsVersionedReference => scalaxb.toXML[nu.ndw._ContactDetailsVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._ChargeBandVersionedReference => scalaxb.toXML[nu.ndw._ChargeBandVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._MeasurementSiteRecordVersionedReference => scalaxb.toXML[nu.ndw._MeasurementSiteRecordVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._ParkingRecordVersionedReference => scalaxb.toXML[nu.ndw._ParkingRecordVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._ParkingTableVersionedReference => scalaxb.toXML[nu.ndw._ParkingTableVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._PredefinedLocationVersionedReference => scalaxb.toXML[nu.ndw._PredefinedLocationVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw._SituationRecordVersionedReference => scalaxb.toXML[nu.ndw._SituationRecordVersionedReference](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.VersionedReference => scalaxb.toXML[nu.ndw.VersionedReference](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultNundw_VersionedReferenceFormat extends scalaxb.XMLFormat[nu.ndw.VersionedReference] with scalaxb.CanWriteChildNodes[nu.ndw.VersionedReference] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VersionedReference] = seq match {
      case node: scala.xml.Node => Right(nu.ndw.VersionedReference(scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: nu.ndw.VersionedReference, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.VersionedReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultNundw_VisibilityFormat extends scalaxb.ElemNameParser[nu.ndw.Visibility] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Visibility")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Visibility] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "minimumVisibilityDistance")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "visibilityExtension")) ^^
      { case p1 ~ p2 =>
      nu.ndw.Visibility(scalaxb.fromXML[nu.ndw.IntegerMetreDistanceValue](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Visibility, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.IntegerMetreDistanceValue](__obj.minimumVisibilityDistance, Some("http://datex2.eu/schema/2/2_0"), Some("minimumVisibilityDistance"), __scope, false),
        __obj.visibilityExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("visibilityExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VisibilityInformationFormat extends scalaxb.ElemNameParser[nu.ndw.VisibilityInformation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VisibilityInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VisibilityInformation] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherDataExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "visibility")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "visibilityInformationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.VisibilityInformation(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Visibility](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.VisibilityInformation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.VisibilityInformation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.weatherDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherDataExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Visibility](__obj.visibility, Some("http://datex2.eu/schema/2/2_0"), Some("visibility"), __scope, false),
        __obj.visibilityInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("visibilityInformationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsFormat extends scalaxb.ElemNameParser[nu.ndw.Vms] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Vms")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Vms] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsWorking")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsMessageSequencingInterval")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsMessage")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textDisplayAreaSettings")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramDisplayAreaSettings")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsLocationOverride")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "managedLogicalLocationOverride")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsDynamicCharacteristics")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsFault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      nu.ndw.Vms(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw._VmsMessageIndexVmsMessage](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.TextDisplayAreaSettings](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw._VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.Location](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[nu.ndw.VmsManagedLogicalLocation](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.VmsDynamicCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[nu.ndw.VmsFault](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Vms, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.vmsWorking, Some("http://datex2.eu/schema/2/2_0"), Some("vmsWorking"), __scope, false),
        __obj.vmsMessageSequencingInterval map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsMessageSequencingInterval"), __scope, false) } getOrElse {Nil},
        __obj.vmsMessage flatMap { scalaxb.toXML[nu.ndw._VmsMessageIndexVmsMessage](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsMessage"), __scope, false) },
        __obj.textDisplayAreaSettings map { scalaxb.toXML[nu.ndw.TextDisplayAreaSettings](_, Some("http://datex2.eu/schema/2/2_0"), Some("textDisplayAreaSettings"), __scope, false) } getOrElse {Nil},
        __obj.pictogramDisplayAreaSettings flatMap { scalaxb.toXML[nu.ndw._VmsPictogramDisplayAreaIndexPictogramDisplayAreaSettings](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramDisplayAreaSettings"), __scope, false) },
        __obj.vmsLocationOverride map { scalaxb.toXML[nu.ndw.Location](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsLocationOverride"), __scope, false) } getOrElse {Nil},
        __obj.managedLogicalLocationOverride map { scalaxb.toXML[nu.ndw.VmsManagedLogicalLocation](_, Some("http://datex2.eu/schema/2/2_0"), Some("managedLogicalLocationOverride"), __scope, false) } getOrElse {Nil},
        __obj.vmsDynamicCharacteristics map { scalaxb.toXML[nu.ndw.VmsDynamicCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsDynamicCharacteristics"), __scope, false) } getOrElse {Nil},
        __obj.vmsFault flatMap { scalaxb.toXML[nu.ndw.VmsFault](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsFault"), __scope, false) },
        __obj.vmsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_VmsDatexPictogramEnumFormat = new DefaultNundw_VmsDatexPictogramEnumFormat {}
  trait DefaultNundw_VmsDatexPictogramEnumFormat extends scalaxb.XMLFormat[nu.ndw.VmsDatexPictogramEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VmsDatexPictogramEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("accident")) => nu.ndw.Accident
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("advisorySpeed")) => nu.ndw.AdvisorySpeed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("animalsOnRoad")) => nu.ndw.AnimalsOnRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blankVoid")) => nu.ndw.BlankVoid
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bridgeClosed")) => nu.ndw.BridgeClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("bridgeSwingInOperation")) => nu.ndw.BridgeSwingInOperation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carParkFull")) => nu.ndw.CarParkFull
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carParkSpacesAvailable")) => nu.ndw.CarParkSpacesAvailable
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carriagewayNarrows")) => nu.ndw.CarriagewayNarrows
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carriagewayNarrowsOnTheLeft")) => nu.ndw.CarriagewayNarrowsOnTheLeft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carriagewayNarrowsOnTheRight")) => nu.ndw.CarriagewayNarrowsOnTheRight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carriagewayReducedToOneLane")) => nu.ndw.CarriagewayReducedToOneLane
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carriagewayReducedToTwoLanes")) => nu.ndw.CarriagewayReducedToTwoLanes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("carriagewayReducedToThreeLanes")) => nu.ndw.CarriagewayReducedToThreeLanes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("chainsOrSnowTyresRecommended")) => nu.ndw.ChainsOrSnowTyresRecommended
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("compulsoryMinimumSpeed")) => nu.ndw.CompulsoryMinimumSpeed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("crossWind")) => nu.ndw.CrossWind
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dangerOfFire")) => nu.ndw.DangerOfFire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("drivingOfVehiclesLessThanXMetresApartProhibited")) => nu.ndw.DrivingOfVehiclesLessThanXMetresApartProhibited
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("endOfAdvisorySpeed")) => nu.ndw.EndOfAdvisorySpeed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("endOfCompulsoryMinimumSpeed")) => nu.ndw.EndOfCompulsoryMinimumSpeed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("endOfProhibitionOfOvertaking")) => nu.ndw.EndOfProhibitionOfOvertaking
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("endOfProhibitionOfOvertakingForGoodsVehicles")) => nu.ndw.EndOfProhibitionOfOvertakingForGoodsVehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("endOfSpeedLimit")) => nu.ndw.EndOfSpeedLimit
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exitClosed")) => nu.ndw.ExitClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fallingRocks")) => nu.ndw.FallingRocks
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fastenChildrensSeatBelts")) => nu.ndw.FastenChildrensSeatBelts
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fastenYourSeatBelt")) => nu.ndw.FastenYourSeatBelt
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fire")) => nu.ndw.Fire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("floodingOrFlashFloods")) => nu.ndw.FloodingOrFlashFloods
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fog")) => nu.ndw.Fog
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("footballMatch")) => nu.ndw.FootballMatch
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hardShoulderNotRunning")) => nu.ndw.HardShoulderNotRunning
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("hardShoulderRunning")) => nu.ndw.HardShoulderRunning
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("keepASafeDistance")) => nu.ndw.KeepASafeDistance
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("keepLeft")) => nu.ndw.KeepLeft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("keepRight")) => nu.ndw.KeepRight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane1ClosedOf2")) => nu.ndw.Lane1ClosedOf2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane2ClosedOf2")) => nu.ndw.Lane2ClosedOf2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane1ClosedOf3")) => nu.ndw.Lane1ClosedOf3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane3ClosedOf3")) => nu.ndw.Lane3ClosedOf3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lanes1And2ClosedOf3")) => nu.ndw.Lanes1And2ClosedOf3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lanes2And3ClosedOf3")) => nu.ndw.Lanes2And3ClosedOf3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane1ClosedOf4")) => nu.ndw.Lane1ClosedOf4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lane4ClosedOf4")) => nu.ndw.Lane4ClosedOf4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lanes1And2ClosedOf4")) => nu.ndw.Lanes1And2ClosedOf4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lanes3And4ClosedOf4")) => nu.ndw.Lanes3And4ClosedOf4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lanes1And2And3ClosedOf4")) => nu.ndw.Lanes1And2And3ClosedOf4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lanes2And3And4ClosedOf4")) => nu.ndw.Lanes2And3And4ClosedOf4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("laneClosed")) => nu.ndw.LaneClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("laneDeviationToLeft")) => nu.ndw.LaneDeviationToLeft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("laneDeviationToRight")) => nu.ndw.LaneDeviationToRight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("laneOpen")) => nu.ndw.LaneOpen
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("leftHandLaneClosed")) => nu.ndw.LeftHandLaneClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lightSignals")) => nu.ndw.LightSignals
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("looseGravel")) => nu.ndw.LooseGravel
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("maintenanceVehicleInAction")) => nu.ndw.MaintenanceVehicleInAction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("maximumSpeedLimitedToTheFigureIndicated")) => nu.ndw.MaximumSpeedLimitedToTheFigureIndicated
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("narrowLanesAead")) => nu.ndw.NarrowLanesAead
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntry")) => nu.ndw.NoEntry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntryForAnyPowerDrivenVehicleDrawingATrailer")) => nu.ndw.NoEntryForAnyPowerDrivenVehicleDrawingATrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntryForAnyPowerDrivenVehicleDrawingATrailerOtherThanASemiTrailerOrASingleAxleTrailer")) => nu.ndw.LongName
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntryForGoodsVehicles")) => nu.ndw.NoEntryForGoodsVehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntryForVehiclesExceedingXTonnesLadenMass")) => nu.ndw.NoEntryForVehiclesExceedingXTonnesLadenMass
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntryForVehiclesHavingAMassExceedingXTonnesOnOneAxle")) => nu.ndw.LongNameValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntryForVehiclesHavingAnOverallHeightExceedingXMetres")) => nu.ndw.LongNameValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntryForVehiclesHavingAnOverallLengthExceedingXMetres")) => nu.ndw.LongNameValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntryForVehiclesHavingAnOverallWidthExceedingXMetres")) => nu.ndw.LongNameValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("noEntryForVehiclesCarryingDangerousGoods")) => nu.ndw.NoEntryForVehiclesCarryingDangerousGoods
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("otherDangers")) => nu.ndw.OtherDangers
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overtakingByGoodsVehiclesProhibited")) => nu.ndw.OvertakingByGoodsVehiclesProhibited
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overtakingProhibited")) => nu.ndw.OvertakingProhibited
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("pollutionOrSmogAlert")) => nu.ndw.PollutionOrSmogAlert
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("queue")) => nu.ndw.QueueType
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rain")) => nu.ndw.Rain
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("rightHandLaneClosed")) => nu.ndw.RightHandLaneClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadClosedAhead")) => nu.ndw.RoadClosedAhead
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadworks")) => nu.ndw.Roadworks
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slipperyRoad")) => nu.ndw.SlipperyRoadValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("smoke")) => nu.ndw.Smoke
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snow")) => nu.ndw.Snow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowChainsCompulsory")) => nu.ndw.SnowChainsCompulsory
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowTyresCompulsory")) => nu.ndw.SnowTyresCompulsory
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowPloughInAction")) => nu.ndw.SnowPloughInAction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("speedCamerasInAction")) => nu.ndw.SpeedCamerasInAction
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficCongestion")) => nu.ndw.TrafficCongestion
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficDeviatedToOppositeCarriagewayAhead")) => nu.ndw.TrafficDeviatedToOppositeCarriagewayAhead
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficPartiallyDeviatedToOppositeCarriagewayAhead")) => nu.ndw.TrafficPartiallyDeviatedToOppositeCarriagewayAhead
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("tunnelClosed")) => nu.ndw.TunnelClosed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("turnLeft")) => nu.ndw.TurnLeft
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("turnRight")) => nu.ndw.TurnRight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("twoWayTraffic")) => nu.ndw.TwoWayTraffic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unevenRoad")) => nu.ndw.UnevenRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("vehicleFire")) => nu.ndw.VehicleFire
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue4

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VmsDatexPictogramEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VmsDatexPictogramEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_VmsDatexSupplementalPictogramEnumFormat = new DefaultNundw_VmsDatexSupplementalPictogramEnumFormat {}
  trait DefaultNundw_VmsDatexSupplementalPictogramEnumFormat extends scalaxb.XMLFormat[nu.ndw.VmsDatexSupplementalPictogramEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VmsDatexSupplementalPictogramEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("distanceToTheBeginningofTheApplicationZone")) => nu.ndw.DistanceToTheBeginningofTheApplicationZone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exceptAnyPowerDrivenVehicleDrawingTrailer")) => nu.ndw.ExceptAnyPowerDrivenVehicleDrawingTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exceptBus")) => nu.ndw.ExceptBus
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exceptGoodsVehicles")) => nu.ndw.ExceptGoodsVehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exceptSemiTrailer")) => nu.ndw.ExceptSemiTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("exceptVehiclesCarryingDangerousGoods")) => nu.ndw.ExceptVehiclesCarryingDangerousGoods
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inCaseOfIceOrSnow")) => nu.ndw.InCaseOfIceOrSnow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("lengthOfTheApplicationZone")) => nu.ndw.LengthOfTheApplicationZone
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restrictedToAnyPowerDrivenVehicleDrawingTrailer")) => nu.ndw.RestrictedToAnyPowerDrivenVehicleDrawingTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restricetdToBus")) => nu.ndw.RestricetdToBus
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restrictedToGoodsVehicles")) => nu.ndw.RestrictedToGoodsVehicles
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restrictedToSemiTrailer")) => nu.ndw.RestrictedToSemiTrailer
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("restrictedToVehiclesCarryingDangerousGoods")) => nu.ndw.RestrictedToVehiclesCarryingDangerousGoods
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("maintenanceVehicles")) => nu.ndw.MaintenanceVehiclesValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowPloughs")) => nu.ndw.SnowPloughs
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue87

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VmsDatexSupplementalPictogramEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VmsDatexSupplementalPictogramEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_VmsDynamicCharacteristicsFormat extends scalaxb.ElemNameParser[nu.ndw.VmsDynamicCharacteristics] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsDynamicCharacteristics")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsDynamicCharacteristics] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfPictogramDisplayAreas")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextDisplayCharacteristics")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogramDisplayCharacteristics")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsDynamicCharacteristicsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.VmsDynamicCharacteristics(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.VmsTextDisplayCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw._VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsDynamicCharacteristics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.numberOfPictogramDisplayAreas map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfPictogramDisplayAreas"), __scope, false) } getOrElse {Nil},
        __obj.vmsTextDisplayCharacteristics map { scalaxb.toXML[nu.ndw.VmsTextDisplayCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextDisplayCharacteristics"), __scope, false) } getOrElse {Nil},
        __obj.vmsPictogramDisplayCharacteristics flatMap { scalaxb.toXML[nu.ndw._VmsDynamicCharacteristicsPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogramDisplayCharacteristics"), __scope, false) },
        __obj.vmsDynamicCharacteristicsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsDynamicCharacteristicsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsFaultFormat extends scalaxb.ElemNameParser[nu.ndw.VmsFault] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsFault")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsFault] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultCreationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultLastUpdateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultSeverity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsFault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsFaultExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.VmsFault(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw.FaultSeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.VmsFaultEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsFault, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.faultIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.faultDescription map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultDescription"), __scope, false) } getOrElse {Nil},
        __obj.faultCreationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultCreationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.faultLastUpdateTime, Some("http://datex2.eu/schema/2/2_0"), Some("faultLastUpdateTime"), __scope, false),
        __obj.faultSeverity map { scalaxb.toXML[nu.ndw.FaultSeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultSeverity"), __scope, false) } getOrElse {Nil},
        __obj.faultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.VmsFaultEnum](__obj.vmsFault, Some("http://datex2.eu/schema/2/2_0"), Some("vmsFault"), __scope, false),
        __obj.vmsFaultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsFaultExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_VmsFaultEnumFormat = new DefaultNundw_VmsFaultEnumFormat {}
  trait DefaultNundw_VmsFaultEnumFormat extends scalaxb.XMLFormat[nu.ndw.VmsFaultEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VmsFaultEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("communicationsFailure")) => nu.ndw.CommunicationsFailure
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("incorrectMessageDisplayed")) => nu.ndw.IncorrectMessageDisplayed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("incorrectPictogramDisplayed")) => nu.ndw.IncorrectPictogramDisplayed
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("outOfService")) => nu.ndw.OutOfService
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("powerFailure")) => nu.ndw.PowerFailure
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unableToClearDown")) => nu.ndw.UnableToClearDown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("unknown")) => nu.ndw.Unknown
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VmsFaultEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VmsFaultEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_VmsLuminanceLevelEnumFormat = new DefaultNundw_VmsLuminanceLevelEnumFormat {}
  trait DefaultNundw_VmsLuminanceLevelEnumFormat extends scalaxb.XMLFormat[nu.ndw.VmsLuminanceLevelEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VmsLuminanceLevelEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("switchedOff")) => nu.ndw.SwitchedOff
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("testing")) => nu.ndw.Testing
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("night")) => nu.ndw.Night
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("overcast")) => nu.ndw.Overcast
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("broadDaylight")) => nu.ndw.BroadDaylight
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sunInEyes")) => nu.ndw.SunInEyes
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("sunOnBack")) => nu.ndw.SunOnBack
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("foggyDay")) => nu.ndw.FoggyDay
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("foggyNight")) => nu.ndw.FoggyNight

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VmsLuminanceLevelEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VmsLuminanceLevelEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_VmsManagedLogicalLocationFormat extends scalaxb.ElemNameParser[nu.ndw.VmsManagedLogicalLocation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsManagedLogicalLocation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsManagedLogicalLocation] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "managedLogicalLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceFromLogicalLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "managedLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsManagedLogicalLocationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.VmsManagedLogicalLocation(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.Location](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsManagedLogicalLocation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.managedLogicalLocation map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("managedLogicalLocation"), __scope, false) } getOrElse {Nil},
        __obj.distanceFromLogicalLocation map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceFromLogicalLocation"), __scope, false) } getOrElse {Nil},
        __obj.managedLocation map { scalaxb.toXML[nu.ndw.Location](_, Some("http://datex2.eu/schema/2/2_0"), Some("managedLocation"), __scope, false) } getOrElse {Nil},
        __obj.vmsManagedLogicalLocationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsManagedLogicalLocationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsMessageFormat extends scalaxb.ElemNameParser[nu.ndw.VmsMessage] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsMessage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsMessage] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "associatedManagementOrDiversionPlan")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "messageSetBy")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "setBySystem")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "reasonForSetting")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "codedReasonForSetting")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsMessageInformationType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "primarySetting")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "mareNostrumCompliant")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "timeLastSet")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "requestedBy")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationToWhichMessageIsRelated")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordToWhichMessageIsRelated")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceFromSituationRecord")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textPictogramSequencingInterval")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textPage")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogramDisplayArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsMessageExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      nu.ndw.VmsMessage(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.CodedReasonForSettingMessageEnum](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[nu.ndw.VmsMessageInformationTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.VersionedReferencable](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.VersionedReferencable](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw._TextPage](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[nu.ndw._VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsMessage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.associatedManagementOrDiversionPlan map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("associatedManagementOrDiversionPlan"), __scope, false) } getOrElse {Nil},
        __obj.messageSetBy map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("messageSetBy"), __scope, false) } getOrElse {Nil},
        __obj.setBySystem map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("setBySystem"), __scope, false) } getOrElse {Nil},
        __obj.reasonForSetting map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("reasonForSetting"), __scope, false) } getOrElse {Nil},
        __obj.codedReasonForSetting map { scalaxb.toXML[nu.ndw.CodedReasonForSettingMessageEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("codedReasonForSetting"), __scope, false) } getOrElse {Nil},
        __obj.vmsMessageInformationType flatMap { scalaxb.toXML[nu.ndw.VmsMessageInformationTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsMessageInformationType"), __scope, false) },
        __obj.primarySetting map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("primarySetting"), __scope, false) } getOrElse {Nil},
        __obj.mareNostrumCompliant map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("mareNostrumCompliant"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.timeLastSet, Some("http://datex2.eu/schema/2/2_0"), Some("timeLastSet"), __scope, false),
        __obj.requestedBy map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("requestedBy"), __scope, false) } getOrElse {Nil},
        __obj.situationToWhichMessageIsRelated map { scalaxb.toXML[nu.ndw.VersionedReferencable](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationToWhichMessageIsRelated"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordToWhichMessageIsRelated map { scalaxb.toXML[nu.ndw.VersionedReferencable](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordToWhichMessageIsRelated"), __scope, false) } getOrElse {Nil},
        __obj.distanceFromSituationRecord map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceFromSituationRecord"), __scope, false) } getOrElse {Nil},
        __obj.textPictogramSequencingInterval map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("textPictogramSequencingInterval"), __scope, false) } getOrElse {Nil},
        __obj.textPage flatMap { scalaxb.toXML[nu.ndw._TextPage](_, Some("http://datex2.eu/schema/2/2_0"), Some("textPage"), __scope, false) },
        __obj.vmsPictogramDisplayArea flatMap { scalaxb.toXML[nu.ndw._VmsMessagePictogramDisplayAreaIndexVmsPictogramDisplayArea](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogramDisplayArea"), __scope, false) },
        __obj.vmsMessageExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsMessageExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_VmsMessageInformationTypeEnumFormat = new DefaultNundw_VmsMessageInformationTypeEnumFormat {}
  trait DefaultNundw_VmsMessageInformationTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.VmsMessageInformationTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VmsMessageInformationTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("campaignMessage")) => nu.ndw.CampaignMessage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dateTime")) => nu.ndw.DateTime
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("futureInformation")) => nu.ndw.FutureInformation
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("instructionOrMessage")) => nu.ndw.InstructionOrMessage
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("situationWarning")) => nu.ndw.SituationWarning
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("temperature")) => nu.ndw.Temperature
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("trafficManagement")) => nu.ndw.TrafficManagement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("travelTime")) => nu.ndw.TravelTime

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VmsMessageInformationTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VmsMessageInformationTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_VmsPictogramFormat extends scalaxb.ElemNameParser[nu.ndw.VmsPictogram] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsPictogram")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsPictogram] =
      phrase(safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramCode")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramUrl")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "additionalPictogramDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramFlashing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramInInverseColour")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "presenceOfRedTriangle")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "viennaConventionCompliant")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "distanceAttribute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "heightAttribute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "lengthAttribute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "speedAttribute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weightAttribute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weightPerAxleAttribute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "widthAttribute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsSupplementaryPanel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogramExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      nu.ndw.VmsPictogram(p1 map { scalaxb.fromXML[nu.ndw.VmsDatexPictogramEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[nu.ndw.VmsSupplementaryPanel](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsPictogram, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.pictogramDescription flatMap { scalaxb.toXML[nu.ndw.VmsDatexPictogramEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramDescription"), __scope, false) },
        __obj.pictogramCode map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramCode"), __scope, false) } getOrElse {Nil},
        __obj.pictogramUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramUrl"), __scope, false) } getOrElse {Nil},
        __obj.additionalPictogramDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("additionalPictogramDescription"), __scope, false) } getOrElse {Nil},
        __obj.pictogramFlashing map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramFlashing"), __scope, false) } getOrElse {Nil},
        __obj.pictogramInInverseColour map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramInInverseColour"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.presenceOfRedTriangle, Some("http://datex2.eu/schema/2/2_0"), Some("presenceOfRedTriangle"), __scope, false),
        __obj.viennaConventionCompliant map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("viennaConventionCompliant"), __scope, false) } getOrElse {Nil},
        __obj.distanceAttribute map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("distanceAttribute"), __scope, false) } getOrElse {Nil},
        __obj.heightAttribute map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("heightAttribute"), __scope, false) } getOrElse {Nil},
        __obj.lengthAttribute map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("lengthAttribute"), __scope, false) } getOrElse {Nil},
        __obj.speedAttribute map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("speedAttribute"), __scope, false) } getOrElse {Nil},
        __obj.weightAttribute map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("weightAttribute"), __scope, false) } getOrElse {Nil},
        __obj.weightPerAxleAttribute map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("weightPerAxleAttribute"), __scope, false) } getOrElse {Nil},
        __obj.widthAttribute map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("widthAttribute"), __scope, false) } getOrElse {Nil},
        __obj.vmsSupplementaryPanel map { scalaxb.toXML[nu.ndw.VmsSupplementaryPanel](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsSupplementaryPanel"), __scope, false) } getOrElse {Nil},
        __obj.vmsPictogramExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogramExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsPictogramDisplayAreaFormat extends scalaxb.ElemNameParser[nu.ndw.VmsPictogramDisplayArea] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsPictogramDisplayArea")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsPictogramDisplayArea] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "synchronizedSequencingWithTextPages")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogram")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogramDisplayAreaExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.VmsPictogramDisplayArea(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw._VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsPictogramDisplayArea, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.synchronizedSequencingWithTextPages map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("synchronizedSequencingWithTextPages"), __scope, false) } getOrElse {Nil},
        __obj.vmsPictogram flatMap { scalaxb.toXML[nu.ndw._VmsPictogramDisplayAreaPictogramSequencingIndexVmsPictogram](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogram"), __scope, false) },
        __obj.vmsPictogramDisplayAreaExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogramDisplayAreaExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsPictogramDisplayCharacteristicsFormat extends scalaxb.ElemNameParser[nu.ndw.VmsPictogramDisplayCharacteristics] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsPictogramDisplayCharacteristics")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsPictogramDisplayCharacteristics] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramLanternsPresent")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramSequencingCapable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramPixelsAcross")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramPixelsDown")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramDisplayHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramDisplayWidth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramCodeListIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxPictogramLuminanceLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramNumberOfColours")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxNumberOfSequentialPictograms")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramPositionAbsolute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramPositionX")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramPositionY")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramPositionRelativeToText")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsSupplementaryPanelCharacteristics")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogramDisplayCharacteristicsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      nu.ndw.VmsPictogramDisplayCharacteristics(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.PositionAbsoluteEnum](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[nu.ndw.PositionRelativeEnum](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[nu.ndw.VmsSupplementaryPanelCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsPictogramDisplayCharacteristics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.pictogramLanternsPresent map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramLanternsPresent"), __scope, false) } getOrElse {Nil},
        __obj.pictogramSequencingCapable map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramSequencingCapable"), __scope, false) } getOrElse {Nil},
        __obj.pictogramPixelsAcross map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramPixelsAcross"), __scope, false) } getOrElse {Nil},
        __obj.pictogramPixelsDown map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramPixelsDown"), __scope, false) } getOrElse {Nil},
        __obj.pictogramDisplayHeight map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramDisplayHeight"), __scope, false) } getOrElse {Nil},
        __obj.pictogramDisplayWidth map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramDisplayWidth"), __scope, false) } getOrElse {Nil},
        __obj.pictogramCodeListIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramCodeListIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.maxPictogramLuminanceLevel map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxPictogramLuminanceLevel"), __scope, false) } getOrElse {Nil},
        __obj.pictogramNumberOfColours map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramNumberOfColours"), __scope, false) } getOrElse {Nil},
        __obj.maxNumberOfSequentialPictograms map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxNumberOfSequentialPictograms"), __scope, false) } getOrElse {Nil},
        __obj.pictogramPositionAbsolute map { scalaxb.toXML[nu.ndw.PositionAbsoluteEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramPositionAbsolute"), __scope, false) } getOrElse {Nil},
        __obj.pictogramPositionX map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramPositionX"), __scope, false) } getOrElse {Nil},
        __obj.pictogramPositionY map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramPositionY"), __scope, false) } getOrElse {Nil},
        __obj.pictogramPositionRelativeToText map { scalaxb.toXML[nu.ndw.PositionRelativeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramPositionRelativeToText"), __scope, false) } getOrElse {Nil},
        __obj.vmsSupplementaryPanelCharacteristics map { scalaxb.toXML[nu.ndw.VmsSupplementaryPanelCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsSupplementaryPanelCharacteristics"), __scope, false) } getOrElse {Nil},
        __obj.vmsPictogramDisplayCharacteristicsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogramDisplayCharacteristicsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsPublicationFormat extends scalaxb.ElemNameParser[nu.ndw.VmsPublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsPublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsPublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationCreator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublicationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnit")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPublicationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.VmsPublication(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.HeaderInformation](p6, scalaxb.ElemName(node) :: stack),
        p7 map { scalaxb.fromXML[nu.ndw.VmsUnit](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.VmsPublication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.VmsPublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.feedDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedDescription"), __scope, false) } getOrElse {Nil},
        __obj.feedType map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.publicationTime, Some("http://datex2.eu/schema/2/2_0"), Some("publicationTime"), __scope, false),
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.publicationCreator, Some("http://datex2.eu/schema/2/2_0"), Some("publicationCreator"), __scope, false),
        __obj.payloadPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublicationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.HeaderInformation](__obj.headerInformation, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false),
        __obj.vmsUnit flatMap { scalaxb.toXML[nu.ndw.VmsUnit](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnit"), __scope, false) },
        __obj.vmsPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPublicationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsRecordFormat extends scalaxb.ElemNameParser[nu.ndw.VmsRecord] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsRecord")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsRecord] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsOwner")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPhysicalMounting")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTypeCode")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfPictogramDisplayAreas")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "dynamicallyConfigurableDisplayAreas")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsDisplayHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsDisplayWidth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsHeightAboveRoadway")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextDisplayCharacteristics")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsPictogramDisplayCharacteristics")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsManagedLogicalLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "backgroundImageUrl")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsRecordExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      nu.ndw.VmsRecord(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.PhysicalMountingEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.VmsTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[nu.ndw.VmsTextDisplayCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[nu.ndw._VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[nu.ndw.Location](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[nu.ndw.VmsManagedLogicalLocation](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsRecord, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.vmsDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsDescription"), __scope, false) } getOrElse {Nil},
        __obj.vmsOwner map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsOwner"), __scope, false) } getOrElse {Nil},
        __obj.vmsPhysicalMounting map { scalaxb.toXML[nu.ndw.PhysicalMountingEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPhysicalMounting"), __scope, false) } getOrElse {Nil},
        __obj.vmsType map { scalaxb.toXML[nu.ndw.VmsTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsType"), __scope, false) } getOrElse {Nil},
        __obj.vmsTypeCode map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTypeCode"), __scope, false) } getOrElse {Nil},
        __obj.numberOfPictogramDisplayAreas map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfPictogramDisplayAreas"), __scope, false) } getOrElse {Nil},
        __obj.dynamicallyConfigurableDisplayAreas map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("dynamicallyConfigurableDisplayAreas"), __scope, false) } getOrElse {Nil},
        __obj.vmsDisplayHeight map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsDisplayHeight"), __scope, false) } getOrElse {Nil},
        __obj.vmsDisplayWidth map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsDisplayWidth"), __scope, false) } getOrElse {Nil},
        __obj.vmsHeightAboveRoadway map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsHeightAboveRoadway"), __scope, false) } getOrElse {Nil},
        __obj.vmsTextDisplayCharacteristics map { scalaxb.toXML[nu.ndw.VmsTextDisplayCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextDisplayCharacteristics"), __scope, false) } getOrElse {Nil},
        __obj.vmsPictogramDisplayCharacteristics flatMap { scalaxb.toXML[nu.ndw._VmsRecordPictogramDisplayAreaIndexVmsPictogramDisplayCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsPictogramDisplayCharacteristics"), __scope, false) },
        __obj.vmsLocation map { scalaxb.toXML[nu.ndw.Location](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsLocation"), __scope, false) } getOrElse {Nil},
        __obj.vmsManagedLogicalLocation map { scalaxb.toXML[nu.ndw.VmsManagedLogicalLocation](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsManagedLogicalLocation"), __scope, false) } getOrElse {Nil},
        __obj.backgroundImageUrl map { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("backgroundImageUrl"), __scope, false) } getOrElse {Nil},
        __obj.vmsRecordExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsRecordExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsSettingFormat extends scalaxb.XMLFormat[nu.ndw.VmsSetting] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VmsSetting] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VmsUnit")) => Right(scalaxb.fromXML[nu.ndw.VmsUnit](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.VmsSetting, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.VmsUnit => scalaxb.toXML[nu.ndw.VmsUnit](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_VmsSupplementaryPanelFormat extends scalaxb.ElemNameParser[nu.ndw.VmsSupplementaryPanel] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsSupplementaryPanel")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsSupplementaryPanel] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryMessageDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsSupplementaryPictogram")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsSupplementaryText")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsSupplementaryPanelExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.VmsSupplementaryPanel(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.VmsSupplementaryPictogram](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.VmsTextLine](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsSupplementaryPanel, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.supplementaryMessageDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryMessageDescription"), __scope, false) } getOrElse {Nil},
        __obj.vmsSupplementaryPictogram map { scalaxb.toXML[nu.ndw.VmsSupplementaryPictogram](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsSupplementaryPictogram"), __scope, false) } getOrElse {Nil},
        __obj.vmsSupplementaryText map { scalaxb.toXML[nu.ndw.VmsTextLine](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsSupplementaryText"), __scope, false) } getOrElse {Nil},
        __obj.vmsSupplementaryPanelExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsSupplementaryPanelExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsSupplementaryPanelCharacteristicsFormat extends scalaxb.ElemNameParser[nu.ndw.VmsSupplementaryPanelCharacteristics] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsSupplementaryPanelCharacteristics")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsSupplementaryPanelCharacteristics] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPictogramCodeListIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPanelPixelsAcross")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPanelPixelsDown")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPanelDisplayHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPanelDisplayWidth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPanelPositionX")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPanelPositionY")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "relativePositionToPictogramArea")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsSupplementaryPanelCharacteristicsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      nu.ndw.VmsSupplementaryPanelCharacteristics(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw.PositionRelativeEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsSupplementaryPanelCharacteristics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.supplementaryPictogramCodeListIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPictogramCodeListIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPanelPixelsAcross map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPanelPixelsAcross"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPanelPixelsDown map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPanelPixelsDown"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPanelDisplayHeight map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPanelDisplayHeight"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPanelDisplayWidth map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPanelDisplayWidth"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPanelPositionX map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPanelPositionX"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPanelPositionY map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPanelPositionY"), __scope, false) } getOrElse {Nil},
        __obj.relativePositionToPictogramArea map { scalaxb.toXML[nu.ndw.PositionRelativeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("relativePositionToPictogramArea"), __scope, false) } getOrElse {Nil},
        __obj.vmsSupplementaryPanelCharacteristicsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsSupplementaryPanelCharacteristicsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsSupplementaryPictogramFormat extends scalaxb.ElemNameParser[nu.ndw.VmsSupplementaryPictogram] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsSupplementaryPictogram")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsSupplementaryPictogram] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPictogramDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPictogramCode")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "supplementaryPictogramUrl")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "additionalSupplementaryPictogramDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pictogramFlashing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsSupplementaryPictogramExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.VmsSupplementaryPictogram(p1.headOption map { scalaxb.fromXML[nu.ndw.VmsDatexSupplementalPictogramEnum](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsSupplementaryPictogram, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.supplementaryPictogramDescription map { scalaxb.toXML[nu.ndw.VmsDatexSupplementalPictogramEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPictogramDescription"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPictogramCode map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPictogramCode"), __scope, false) } getOrElse {Nil},
        __obj.supplementaryPictogramUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("supplementaryPictogramUrl"), __scope, false) } getOrElse {Nil},
        __obj.additionalSupplementaryPictogramDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("additionalSupplementaryPictogramDescription"), __scope, false) } getOrElse {Nil},
        __obj.pictogramFlashing map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("pictogramFlashing"), __scope, false) } getOrElse {Nil},
        __obj.vmsSupplementaryPictogramExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsSupplementaryPictogramExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsTablePublicationFormat extends scalaxb.ElemNameParser[nu.ndw.VmsTablePublication] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsTablePublication")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsTablePublication] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "feedType")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "publicationCreator")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "payloadPublicationExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "headerInformation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitTable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTablePublicationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.VmsTablePublication(p1.headOption map { scalaxb.fromXML[nu.ndw.MultilingualString](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw.InternationalIdentifier](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.HeaderInformation](p6, scalaxb.ElemName(node) :: stack),
        p7 map { scalaxb.fromXML[nu.ndw.VmsUnitTable](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@lang").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lang" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.VmsTablePublication, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@lang", _) => attr = scala.xml.Attribute(null, "lang", __obj.lang.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.VmsTablePublication, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.feedDescription map { scalaxb.toXML[nu.ndw.MultilingualString](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedDescription"), __scope, false) } getOrElse {Nil},
        __obj.feedType map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("feedType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.publicationTime, Some("http://datex2.eu/schema/2/2_0"), Some("publicationTime"), __scope, false),
        scalaxb.toXML[nu.ndw.InternationalIdentifier](__obj.publicationCreator, Some("http://datex2.eu/schema/2/2_0"), Some("publicationCreator"), __scope, false),
        __obj.payloadPublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("payloadPublicationExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.HeaderInformation](__obj.headerInformation, Some("http://datex2.eu/schema/2/2_0"), Some("headerInformation"), __scope, false),
        __obj.vmsUnitTable flatMap { scalaxb.toXML[nu.ndw.VmsUnitTable](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitTable"), __scope, false) },
        __obj.vmsTablePublicationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTablePublicationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsTextFormat extends scalaxb.ElemNameParser[nu.ndw.VmsText] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsText")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsText] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsLegendCode")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextImageUrl")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextLine")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      nu.ndw.VmsText(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[nu.ndw._VmsTextLineIndexVmsTextLine](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsText, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.vmsLegendCode map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsLegendCode"), __scope, false) } getOrElse {Nil},
        __obj.vmsTextImageUrl map { scalaxb.toXML[java.net.URI](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextImageUrl"), __scope, false) } getOrElse {Nil},
        __obj.vmsTextLine flatMap { scalaxb.toXML[nu.ndw._VmsTextLineIndexVmsTextLine](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextLine"), __scope, false) },
        __obj.vmsTextExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsTextDisplayCharacteristicsFormat extends scalaxb.ElemNameParser[nu.ndw.VmsTextDisplayCharacteristics] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsTextDisplayCharacteristics")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsTextDisplayCharacteristics] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textLanternsPresent")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textPageSequencingCapable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textPixelsAcross")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textPixelsDown")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textDisplayHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textDisplayWidth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxNumberOfCharacters")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxNumberOfRows")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "legendCodeListIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxFontHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "minFontHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxFontWidth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "minFontWidth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxFontSpacing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "minFontSpacing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxTextLuminanceLevel")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maxNumberOfSequentialPages")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textPositionAbsolute")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textPositionX")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "textPositionY")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextDisplayCharacteristicsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      nu.ndw.VmsTextDisplayCharacteristics(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw.PositionAbsoluteEnum](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsTextDisplayCharacteristics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.textLanternsPresent map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("textLanternsPresent"), __scope, false) } getOrElse {Nil},
        __obj.textPageSequencingCapable map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("textPageSequencingCapable"), __scope, false) } getOrElse {Nil},
        __obj.textPixelsAcross map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("textPixelsAcross"), __scope, false) } getOrElse {Nil},
        __obj.textPixelsDown map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("textPixelsDown"), __scope, false) } getOrElse {Nil},
        __obj.textDisplayHeight map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("textDisplayHeight"), __scope, false) } getOrElse {Nil},
        __obj.textDisplayWidth map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("textDisplayWidth"), __scope, false) } getOrElse {Nil},
        __obj.maxNumberOfCharacters map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxNumberOfCharacters"), __scope, false) } getOrElse {Nil},
        __obj.maxNumberOfRows map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxNumberOfRows"), __scope, false) } getOrElse {Nil},
        __obj.legendCodeListIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("legendCodeListIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.maxFontHeight map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxFontHeight"), __scope, false) } getOrElse {Nil},
        __obj.minFontHeight map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("minFontHeight"), __scope, false) } getOrElse {Nil},
        __obj.maxFontWidth map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxFontWidth"), __scope, false) } getOrElse {Nil},
        __obj.minFontWidth map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("minFontWidth"), __scope, false) } getOrElse {Nil},
        __obj.maxFontSpacing map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxFontSpacing"), __scope, false) } getOrElse {Nil},
        __obj.minFontSpacing map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("minFontSpacing"), __scope, false) } getOrElse {Nil},
        __obj.maxTextLuminanceLevel map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxTextLuminanceLevel"), __scope, false) } getOrElse {Nil},
        __obj.maxNumberOfSequentialPages map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("maxNumberOfSequentialPages"), __scope, false) } getOrElse {Nil},
        __obj.textPositionAbsolute map { scalaxb.toXML[nu.ndw.PositionAbsoluteEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("textPositionAbsolute"), __scope, false) } getOrElse {Nil},
        __obj.textPositionX map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("textPositionX"), __scope, false) } getOrElse {Nil},
        __obj.textPositionY map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("textPositionY"), __scope, false) } getOrElse {Nil},
        __obj.vmsTextDisplayCharacteristicsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextDisplayCharacteristicsExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsTextLineFormat extends scalaxb.ElemNameParser[nu.ndw.VmsTextLine] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsTextLine")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsTextLine] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextLine")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextLineLanguage")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextLineColour")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextLineFlashing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextLineHtml")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsTextLineExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.VmsTextLine(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.ColourEnum](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsTextLine, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.vmsTextLine, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextLine"), __scope, false),
        __obj.vmsTextLineLanguage map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextLineLanguage"), __scope, false) } getOrElse {Nil},
        __obj.vmsTextLineColour map { scalaxb.toXML[nu.ndw.ColourEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextLineColour"), __scope, false) } getOrElse {Nil},
        __obj.vmsTextLineFlashing map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextLineFlashing"), __scope, false) } getOrElse {Nil},
        __obj.vmsTextLineHtml map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextLineHtml"), __scope, false) } getOrElse {Nil},
        __obj.vmsTextLineExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsTextLineExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_VmsTypeEnumFormat = new DefaultNundw_VmsTypeEnumFormat {}
  trait DefaultNundw_VmsTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.VmsTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.VmsTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("colourGraphic")) => nu.ndw.ColourGraphic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("continuousSign")) => nu.ndw.ContinuousSign
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("monochromeGraphic")) => nu.ndw.MonochromeGraphic
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("matrixSign")) => nu.ndw.MatrixSign
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.VmsTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.VmsTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_VmsUnitFormat extends scalaxb.ElemNameParser[nu.ndw.VmsUnit] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsUnit")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsUnit] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsSettingExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitTableReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitReference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vms")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitFault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.VmsUnit(p1.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw._VmsUnitTableVersionedReference](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[nu.ndw._VmsUnitRecordVersionedReference](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[nu.ndw._VmsUnitVmsIndexVms](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw.VmsUnitFault](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsUnit, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.vmsSettingExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsSettingExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw._VmsUnitTableVersionedReference](__obj.vmsUnitTableReference, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitTableReference"), __scope, false),
        scalaxb.toXML[nu.ndw._VmsUnitRecordVersionedReference](__obj.vmsUnitReference, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitReference"), __scope, false),
        __obj.vms flatMap { scalaxb.toXML[nu.ndw._VmsUnitVmsIndexVms](_, Some("http://datex2.eu/schema/2/2_0"), Some("vms"), __scope, false) },
        __obj.vmsUnitFault flatMap { scalaxb.toXML[nu.ndw.VmsUnitFault](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitFault"), __scope, false) },
        __obj.vmsUnitExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsUnitFaultFormat extends scalaxb.ElemNameParser[nu.ndw.VmsUnitFault] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsUnitFault")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsUnitFault] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultCreationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultLastUpdateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultSeverity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "faultExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitFault")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitFaultExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      nu.ndw.VmsUnitFault(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[nu.ndw.FaultSeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.VmsFaultEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.VmsUnitFault, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.faultIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.faultDescription map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultDescription"), __scope, false) } getOrElse {Nil},
        __obj.faultCreationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultCreationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.faultLastUpdateTime, Some("http://datex2.eu/schema/2/2_0"), Some("faultLastUpdateTime"), __scope, false),
        __obj.faultSeverity map { scalaxb.toXML[nu.ndw.FaultSeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultSeverity"), __scope, false) } getOrElse {Nil},
        __obj.faultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("faultExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.VmsFaultEnum](__obj.vmsUnitFault, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitFault"), __scope, false),
        __obj.vmsUnitFaultExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitFaultExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsUnitRecordFormat extends scalaxb.ElemNameParser[nu.ndw.VmsUnitRecord] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsUnitRecord")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsUnitRecord] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "numberOfVms")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitIPAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitElectronicAddress")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsRecord")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitRecordExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.VmsUnitRecord(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[nu.ndw._VmsUnitRecordVmsIndexVmsRecord](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.VmsUnitRecord, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.VmsUnitRecord, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.numberOfVms map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("numberOfVms"), __scope, false) } getOrElse {Nil},
        __obj.vmsUnitIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.vmsUnitIPAddress map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitIPAddress"), __scope, false) } getOrElse {Nil},
        __obj.vmsUnitElectronicAddress map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitElectronicAddress"), __scope, false) } getOrElse {Nil},
        __obj.vmsRecord flatMap { scalaxb.toXML[nu.ndw._VmsUnitRecordVmsIndexVmsRecord](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsRecord"), __scope, false) },
        __obj.vmsUnitRecordExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitRecordExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_VmsUnitTableFormat extends scalaxb.ElemNameParser[nu.ndw.VmsUnitTable] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("VmsUnitTable")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.VmsUnitTable] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitTableIdentification")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitRecord")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vmsUnitTableExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.VmsUnitTable(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[nu.ndw.VmsUnitRecord](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.VmsUnitTable, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.VmsUnitTable, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.vmsUnitTableIdentification map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitTableIdentification"), __scope, false) } getOrElse {Nil},
        __obj.vmsUnitRecord flatMap { scalaxb.toXML[nu.ndw.VmsUnitRecord](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitRecord"), __scope, false) },
        __obj.vmsUnitTableExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("vmsUnitTableExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_WeatherDataFormat extends scalaxb.XMLFormat[nu.ndw.WeatherData] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.WeatherData] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://datex2.eu/schema/2/2_0"), Some("TemperatureInformation")) => Right(scalaxb.fromXML[nu.ndw.TemperatureInformationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("RoadSurfaceConditionInformation")) => Right(scalaxb.fromXML[nu.ndw.RoadSurfaceConditionInformationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PollutionInformation")) => Right(scalaxb.fromXML[nu.ndw.PollutionInformationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("HumidityInformation")) => Right(scalaxb.fromXML[nu.ndw.HumidityInformationType](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("PrecipitationInformation")) => Right(scalaxb.fromXML[nu.ndw.PrecipitationInformation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("VisibilityInformation")) => Right(scalaxb.fromXML[nu.ndw.VisibilityInformation](node, stack))
          case (Some("http://datex2.eu/schema/2/2_0"), Some("WindInformation")) => Right(scalaxb.fromXML[nu.ndw.WindInformation](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: nu.ndw.WeatherData, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: nu.ndw.TemperatureInformationType => scalaxb.toXML[nu.ndw.TemperatureInformationType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.RoadSurfaceConditionInformationType => scalaxb.toXML[nu.ndw.RoadSurfaceConditionInformationType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.PollutionInformationType => scalaxb.toXML[nu.ndw.PollutionInformationType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.HumidityInformationType => scalaxb.toXML[nu.ndw.HumidityInformationType](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.PrecipitationInformation => scalaxb.toXML[nu.ndw.PrecipitationInformation](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.VisibilityInformation => scalaxb.toXML[nu.ndw.VisibilityInformation](x, __namespace, __elementLabel, __scope, true)
      case x: nu.ndw.WindInformation => scalaxb.toXML[nu.ndw.WindInformation](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultNundw_WeatherRelatedRoadConditionsFormat extends scalaxb.ElemNameParser[nu.ndw.WeatherRelatedRoadConditions] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("WeatherRelatedRoadConditions")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.WeatherRelatedRoadConditions] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "trafficElementExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "drivingConditionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "conditionsExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadConditionsExtension")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherRelatedRoadConditionType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "roadSurfaceConditionMeasurements")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherRelatedRoadConditionsExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 =>
      nu.ndw.WeatherRelatedRoadConditions(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[nu.ndw.DrivingConditionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[nu.ndw.WeatherRelatedRoadConditionTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[nu.ndw.RoadSurfaceConditionMeasurements](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.WeatherRelatedRoadConditions, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.WeatherRelatedRoadConditions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.trafficElementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("trafficElementExtension"), __scope, false) } getOrElse {Nil},
        __obj.drivingConditionType map { scalaxb.toXML[nu.ndw.DrivingConditionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("drivingConditionType"), __scope, false) } getOrElse {Nil},
        __obj.conditionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("conditionsExtension"), __scope, false) } getOrElse {Nil},
        __obj.roadConditionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadConditionsExtension"), __scope, false) } getOrElse {Nil},
        __obj.weatherRelatedRoadConditionType flatMap { scalaxb.toXML[nu.ndw.WeatherRelatedRoadConditionTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherRelatedRoadConditionType"), __scope, false) },
        __obj.roadSurfaceConditionMeasurements map { scalaxb.toXML[nu.ndw.RoadSurfaceConditionMeasurements](_, Some("http://datex2.eu/schema/2/2_0"), Some("roadSurfaceConditionMeasurements"), __scope, false) } getOrElse {Nil},
        __obj.weatherRelatedRoadConditionsExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherRelatedRoadConditionsExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_WeatherRelatedRoadConditionTypeEnumFormat = new DefaultNundw_WeatherRelatedRoadConditionTypeEnumFormat {}
  trait DefaultNundw_WeatherRelatedRoadConditionTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.WeatherRelatedRoadConditionTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.WeatherRelatedRoadConditionTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("blackIce")) => nu.ndw.BlackIce
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("deepSnow")) => nu.ndw.DeepSnow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("dry")) => nu.ndw.Dry
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freezingOfWetRoads")) => nu.ndw.FreezingOfWetRoads
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freezingPavements")) => nu.ndw.FreezingPavements
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freezingRain")) => nu.ndw.FreezingRain
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("freshSnow")) => nu.ndw.FreshSnow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ice")) => nu.ndw.Ice
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("iceBuildUp")) => nu.ndw.IceBuildUp
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("iceWithWheelBarTracks")) => nu.ndw.IceWithWheelBarTracks
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("icyPatches")) => nu.ndw.IcyPatches
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("looseSnow")) => nu.ndw.LooseSnow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("normalWinterConditionsForPedestrians")) => nu.ndw.NormalWinterConditionsForPedestrians
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("packedSnow")) => nu.ndw.PackedSnow
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("roadSurfaceMelting")) => nu.ndw.RoadSurfaceMelting
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slipperyRoad")) => nu.ndw.SlipperyRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slushOnRoad")) => nu.ndw.SlushOnRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("slushStrings")) => nu.ndw.SlushStrings
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowDrifts")) => nu.ndw.SnowDrifts
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowOnPavement")) => nu.ndw.SnowOnPavement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("snowOnTheRoad")) => nu.ndw.SnowOnTheRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("surfaceWater")) => nu.ndw.SurfaceWater
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wet")) => nu.ndw.Wet
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wetAndIcyRoad")) => nu.ndw.WetAndIcyRoad
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("wetIcyPavement")) => nu.ndw.WetIcyPavement
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.OtherValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.WeatherRelatedRoadConditionTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.WeatherRelatedRoadConditionTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildNundw_WeekOfMonthEnumFormat = new DefaultNundw_WeekOfMonthEnumFormat {}
  trait DefaultNundw_WeekOfMonthEnumFormat extends scalaxb.XMLFormat[nu.ndw.WeekOfMonthEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.WeekOfMonthEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("firstWeekOfMonth")) => nu.ndw.FirstWeekOfMonth
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("secondWeekOfMonth")) => nu.ndw.SecondWeekOfMonth
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("thirdWeekOfMonth")) => nu.ndw.ThirdWeekOfMonth
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fourthWeekOfMonth")) => nu.ndw.FourthWeekOfMonth
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("fifthWeekOfMonth")) => nu.ndw.FifthWeekOfMonth

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.WeekOfMonthEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.WeekOfMonthEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultNundw_WidthCharacteristicFormat extends scalaxb.ElemNameParser[nu.ndw.WidthCharacteristic] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("WidthCharacteristic")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.WidthCharacteristic] =
      phrase((scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "comparisonOperator")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "vehicleWidth")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "widthCharacteristicExtension")) ^^
      { case p1 ~ p2 ~ p3 =>
      nu.ndw.WidthCharacteristic(scalaxb.fromXML[nu.ndw.ComparisonOperatorEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Float](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.WidthCharacteristic, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[nu.ndw.ComparisonOperatorEnum](__obj.comparisonOperator, Some("http://datex2.eu/schema/2/2_0"), Some("comparisonOperator"), __scope, false),
        scalaxb.toXML[Float](__obj.vehicleWidth, Some("http://datex2.eu/schema/2/2_0"), Some("vehicleWidth"), __scope, false),
        __obj.widthCharacteristicExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("widthCharacteristicExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_WindFormat extends scalaxb.ElemNameParser[nu.ndw.Wind] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("Wind")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.Wind] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "windMeasurementHeight")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "windSpeed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "maximumWindSpeed")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "windDirectionBearing")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "windDirectionCompass")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "windExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      nu.ndw.Wind(p1.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[nu.ndw.SpeedValue](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.SpeedValue](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw.DirectionBearingValue](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw.DirectionCompassValue](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: nu.ndw.Wind, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.windMeasurementHeight map { scalaxb.toXML[Int](_, Some("http://datex2.eu/schema/2/2_0"), Some("windMeasurementHeight"), __scope, false) } getOrElse {Nil},
        __obj.windSpeed map { scalaxb.toXML[nu.ndw.SpeedValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("windSpeed"), __scope, false) } getOrElse {Nil},
        __obj.maximumWindSpeed map { scalaxb.toXML[nu.ndw.SpeedValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("maximumWindSpeed"), __scope, false) } getOrElse {Nil},
        __obj.windDirectionBearing map { scalaxb.toXML[nu.ndw.DirectionBearingValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("windDirectionBearing"), __scope, false) } getOrElse {Nil},
        __obj.windDirectionCompass map { scalaxb.toXML[nu.ndw.DirectionCompassValue](_, Some("http://datex2.eu/schema/2/2_0"), Some("windDirectionCompass"), __scope, false) } getOrElse {Nil},
        __obj.windExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("windExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_WindInformationFormat extends scalaxb.ElemNameParser[nu.ndw.WindInformation] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("WindInformation")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.WindInformation] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationPeriod")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "measurementOrCalculationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "pertinentLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "basicDataExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "weatherDataExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "wind")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "windInformationExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      nu.ndw.WindInformation(p1.headOption map { scalaxb.fromXML[Float](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[nu.ndw.GroupOfLocations](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Wind](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@measurementOrCalculatedTimePrecision").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[nu.ndw.TimePrecisionEnum](x, scalaxb.ElemName(node) :: stack)) } map { "@measurementOrCalculatedTimePrecision" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.WindInformation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@measurementOrCalculatedTimePrecision", _) => __obj.measurementOrCalculatedTimePrecision foreach { x => attr = scala.xml.Attribute(null, "measurementOrCalculatedTimePrecision", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.WindInformation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.measurementOrCalculationPeriod map { scalaxb.toXML[Float](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationPeriod"), __scope, false) } getOrElse {Nil},
        __obj.measurementOrCalculationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("measurementOrCalculationTime"), __scope, false) } getOrElse {Nil},
        __obj.pertinentLocation map { scalaxb.toXML[nu.ndw.GroupOfLocations](_, Some("http://datex2.eu/schema/2/2_0"), Some("pertinentLocation"), __scope, false) } getOrElse {Nil},
        __obj.basicDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("basicDataExtension"), __scope, false) } getOrElse {Nil},
        __obj.weatherDataExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("weatherDataExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Wind](__obj.wind, Some("http://datex2.eu/schema/2/2_0"), Some("wind"), __scope, false),
        __obj.windInformationExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("windInformationExtension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultNundw_WinterDrivingManagementFormat extends scalaxb.ElemNameParser[nu.ndw.WinterDrivingManagement] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    override def typeName: Option[String] = Some("WinterDrivingManagement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[nu.ndw.WinterDrivingManagement] =
      phrase(opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationReference")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordCreationTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordObservationTime")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordFirstSupplierVersionTime")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "confidentialityOverride")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "probabilityOfOccurrence")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "source")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "validity")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "impact")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "cause")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "generalPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "nonGeneralPublicComment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "urlLink")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "groupOfLocations")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "management")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "situationRecordExtension")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "actionPlanIdentifier")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "operatorActionExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "complianceOption")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficDirection")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "applicableForTrafficType")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "placesAtWhichApplicable")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "automaticallyInitiated")) ~ 
      safeRep(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "forVehiclesWithCharacteristicsOf")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "networkManagementExtension")) ~ 
      (scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "winterEquipmentManagementType")) ~ 
      opt(scalaxb.ElemName(Some("http://datex2.eu/schema/2/2_0"), "winterDrivingManagementExtension")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 =>
      nu.ndw.WinterDrivingManagement(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[nu.ndw.ConfidentialityValueEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ProbabilityOfOccurrenceEnum](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[nu.ndw.SeverityEnum](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[nu.ndw.Source](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.Validity](p10, scalaxb.ElemName(node) :: stack),
        p11.headOption map { scalaxb.fromXML[nu.ndw.Impact](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[nu.ndw.Cause](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[nu.ndw.Comment](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[nu.ndw.UrlLink](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.GroupOfLocations](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[nu.ndw.Management](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[nu.ndw._SituationRecordExtensionType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionOriginEnum](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[nu.ndw.OperatorActionStatusEnum](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.ComplianceOptionEnum](p23, scalaxb.ElemName(node) :: stack),
        p24 map { scalaxb.fromXML[nu.ndw.DirectionEnum](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[nu.ndw.TrafficTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[nu.ndw.PlacesEnum](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[nu.ndw.VehicleCharacteristics](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[nu.ndw.WinterEquipmentManagementTypeEnum](p30, scalaxb.ElemName(node) :: stack),
        p31.headOption map { scalaxb.fromXML[nu.ndw._ExtensionType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: nu.ndw.WinterDrivingManagement, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: nu.ndw.WinterDrivingManagement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.situationRecordCreationReference map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordCreationTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordCreationTime"), __scope, false),
        __obj.situationRecordObservationTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordObservationTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.situationRecordVersionTime, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordVersionTime"), __scope, false),
        __obj.situationRecordFirstSupplierVersionTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordFirstSupplierVersionTime"), __scope, false) } getOrElse {Nil},
        __obj.confidentialityOverride map { scalaxb.toXML[nu.ndw.ConfidentialityValueEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("confidentialityOverride"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ProbabilityOfOccurrenceEnum](__obj.probabilityOfOccurrence, Some("http://datex2.eu/schema/2/2_0"), Some("probabilityOfOccurrence"), __scope, false),
        __obj.severity map { scalaxb.toXML[nu.ndw.SeverityEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[nu.ndw.Source](_, Some("http://datex2.eu/schema/2/2_0"), Some("source"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.Validity](__obj.validity, Some("http://datex2.eu/schema/2/2_0"), Some("validity"), __scope, false),
        __obj.impact map { scalaxb.toXML[nu.ndw.Impact](_, Some("http://datex2.eu/schema/2/2_0"), Some("impact"), __scope, false) } getOrElse {Nil},
        __obj.cause map { scalaxb.toXML[nu.ndw.Cause](_, Some("http://datex2.eu/schema/2/2_0"), Some("cause"), __scope, false) } getOrElse {Nil},
        __obj.generalPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("generalPublicComment"), __scope, false) },
        __obj.nonGeneralPublicComment flatMap { scalaxb.toXML[nu.ndw.Comment](_, Some("http://datex2.eu/schema/2/2_0"), Some("nonGeneralPublicComment"), __scope, false) },
        __obj.urlLink flatMap { scalaxb.toXML[nu.ndw.UrlLink](_, Some("http://datex2.eu/schema/2/2_0"), Some("urlLink"), __scope, false) },
        scalaxb.toXML[nu.ndw.GroupOfLocations](__obj.groupOfLocations, Some("http://datex2.eu/schema/2/2_0"), Some("groupOfLocations"), __scope, false),
        __obj.management map { scalaxb.toXML[nu.ndw.Management](_, Some("http://datex2.eu/schema/2/2_0"), Some("management"), __scope, false) } getOrElse {Nil},
        __obj.situationRecordExtension map { scalaxb.toXML[nu.ndw._SituationRecordExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("situationRecordExtension"), __scope, false) } getOrElse {Nil},
        __obj.actionOrigin map { scalaxb.toXML[nu.ndw.OperatorActionOriginEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionOrigin"), __scope, false) } getOrElse {Nil},
        __obj.actionPlanIdentifier map { scalaxb.toXML[String](_, Some("http://datex2.eu/schema/2/2_0"), Some("actionPlanIdentifier"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionStatus map { scalaxb.toXML[nu.ndw.OperatorActionStatusEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionStatus"), __scope, false) } getOrElse {Nil},
        __obj.operatorActionExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("operatorActionExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.ComplianceOptionEnum](__obj.complianceOption, Some("http://datex2.eu/schema/2/2_0"), Some("complianceOption"), __scope, false),
        __obj.applicableForTrafficDirection flatMap { scalaxb.toXML[nu.ndw.DirectionEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficDirection"), __scope, false) },
        __obj.applicableForTrafficType flatMap { scalaxb.toXML[nu.ndw.TrafficTypeEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("applicableForTrafficType"), __scope, false) },
        __obj.placesAtWhichApplicable flatMap { scalaxb.toXML[nu.ndw.PlacesEnum](_, Some("http://datex2.eu/schema/2/2_0"), Some("placesAtWhichApplicable"), __scope, false) },
        __obj.automaticallyInitiated map { scalaxb.toXML[Boolean](_, Some("http://datex2.eu/schema/2/2_0"), Some("automaticallyInitiated"), __scope, false) } getOrElse {Nil},
        __obj.forVehiclesWithCharacteristicsOf flatMap { scalaxb.toXML[nu.ndw.VehicleCharacteristics](_, Some("http://datex2.eu/schema/2/2_0"), Some("forVehiclesWithCharacteristicsOf"), __scope, false) },
        __obj.networkManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("networkManagementExtension"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[nu.ndw.WinterEquipmentManagementTypeEnum](__obj.winterEquipmentManagementType, Some("http://datex2.eu/schema/2/2_0"), Some("winterEquipmentManagementType"), __scope, false),
        __obj.winterDrivingManagementExtension map { scalaxb.toXML[nu.ndw._ExtensionType](_, Some("http://datex2.eu/schema/2/2_0"), Some("winterDrivingManagementExtension"), __scope, false) } getOrElse {Nil})

  }

  def buildNundw_WinterEquipmentManagementTypeEnumFormat = new DefaultNundw_WinterEquipmentManagementTypeEnumFormat {}
  trait DefaultNundw_WinterEquipmentManagementTypeEnumFormat extends scalaxb.XMLFormat[nu.ndw.WinterEquipmentManagementTypeEnum] {
    val targetNamespace: Option[String] = Some("http://datex2.eu/schema/2/2_0")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): nu.ndw.WinterEquipmentManagementTypeEnum = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("doNoUseStudTyres")) => nu.ndw.DoNoUseStudTyres
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useSnowChains")) => nu.ndw.UseSnowChains
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useSnowChainsOrTyres")) => nu.ndw.UseSnowChainsOrTyres
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("useSnowTyres")) => nu.ndw.UseSnowTyres
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("winterEquipmentOnBoardRequired")) => nu.ndw.WinterEquipmentOnBoardRequired
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("other")) => nu.ndw.Other

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, nu.ndw.WinterEquipmentManagementTypeEnum] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: nu.ndw.WinterEquipmentManagementTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }


}

